
// Copyright 2015 go-swagger maintainers
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// DeleteEventByIDHandlerFunc turns a function with the right signature into a delete event by id handler
type DeleteEventByIDHandlerFunc func(DeleteEventByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteEventByIDHandlerFunc) Handle(params DeleteEventByIDParams) middleware.Responder {
	return fn(params)
}

// DeleteEventByIDHandler interface for that can handle valid delete event by id params
type DeleteEventByIDHandler interface {
	Handle(DeleteEventByIDParams) middleware.Responder
}

// NewDeleteEventByID creates a new http.Handler for the delete event by id operation
func NewDeleteEventByID(ctx *middleware.Context, handler DeleteEventByIDHandler) *DeleteEventByID {
	return &DeleteEventByID{Context: ctx, Handler: handler}
}

/*
Delete event by id.
*/
type DeleteEventByID struct {
	Context *middleware.Context
	Params  DeleteEventByIDParams
	Handler DeleteEventByIDHandler
}

func (o *DeleteEventByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
