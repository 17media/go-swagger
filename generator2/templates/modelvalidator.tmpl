{{define "primitivevalidator"}}
{{if .Required}}
if err := validate.Required({{.Path}}, "{{.Location}}", {{.ValueExpression}}); err != nil {
  return err
}
{{end}}
{{if .MinLength}}
if err := validate.MinLength({{.Path}}, "{{.Location}}", {{.ValueExpression}}, {{.MinLength}}); err != nil {
  return err
}
{{end}}
{{if .MaxLength}}
if err := validate.MaxLength({{.Path}}, "{{.Location}}", {{.ValueExpression}}, {{.MaxLength}}); err != nil {
  return err
}
{{end}}
{{if .Pattern}}
if err := validate.Pattern({{.Path}}, "{{.Location}}", {{.ValueExpression}}, `{{.Pattern}}`); err != nil {
  return err
}
{{end}}
{{if .Minimum}}
if err := validate.Minimum({{.Path}}, "{{.Location}}", float64({{.ValueExpression}}), {{.Minimum}}, {{.ExclusiveMinimum}}); err != nil {
  return err
}
{{end}}
{{if .Maximum}}
if err := validate.Maximum({{.Path}}, "{{.Location}}", float64({{.ValueExpression}}), {{.Maximum}}, {{.ExclusiveMaximum}}); err != nil {
  return err
}
{{end}}
{{if .MultipleOf}}
if err := validate.MultipleOf({{.Path}}, "{{.Location}}", float64({{.ValueExpression}}), {{.MultipleOf}}); err != nil {
  return err
}
{{end}}
{{if .Enum}}
if err := validate.Enum({{.Path}}, "{{.Location}}", {{.ValueExpression}}, {{.Enum}}); err != nil {
  return err
}
{{end}}
{{end}}
{{define "customformatvalidator"}}
if err := validate.FormatOf({{.Path}}, "{{.Location}}", "{{.Format}}", string({{.ValueExpression}})); err != nil {
  return err
}
{{end}}
{{define "slicevalidator"}}
{{if .NeedsSize}}
{{.ParamName}}Size := int64(len({{.ValueExpression}}))
{{end}}
{{if .MinItems}}
if err := validate.MinItems({{.Path}}, "{{.Location}}", {{.ParamName}}Size, {{.MinItems}}); err != nil {
  return err
}
{{end}}
{{if .MaxItems}}
if err := validate.MaxItems({{.Path}}, "{{.Location}}", {{.ParamName}}Size, {{.MaxItems}}); err != nil {
  return err
}
{{end}}
{{if .UniqueItems}}
if err := validate.UniqueItems({{.Path}}, "{{.Location}}", {{.ValueExpression}}); err != nil {
  return err
}
{{end}}
{{if .Enum}}
if err := validate.Enum({{.Path}}, "{{.Location}}", {{.ValueExpression}}, {{.Enum}}); err != nil {
  return err
}
{{end}}
{{if .SingleSchemaSlice }}
// single schema {{.ValueExpression}}
for i := 0; i < len({{.ValueExpression}}); i++ {
{{range .Items}}
  {{template "propertyvalidator" .}}
{{end}}
}
{{else}}
// not single schema {{.PropertyName}}
{{range .Items}}
  {{template "propertyvalidator" .}}
{{end}}
{{if .AdditionalItems}}
  for i := {{.ItemsLen}}; i  < (len() - {{.ItemsLen}}) - 1; i ++ {
    {{template "propertyvalidator" .}}
  }
{{else}}
if len({{.ValueExpression}}) > {{.ItemsLen}} {
  return errors.AdditionalItemsNotAllowed("{{.ValueExpression}}", "{{.Location}}")
}
{{end}}
{{end}}
{{end}}
{{define "objectvalidator"}}
// custom object {{.DataType}}
{{.ParamName}}Res := {{.ValueExpression}}.Validate()
if {{.ParamName}}Res.HasErrors() {
  return errors.CompositeValidationError({{.ParamName}}Res.Errors...)
}
{{end}}
{{define "propertyvalidator"}}
{{if .IsPrimitive}}{{template "primitivevalidator" .}}{{end}}
{{if .IsCustomFormatter}}{{template "customformatvalidator" .}}{{end}}
{{if .IsContainer}}{{template "slicevalidator" .}}{{end}}
{{if .IsComplexObject}}{{template "objectvalidator" .}}{{end}}
{{end}}
package {{.Package}}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "github.com/casualjim/go-swagger/validate"
  "github.com/casualjim/go-swagger/errors"

  {{range .Imports}}
  {{ printf "%q" .}}
  {{end}}
)

// Validate validates this {{.HumanClassName}}
func ({{.ReceiverName}} *{{.ClassName}}) Validate() *validate.Result {
  res := new(validate.Result)

  {{range .Properties}}
  {{if .HasValidations}}
  if err := {{.ReceiverName}}.validate{{.PropertyName}}(); err != nil {
    res.AddErrors(err)
  }
  {{end}}
  {{end}}

  return res
}
{{ $className := .ClassName }}
{{range .Properties}}
{{if .HasValidations}}

func ({{.ReceiverName}} *{{$className}}) validate{{.PropertyName}}() *errors.Validation {
  {{template "propertyvalidator" .}}

  return nil
}
{{end}}
{{end}}
