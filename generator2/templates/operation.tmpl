package {{.Package}}

import (
  "net/http"

  "github.com/casualjim/go-swagger"
  "github.com/casualjim/go-swagger/errors"
  "github.com/casualjim/go-swagger/spec"
  "github.com/casualjim/go-swagger/router"

  {{range .Imports}}
  {{ printf "%q" .}}
  {{end}}
)

type {{.ClassName}}Handler interface {
  {{if .Authorized}}// Handle produces a result or an error. Gets the request params as well as the security principal
  {{if .SuccessModel}}
  Handle({{.ClassName}}Params, interface{}) ({{.SuccessModel}}, error)
  {{else}}
  Handle({{.ClassName}}Params, interface{}) error
  {{end}}
  {{else}}// Handle produces a result or an error. Gets the request params
  {{if .SuccessModel}}
  Handle({{.ClassName}}Params) ({{.SuccessModel}}, error)
  {{else}}
  Handle({{.ClassName}}Params) error
  {{end}}
  {{end}}
}

{{if .DocString}}{{.DocString}}{{end}}
func New{{.ClassName}}(ctx *middleware.Context, handler {{.ClassName}}Handler) *{{.ClassName}} {
  return &{{.ClassName}}{Context: ctx, Handler: handler}
}

type {{.ClassName}} struct {
  Context *middleware.Context
  Params  {{.ClassName}}Params
  Handler {{.ClassName}}Handler
}

func (o *{{.ClassName}}) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
  route, _ := o.Context.RouteInfo(r)

  {{if .Authorized}}principal, err := o.Context.Authorize(r, route)
  if err != nil {
    o.Context.Respond(rw, r, route.Produces, route, err)
    return
  }

  {{end}}
  if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
    o.Context.Respond(rw, r, route.Produces, route, err)
    return
  }

  {{if .Authorized}}
  {{if .SuccessModel}}res, err := o.Handler.Handle(o.Params, principal) // actually handle the request
  if err != nil {
    o.Context.Respond(rw, r, route.Produces, route, err)
    return
  }
  o.Context.Respond(rw, r, route.Produces, route, res)
  {{else}}if err := o.Handler(o.Params, principal); err != nil { // actually handle the request
    return err
  }
  o.Context.Respond(rw, r, route.Produces, route, nil)

  {{end}}
  {{else}}
  {{if .SuccessModel}}res, err := o.Handler.Handle(o.Params) // actually handle the request
  if err != nil {
    o.Context.Respond(rw, r, route.Produces, route, err)
    return
  }
  o.Context.Respond(rw, r, route.Produces, route, res)
  {{else}}if err := o.Handler(o.Params); err != nil { // actually handle the request
    return err
  }
  o.Context.Respond(rw, r, route.Produces, route, nil)
  {{end}}
  {{end}}
}
