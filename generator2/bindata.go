package generator2

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_model_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\xcd\x4e\xf4\x30\x0c\xbc\xe7\x29\xac\x4a\x9f\xf4\x71\xa0\x7b\xe7\x0a\x1c\xb8\x20\x24\xf6\x01\xd6\xb4\x6e\x1a\x68\x7e\x48\x5c\x56\x55\x94\x77\x27\x49\x5b\x56\xcb\x85\x5b\x6c\xcf\xd8\x33\x93\x18\x7b\x1a\x94\x21\x68\xb4\xed\x69\x72\xde\x3a\xf2\xbc\x34\x29\x89\x18\xd5\x00\xed\x83\xed\x5e\xd9\x2b\x23\x53\x8a\xf1\xba\x22\xd3\x57\x58\xfb\xb2\xb1\x9e\x51\x53\x4a\x50\x70\xc8\x78\x5c\x5c\xa9\x4e\xef\xc1\x9a\xbb\xa6\xc0\xd0\xa3\x5e\x31\xcd\x49\xec\x7c\xe1\xb0\xfb\x40\x49\x50\x11\xf5\x59\xba\x87\x03\x1c\x47\x15\x60\x50\x13\xc1\x19\x03\x48\x32\xe4\x91\xa9\x87\xb7\x05\x78\x24\x08\x67\x94\x92\x3c\xb0\xb5\x53\x5b\xf0\x8f\xbd\xe2\x2c\x2d\x0f\x77\x9e\x56\x72\x64\xc8\xa6\xbe\x08\x86\x99\xeb\xaa\x91\x0c\x2c\x76\x06\x4f\xb7\x7e\x36\x57\x9b\xf6\x13\xd0\x59\xad\xd1\xf4\x62\xcb\xe0\x49\x3b\xeb\x39\xa4\xa4\xd6\x07\xfc\x17\x90\xe5\x7a\x34\x59\xf6\x65\x5a\x9b\xf9\x9a\x32\x3c\x40\xf3\xef\xb3\x81\x76\x6b\xae\x4e\x6f\x2e\x9e\xff\xc8\x76\x07\x72\x8e\xb0\xe4\x72\x3f\x61\x08\x5b\xba\x81\xfd\xdc\x31\x44\xf1\x23\x60\x8b\x5f\x51\xa8\x4c\x26\xed\xa6\xe2\xe2\xd7\x97\x56\x35\xbb\x82\x24\xbe\x03\x00\x00\xff\xff\xfc\x8d\x3d\xfc\xfa\x01\x00\x00")

func templates_model_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_model_tmpl,
		"templates/model.tmpl",
	)
}

func templates_model_tmpl() (*asset, error) {
	bytes, err := templates_model_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/model.tmpl", size: 506, mode: os.FileMode(420), modTime: time.Unix(1424067018, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_modelvalidator_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x71\x13\x36\xc0\x4e\x1b\x65\x03\x86\x3d\xac\xeb\x80\x22\xf3\xd0\x00\x5d\x1a\x24\xdd\x9e\xcb\xc8\x67\x99\x1d\x45\x3a\x24\x95\x8f\x19\xfa\xdf\x77\x24\x45\xcb\xfa\xb0\x6b\x25\x18\xb0\x27\x8b\x77\xe4\xdd\xef\x7e\xf7\x41\x7a\xb3\x59\xe0\x92\x4b\x84\x64\xad\x79\xc1\x2d\xbf\xc7\x7b\x26\xf8\x82\x59\xa5\x93\xaa\x9a\x6c\x36\x7c\x09\xe9\x35\xde\x95\x5c\xe3\x82\x04\xb4\x44\xad\xe1\xe7\xb7\x50\xef\xc3\xad\x76\xba\xd9\xa4\x57\xcc\xae\xaa\xea\x35\x24\xf4\xfd\x41\x65\xcc\x72\x25\xab\x2a\x79\x0d\xb4\xfe\x8b\x89\x12\xe7\x8f\x6b\x8d\xc6\x78\xf1\xec\x8d\xb7\xf5\xcd\x5b\x90\x5c\xc0\x66\x02\xa0\xd1\x96\x5a\x3a\xe9\xc4\xf9\x46\xb9\xd8\x62\xf8\x83\xcb\x0f\x28\x73\x67\x7e\x08\xc4\x56\x3d\x1a\x85\x97\xee\x58\x1f\x87\x8a\x3d\x1e\x44\x15\xd5\xcf\x44\xd5\x58\x1f\x85\x8a\x3c\x59\xd4\x72\x18\x53\xad\x7c\x06\xa2\xcf\xe1\x48\x30\xfd\x79\x6c\xf6\x78\x51\x16\x7b\x73\xe7\x94\x07\x11\x2d\x85\x62\xf6\xa7\x1f\xa7\x83\x75\x14\x53\x18\x5c\xf8\xd5\xfc\x31\x13\xa5\xa1\x72\xde\x8a\xc7\xe6\xf5\x00\xde\xa0\x7c\x29\xde\xe8\xa2\x83\x37\x8a\xc7\xe1\x2d\x85\xe5\x6b\x81\x1f\x97\x7b\x20\x6f\xf5\x2f\x45\xbd\xe3\x68\x14\xc2\xb9\xdc\x47\xa7\xd3\x3c\xaf\x3f\x82\xcd\xa3\x61\xc4\xdf\x38\xf2\xb2\xd2\x58\x55\x2c\x95\x2e\x98\x6d\x4d\xbd\x01\x90\xbf\xfb\x5d\x5f\xa1\xcf\x09\xc2\x46\xbf\x34\x56\x73\x99\x0f\x93\x79\x34\xe8\x08\xd6\x08\x9e\x0d\xcd\xe6\x4b\xc4\x85\xb9\xe1\xff\xa0\x97\x10\x36\xcd\x8a\x4b\x56\xd0\xd2\x09\x5d\x0c\x5c\xba\x94\x0a\x94\x7b\x90\xf4\x5b\xf5\xc2\x62\x61\xf6\xf6\xaa\xd7\x7e\x2d\x61\x1d\x1c\xb1\x43\x6b\xcb\x63\x7b\xf1\x10\xa0\x5a\xfb\x2c\x40\x5b\xcb\xa3\x00\xfd\x29\xf9\x5d\x89\x07\x30\xed\x6c\xf8\x6f\x2f\xc5\xff\x41\x53\x39\x18\x37\x54\xe6\x02\x6f\xb2\x15\x16\xec\xc6\xd5\x29\x90\xea\xec\x0c\x8c\x97\x83\xf1\x8a\x41\x8f\x13\xea\x3e\xe0\x0e\xf9\xf7\x6f\xe8\xf7\x17\xd8\x5b\xa6\xa4\x7e\xf5\x8a\x80\x6c\x36\x9a\xc9\x1c\x21\x8d\xfc\x03\x19\xa6\xcf\xb5\xa0\xb0\xdd\x33\x46\xad\x51\xdb\xa7\xa6\x53\x20\xdd\x69\x7e\xff\x25\x0c\x06\x7c\x52\xd9\x3e\xc6\xab\xda\x42\xa8\x95\x17\xfa\x0b\xfc\xbc\x5b\x2c\xb8\x23\x9e\x89\xc6\xc8\x36\x70\x72\xe9\xa5\x74\xd3\x57\x95\x23\x81\x58\xf0\xdd\x3a\x83\xd3\xb6\xd2\x09\x7e\x70\x3b\x3c\x11\x00\x47\x21\x01\xd8\x89\x99\xc0\xec\x25\x18\x7e\x6d\x7b\xeb\x24\x5d\x69\xd3\x8d\xe3\x52\xd9\x77\x42\xa8\x07\x7a\xfa\x25\x43\x26\x93\x5e\xd9\xcd\x06\xe7\x71\x77\xd4\xa9\xdb\x2f\x98\xb5\x27\x32\x25\x2b\x4c\x6b\x08\x4a\x07\xf5\x37\x66\xd9\xa7\xa7\x75\x7f\xf0\x5d\xa3\xa9\x89\xed\x41\x72\x12\xdf\x20\xd3\x99\x23\xa3\x77\x2e\x7d\xcf\xcc\xdc\x07\x4b\xf4\xf7\x09\x38\x57\xc5\x5a\x19\x6e\xb1\x36\x43\x36\xfd\xee\x69\xdf\x50\xb0\x92\xa6\xe9\x6c\x70\x9c\xf7\xb3\xb5\xad\x96\x0b\x73\x15\xdf\xe2\x55\xd5\xce\x70\xef\x89\xee\x52\xdc\xae\xb5\x0b\x73\xee\x89\x0a\xf7\x10\xbd\xd5\xda\x36\x86\xef\xbc\x41\x33\x4a\x5a\x46\x58\x3b\x06\x3a\xf7\xd0\xf0\x49\xda\x8c\x8f\x1f\x7d\xa6\xda\xa7\xbb\xa9\x6d\x1f\x0f\xbf\x6b\x96\xfd\xcd\xa8\xe3\x3c\xa7\xfe\x93\x84\xae\x02\x3e\xad\xb8\x81\x25\xa7\x6e\x7d\x60\x06\x72\x24\x6c\x64\x74\x01\xb7\x4f\x60\x57\xd4\xc2\x0f\x2c\xcf\x51\x83\x55\x4a\xa4\x6e\xff\xdc\x55\xab\xcc\x49\x19\xcf\x15\x3c\x5f\x59\x20\xee\xef\x11\x96\xa5\xf5\xa6\x56\x28\xe1\x49\x95\x94\xe9\x53\x5d\xca\x96\xa5\xe8\x02\x32\x55\x14\x4c\x2e\x26\x13\x4e\xf9\xd7\x16\xa6\x54\x19\x49\xce\xed\xaa\xbc\x4d\x49\x77\x96\x31\x53\x32\xf1\x85\x17\x67\xb9\x3a\xad\x4f\x9f\xc5\x59\x9c\x1c\xb3\x39\x14\x58\x32\xf1\xe3\x25\x4e\x1c\xef\x2c\xce\x1c\x82\x4d\x37\xf9\x12\x92\xef\xee\x62\x67\x47\xc6\x66\x9e\x9e\x58\xda\xdb\x4b\xc0\x84\xc8\x89\xc7\xf7\x25\xc1\x3f\x17\xcc\x98\x7a\xaa\x2d\x4b\x99\x81\xab\xda\x6b\xcc\x90\x2a\x4a\x07\x39\x9c\x90\x68\x67\xdf\x0c\x9a\x7e\x81\x93\x9d\x7f\x7c\x86\x9e\x81\x75\x7f\xf8\x5e\x93\xf8\x30\xed\xa8\x67\xad\x58\xea\xa9\xca\x31\x86\xe3\x4a\x85\x9a\xad\x69\xa4\xa0\x68\xae\xb2\x1e\xb8\x34\x3a\xe8\x0d\xe9\x69\xff\xb6\xf2\xc8\xdc\xc0\xaa\xbb\x99\xd4\x33\x3f\x0b\x1b\xd6\x9a\xaf\xa6\xcf\xe9\x90\x6f\x57\xf8\x36\x8b\x2c\x38\x2c\x0d\x27\xb0\x7b\x25\xb4\x82\xda\x13\xd2\x21\xaa\x1b\x27\x8e\xea\x03\xe1\xc1\x49\x3d\x80\x1a\xdb\x3e\xca\x23\xe6\x7f\x13\x1b\x51\x33\x30\x7e\xff\x0d\x00\x00\xff\xff\x65\xe5\xfe\x33\x02\x10\x00\x00")

func templates_modelvalidator_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_modelvalidator_tmpl,
		"templates/modelvalidator.tmpl",
	)
}

func templates_modelvalidator_tmpl() (*asset, error) {
	bytes, err := templates_modelvalidator_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/modelvalidator.tmpl", size: 4098, mode: os.FileMode(420), modTime: time.Unix(1424067032, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_operation_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\x0d\xb4\xb0\x02\xad\x7c\x4f\xb1\x87\x76\x5b\x34\x7b\xe8\xc2\x48\x82\xf6\x58\x30\xd4\x58\x62\x2b\x91\x0a\x3f\xec\xb8\x82\xff\x7b\x87\x14\x65\x5b\x89\xe2\x3a\x48\xd2\xf6\xd0\x53\x64\x91\xf3\x66\xde\x9b\x37\xa3\xb4\x8c\xff\xc1\x4a\x84\xae\xcb\x97\xfd\xe3\x6e\x97\x24\x8b\x05\xdc\x56\xc2\xc0\x4a\xd4\x08\x1b\x66\xa0\x44\x89\x9a\x59\x2c\xe0\x6e\x0b\xb6\x42\x30\x1b\x56\x96\xa8\xc1\x2a\x55\xe7\xfe\xfe\x8f\x85\xb0\x42\x96\x74\x38\xc4\x35\xa2\xac\x2c\xb4\x5a\xad\x11\x56\xce\x06\xa8\x0a\x25\x6c\x95\x03\x8d\x1f\xb4\x93\x23\xa4\x21\x05\x70\xd5\x34\x4c\x16\x49\x22\x9a\x56\x69\x0b\xf3\x04\x60\x26\xd1\x2e\x2a\x6b\xdb\x59\xe2\x7f\x95\xc2\x56\xee\x2e\xa7\x9b\x0b\xce\x8c\x63\xf5\xef\xa2\x59\x94\xea\x43\xc4\x9a\x9d\x71\x67\x81\x5a\x2b\x6d\xce\xba\x6a\x5a\xe4\x67\x5d\xd4\xca\x59\x9f\x9e\xee\x76\x9d\x66\x92\x84\xcd\x3f\x07\x16\x86\x64\xf5\x2f\x49\x0f\x21\xed\x0a\x66\x5f\xdf\xcf\x20\x8f\x2f\x51\x16\xf4\x94\x06\xdd\xa9\x11\x9f\x6a\x66\xcc\x17\xd6\x50\x2b\xae\x48\x88\x9a\xc4\xa1\x18\xd4\x2b\xc6\x49\x49\x45\xa2\x57\xcc\x02\x67\x12\xaa\x70\x0c\x6b\x56\x8b\xc2\x47\x5e\x39\x52\xee\x28\x1c\x5a\xa6\x59\x63\x12\xbb\x6d\xf1\x6f\x91\xbb\x50\x8b\x58\x41\xfe\x9d\xb3\x95\xd2\xe2\x4f\x2c\x42\x81\x54\x55\x7f\xdb\x37\xb3\x70\x1c\x0d\x30\xea\xa0\x71\xb5\x05\xaa\x86\xea\x08\x5a\xe6\xf0\x13\x5a\x13\x7a\xaa\xf1\xde\xa1\xb1\x31\x3d\x90\x81\x36\x58\xd7\xfe\x6f\xe8\x38\x72\xa7\x85\xdd\x06\x2d\xb8\x68\x59\xdd\xa7\xbd\x71\x9c\xb0\xcd\xcf\xaa\xc0\x3a\x24\xee\xb3\xce\xc7\x85\x2f\x03\x66\x76\x28\xbc\xdb\xa5\xe0\xef\x8c\xc3\xb3\xbe\xa8\xb4\x17\xb8\x36\xf8\x42\xc4\x10\x7d\xd4\x9d\x03\xcc\x6b\xe5\x78\x39\xd9\x37\xe1\xf7\x0c\xa5\xf0\xd4\x8f\xfc\x17\xdc\x8c\x03\x81\x6b\xa4\x89\xf4\xfc\x24\x6e\xc0\xcf\x5f\x3e\xf8\xa6\xf7\x21\x4e\xba\x4e\xb5\x7e\x92\x85\x92\xc9\xca\x49\xfe\x14\x77\xce\xed\x03\x5c\x34\xa2\x20\xa4\x0d\xd3\x98\x7f\x52\x24\xfd\x83\xcd\xa2\xa1\xf5\xb4\x57\x53\xb8\x78\x54\x9f\xb7\xac\x46\xeb\xb4\x84\x6f\xc6\x47\x5d\x84\xbc\x04\xca\x95\x45\x5d\xf4\xe5\x90\x20\x50\xee\x1b\xf1\x83\xe2\x37\x96\x8c\x58\x52\x50\x37\xfe\xd5\x8b\x33\x31\x3c\x60\xac\x76\xdc\x86\xfc\x31\xd1\x14\x1f\x3a\xed\xb5\x07\x98\xea\xc8\xbe\x5f\xcf\xf0\xf5\x35\x06\x01\x7d\x3f\xaf\x91\xa3\x58\xa3\x8e\x05\x3c\x52\x22\x85\x1b\xd4\x6b\xbc\xba\xbd\x5d\xce\x75\xec\xd4\x35\x9a\x56\x49\x83\xbf\xd2\xac\xa1\xce\x40\xc3\x45\x7c\x1f\xdc\x98\xf6\xea\xf9\x8d\x95\xc1\x6f\x70\xf9\x11\x9e\x64\x19\x78\xe4\xd7\xfe\xd6\x67\xb9\x52\x73\x32\xdc\xe4\x9a\xd8\x8f\x72\xf0\xe5\x69\xb4\x7d\xdc\xdc\x57\xe5\xa1\xbd\x8b\x09\xd1\x47\x7e\xf5\x11\xa4\xa8\x43\x6d\x70\xaa\xa2\x40\xae\x20\xb2\x04\x11\x51\xf2\x65\x9c\xc7\x6c\xa0\x45\x80\x69\x00\xea\x4d\x42\x8f\xbb\x64\x34\x00\x31\xe9\xc9\x72\xbf\x17\xb2\xf8\xc5\x6f\xd8\x28\xdc\xbe\xea\x2c\x98\xee\x51\x54\x1c\xb6\x6f\x47\x64\xfc\x0a\xbd\x23\x98\x61\x1f\xbf\x2b\xb7\x89\x0d\x3e\xb5\x72\xb4\xc7\x7a\x96\x7c\xb4\x60\x7e\x58\x28\x93\x3c\xb3\xc3\x0e\x4f\x3d\x49\xc6\x2d\x7d\x15\xeb\xed\xf0\x65\x3a\xda\x7e\xff\x60\x8b\x5f\x8f\x4a\xe2\x1c\x6f\xd6\x53\x36\x89\x4a\x9d\x25\xd1\x53\x57\x9c\x16\xec\xbf\x2a\x0f\x95\x9f\x26\x93\x1f\xc7\xf7\x34\xdb\xff\x0e\x3b\x7b\xd9\xfc\x1b\xb6\x7a\x23\x5f\x45\x4f\x1d\xfe\x35\xf9\x2b\x00\x00\xff\xff\x52\x50\xb5\x6b\xa3\x0c\x00\x00")

func templates_server_operation_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_operation_tmpl,
		"templates/server/operation.tmpl",
	)
}

func templates_server_operation_tmpl() (*asset, error) {
	bytes, err := templates_server_operation_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/operation.tmpl", size: 3235, mode: os.FileMode(420), modTime: time.Unix(1424075441, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_parameter_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x4c\x8d\xb6\xb0\x17\x8e\x7c\x29\x7a\x68\x91\x43\xb3\xdd\x22\x06\x92\x34\xdd\x3c\x2e\x45\x81\xd0\xd2\x58\x66\x2b\x51\x5a\x92\x8a\x77\x6b\xf8\xbf\x77\x38\xd4\xcb\x92\xec\xb5\x9d\xec\xa1\x87\xc5\x5a\x43\x72\xf8\xf1\xfb\xe6\x41\x6e\xb7\x11\xae\xa4\x42\x18\xe7\x5a\xa6\xd2\xca\xcf\xf8\x59\x24\x32\x12\x36\xd3\xe3\xdd\x6e\xb4\xdd\xca\x15\x04\xaf\xa5\x7a\x85\x2a\xb6\x6b\xb2\xd0\x37\x6a\x0d\x3f\x3d\x87\x72\x22\x36\xc3\x93\xed\x36\x78\x2b\xdc\xb4\x19\x8c\xe9\xf7\xab\x2c\x14\x56\x66\x6a\xb7\x1b\xcf\x80\xbe\x3f\x8a\xa4\xc0\x9b\xfb\x5c\xa3\x31\x6c\x66\x6b\xcb\xfb\xf4\x67\x76\xfe\xcd\x73\x50\x32\x81\xed\x08\x40\xa3\x2d\xb4\x72\xd6\x91\x43\x83\x2a\x6a\x50\x89\xfb\xa3\xa8\xaa\xe1\x0b\x51\x35\xde\xcf\x42\x45\x3b\x59\xd4\x6a\x18\x53\x39\x78\x01\xa2\x4f\x7e\x89\x77\xfd\xe9\x3c\x9e\xa4\x92\x69\x91\x1e\xd4\xce\x0d\x1e\x45\xb4\x4a\x32\x61\x7f\xfc\x61\x32\x84\x6c\x5a\x49\xe8\xb7\xe0\xaf\x9b\xfb\x30\x29\x0c\x85\x52\x6d\x3e\x57\xd7\x23\x78\xfd\xe0\x97\xe2\xad\xb6\xe8\xe0\xad\xcc\xe7\xe1\x2d\x12\x2b\xf3\x04\x7f\x5f\x1d\x80\x5c\x8f\x7f\x29\xea\xd6\x46\x67\x21\xbc\x51\x87\xe8\x74\x23\x97\xe5\x87\xf7\x79\x32\x0c\xfe\xdf\x54\x9b\xb0\x30\x36\x4b\x57\x99\x4e\x85\xdd\x2b\x38\x03\x18\x7f\xe3\x59\x8f\xb0\xe7\x0c\x7e\x22\x7f\x1a\xab\xa5\x8a\x87\xb9\x3c\x0d\x73\x83\xd5\x24\x32\x1c\xaa\x8a\x6f\x10\x23\xf3\x4e\xfe\x8b\x6c\x21\x68\x5a\xa4\x6f\x44\x4a\x9f\xce\xe8\x8e\x20\x95\x13\x34\x41\x75\x00\x48\x3f\x51\x17\x16\x53\x73\x30\x53\x79\xf4\x31\xb9\x3a\x38\xaa\xfc\x2c\x3d\x9f\x9b\x89\xc7\x00\x95\xa3\x17\x01\xaa\x3d\x9f\x05\xe8\x83\x92\x77\x05\x1e\xc1\xd4\x9a\x70\x76\x58\xff\xcf\x53\x2a\xd7\x59\x8e\xda\x3e\x0c\x44\xea\xc2\xbc\xad\xba\xbb\x5b\x41\xec\xe4\x09\x41\x1d\x6c\xfa\x10\xb8\x29\xed\xa3\x2e\xcc\x35\x67\xab\x4f\x2f\xea\x40\xfb\x3e\x86\x53\x79\xd0\x4d\xa6\xac\x20\xac\x1d\x07\x9d\xfc\xda\x5f\xc9\xff\x73\x11\xfe\x23\x62\xf4\xc1\xc4\x3f\x69\x6c\x34\x9f\xc3\xfb\xb5\x34\xb0\x92\x09\xc2\x46\x18\x88\x91\x7c\x93\xcb\x08\x96\x0f\x60\xd7\x08\x66\x23\xe2\x18\x35\xd8\x2c\x4b\x02\x37\xff\x26\xa2\xd3\xaa\x98\x06\xab\x75\xa9\x8c\xd7\x16\x88\xbb\xcf\x08\xab\xc2\xb2\xab\x35\x2a\x78\xc8\x0a\xe2\xfd\x99\x2e\xd4\x9e\xa7\x6a\x0b\x08\xb3\x34\x15\x2a\x1a\x8d\x64\x9a\x67\xda\xc2\x84\x74\x1a\x2b\xb4\xf3\xb5\xb5\xf9\xd8\x7d\xc4\xd2\xae\x8b\x65\x40\x13\xe7\xa1\x30\x85\x48\xfe\x96\xe9\x3c\xce\x9e\x95\xae\x4e\x99\x33\x27\xc9\x33\x6d\x4e\x9a\xea\xf6\x75\xf8\x4f\x9b\xad\xb3\xc2\x9e\x88\xa1\x0a\xec\xf1\x88\x66\x6f\xb7\x5a\x28\x52\x22\x58\xf0\xb1\x5d\x16\x3a\x23\x11\x48\xb5\x6e\x05\xe3\xef\xee\x58\x3f\x36\x7a\x09\xa7\x2c\x14\x29\x77\x9d\x08\x63\x7c\x19\xe0\x8a\x60\x88\x43\x8e\x07\x03\x22\x49\x98\xe5\x65\x56\xa8\x08\x72\x3f\x4a\x11\xc5\x46\x5a\xfa\xb2\x20\xae\x5b\xeb\xc1\x45\x3a\x27\x94\xf3\x6d\x1f\x72\x19\x92\x0b\xd6\xdc\x20\x08\x8d\x90\x2d\x39\xd2\x22\x58\xe9\x2c\x05\x01\x8e\x9d\xe0\x16\xa9\x36\x18\x3b\xa2\x05\x38\x8c\x88\xda\x46\x11\x5a\x4e\xba\xfa\xa4\x7e\xc8\xc5\xa4\x8b\xe2\x5f\xd1\x84\x5a\xe6\x3e\x99\xfd\xc1\xf6\x4c\xd5\xb1\x81\x83\xb5\x4c\xc9\x12\x35\x59\xde\xd3\xd6\x7b\xf4\xf8\x38\x7e\x21\x55\x54\xa2\x23\x12\xec\x1a\x96\x64\x20\x5e\x88\x8d\x8a\x7e\xfa\xa2\x80\xe4\x29\x33\x90\x16\x08\x7a\x91\x92\xd5\xae\x85\x75\xd1\x48\xf7\x82\x7b\x17\xd7\x2a\x36\x20\xdd\x57\x8a\x8a\x66\xc1\x47\xbf\x5e\x2c\x13\x9c\x4c\xe1\xaa\x2e\x53\xb7\x68\xe8\x3a\xe1\x5a\x14\xea\x95\x08\xd1\xc1\x70\x94\x1b\x5e\xec\xb6\xa5\xad\xdc\x46\x1b\x49\xea\x14\xc4\x2b\x91\x23\x38\x5b\x52\xb4\xeb\x2c\x02\xc7\xb9\x19\xad\x0a\x15\x82\xab\x77\xb7\x18\x22\x55\x12\x5d\x1e\xf6\x6a\x88\xe0\x69\xfb\xa4\x13\x0d\x57\x6d\x5d\x66\xc0\x51\x09\x57\x3e\x38\xa9\x47\xd8\x70\x8d\xd1\xad\xfb\x9a\xb9\x60\x71\x07\xd6\x55\x2a\x06\xd7\xa5\x61\xe0\x50\xbe\x68\x1a\x57\x96\x15\x6e\x26\x9d\xe1\x29\xd3\xef\xc4\x7c\x29\xcc\x1f\x05\xea\x87\x4a\xe2\x3b\x5e\x52\xb2\x1c\x7c\xb8\x7d\x15\xf0\xf0\x64\xda\x12\x6c\x28\x34\x6a\x87\x9d\x42\xeb\x4d\xcd\x16\xbb\x1d\xa1\x0a\x5e\xa3\x8e\xb1\xcf\x58\xe0\x34\xef\x05\xcd\xa4\xce\x6b\x9a\x2e\xa2\x77\xa4\x6f\x82\xdc\x3e\x26\x77\xa6\x6c\xaf\xfc\x46\x99\x96\x20\x13\x52\xaa\x84\x42\x03\x4f\xb0\x2d\xab\x53\x1e\xfd\x38\x80\x97\xb4\x12\xf5\x53\x40\x08\xbc\xeb\xa1\xed\xeb\xec\x6b\x01\xd9\x6b\x3c\x5f\x5f\x94\xeb\x2c\x49\x30\x74\xf9\x3f\x20\x8c\xbf\x00\x34\x53\xea\x4b\xea\xd3\x2a\xd6\xc5\x74\x40\xb5\x73\xd0\x7d\x55\x39\x7b\xf8\xfa\x92\x3e\x8e\xcd\x5f\x80\x5a\x79\xe9\x81\xbe\xc8\xa2\x4a\x5a\xb2\x36\x57\xb4\xaa\x84\x54\xa5\x83\x36\x75\x53\x67\xf0\x7d\xff\x0c\x3d\xfc\xfd\x6b\x19\xd7\x98\xe0\x97\x28\xba\xe1\x2e\x3d\xf1\xcd\x9a\x9e\x05\x1b\xda\xdc\x20\x5b\x27\xe3\xfd\x0b\xf0\x78\xe8\xe9\x42\x7f\xb4\x96\x0f\xb5\x03\x26\xbc\x71\x7f\x88\xe3\x1e\xbe\xa0\x2c\xf4\x54\xe5\xd9\x51\x37\x1b\x2a\x92\xca\xcb\x24\xf9\x76\xbd\x87\x5a\xf7\xb7\x61\x55\xa5\x1d\x47\x4d\xcd\x06\xbe\x7f\x75\x2b\x1d\x73\x4c\x6d\xa2\x5d\xea\x06\xaf\x88\xc7\x1a\x43\xb3\x25\xf1\x0a\xc3\xe1\xa2\xc5\xa6\x7c\xc5\x5d\x54\xe0\x1d\x77\x0b\x15\x52\xe9\xae\x03\xc3\xb5\x19\xa9\x91\x78\x18\xb8\xb5\x57\x83\xef\xea\x87\xe3\xc1\xfb\x3b\x21\x3b\x29\x18\xa6\xa5\xb9\xe6\xbb\xab\x0a\xf7\xd8\x59\x05\x85\x63\x5d\x11\x4f\x4c\x9f\x3b\xff\xb4\x89\xde\xc7\xc3\x6e\xa1\xf8\x2c\xee\x82\xf1\xe8\x43\xd9\xdf\x42\xca\xa3\x0c\xc2\xec\x06\xca\xa1\x72\xfa\x35\x54\xfe\xf3\xaf\x8b\x75\xde\x13\xba\x0f\xb9\xf5\xfa\xa0\x56\x5f\x26\x08\x11\x61\xce\x01\x5e\x6d\xda\x07\x4f\x80\x4b\xf2\x1b\xd7\xe5\xdd\xb1\xfd\xc4\xea\x3e\xcb\xf8\x82\xdc\xa0\x25\x5d\xfb\xcf\xba\xd1\x7f\x01\x00\x00\xff\xff\x43\xc6\x05\xfc\x99\x15\x00\x00")

func templates_server_parameter_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_parameter_tmpl,
		"templates/server/parameter.tmpl",
	)
}

func templates_server_parameter_tmpl() (*asset, error) {
	bytes, err := templates_server_parameter_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/parameter.tmpl", size: 5529, mode: os.FileMode(420), modTime: time.Unix(1424078804, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/model.tmpl": templates_model_tmpl,
	"templates/modelvalidator.tmpl": templates_modelvalidator_tmpl,
	"templates/server/operation.tmpl": templates_server_operation_tmpl,
	"templates/server/parameter.tmpl": templates_server_parameter_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"model.tmpl": &_bintree_t{templates_model_tmpl, map[string]*_bintree_t{
		}},
		"modelvalidator.tmpl": &_bintree_t{templates_modelvalidator_tmpl, map[string]*_bintree_t{
		}},
		"server": &_bintree_t{nil, map[string]*_bintree_t{
			"operation.tmpl": &_bintree_t{templates_server_operation_tmpl, map[string]*_bintree_t{
			}},
			"parameter.tmpl": &_bintree_t{templates_server_parameter_tmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

