package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new todos API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for todos API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*Destroy destroy API
 */
func (a *Client) Destroy(params DestroyParams, authInfo client.AuthInfoWriter) (*DestroyNoContent, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "destroy",
		Params:   &params,
		Reader:   &DestroyReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DestroyNoContent), nil
}

/*All all API
 */
func (a *Client) All(params AllParams, authInfo client.AuthInfoWriter) (*AllOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "all",
		Params:   &params,
		Reader:   &AllReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllOK), nil
}

/*Create create API
 */
func (a *Client) Create(params CreateParams, authInfo client.AuthInfoWriter) (*CreateCreated, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "create",
		Params:   &params,
		Reader:   &CreateReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCreated), nil
}

/*Update update API
 */
func (a *Client) Update(params UpdateParams, authInfo client.AuthInfoWriter) (*UpdateOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "update",
		Params:   &params,
		Reader:   &UpdateReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateOK), nil
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
