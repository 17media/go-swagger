package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/security"
	"github.com/go-swagger/go-swagger/spec"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/examples/generated/models"
	"github.com/go-swagger/go-swagger/examples/generated/restapi/operations/pet"
	"github.com/go-swagger/go-swagger/examples/generated/restapi/operations/store"
	"github.com/go-swagger/go-swagger/examples/generated/restapi/operations/user"
)

// NewPetStoreAPI creates a new PetStore instance
func NewPetStoreAPI(spec *spec.Document) *PetStoreAPI {
	o := &PetStoreAPI{
		spec:            spec,
		handlers:        make(map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
	}

	return o
}

/* PetStoreAPI This is a sample server Petstore server.

[Learn about Swagger](http://swagger.wordnik.com) or join the IRC channel `#swagger` on irc.freenode.net.

For this sample, you can use the api key `special-key` to test the authorization filters
*/
type PetStoreAPI struct {
	spec            *spec.Document
	context         *middleware.Context
	handlers        map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer httpkit.Consumer
	// XMLConsumer registers a consumer for a "application/xml" mime type
	XMLConsumer httpkit.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer httpkit.Producer
	// XMLProducer registers a producer for a "application/xml" mime type
	XMLProducer httpkit.Producer

	// APIKeyAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key api_key provided in the header
	APIKeyAuth func(string) (*models.User, error)

	// FindPetsByStatusHandler sets the operation handler for the find pets by status operation
	FindPetsByStatusHandler pet.FindPetsByStatusHandler
	// LoginUserHandler sets the operation handler for the login user operation
	LoginUserHandler user.LoginUserHandler
	// LogoutUserHandler sets the operation handler for the logout user operation
	LogoutUserHandler user.LogoutUserHandler
	// GetOrderByIDHandler sets the operation handler for the get order by id operation
	GetOrderByIDHandler store.GetOrderByIDHandler
	// DeletePetHandler sets the operation handler for the delete pet operation
	DeletePetHandler pet.DeletePetHandler
	// CreateUsersWithListInputHandler sets the operation handler for the create users with list input operation
	CreateUsersWithListInputHandler user.CreateUsersWithListInputHandler
	// UpdatePetWithFormHandler sets the operation handler for the update pet with form operation
	UpdatePetWithFormHandler pet.UpdatePetWithFormHandler
	// PlaceOrderHandler sets the operation handler for the place order operation
	PlaceOrderHandler store.PlaceOrderHandler
	// DeleteOrderHandler sets the operation handler for the delete order operation
	DeleteOrderHandler store.DeleteOrderHandler
	// UpdateUserHandler sets the operation handler for the update user operation
	UpdateUserHandler user.UpdateUserHandler
	// UpdatePetHandler sets the operation handler for the update pet operation
	UpdatePetHandler pet.UpdatePetHandler
	// AddPetHandler sets the operation handler for the add pet operation
	AddPetHandler pet.AddPetHandler
	// GetPetByIDHandler sets the operation handler for the get pet by id operation
	GetPetByIDHandler pet.GetPetByIDHandler
	// CreateUserHandler sets the operation handler for the create user operation
	CreateUserHandler user.CreateUserHandler
	// FindPetsByTagsHandler sets the operation handler for the find pets by tags operation
	FindPetsByTagsHandler pet.FindPetsByTagsHandler
	// GetUserByNameHandler sets the operation handler for the get user by name operation
	GetUserByNameHandler user.GetUserByNameHandler
	// DeleteUserHandler sets the operation handler for the delete user operation
	DeleteUserHandler user.DeleteUserHandler
	// CreateUsersWithArrayInputHandler sets the operation handler for the create users with array input operation
	CreateUsersWithArrayInputHandler user.CreateUsersWithArrayInputHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)
}

// SetDefaultProduces sets the default produces media type
func (o *PetStoreAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *PetStoreAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// DefaultProduces returns the default produces media type
func (o *PetStoreAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *PetStoreAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *PetStoreAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *PetStoreAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the PetStoreAPI
func (o *PetStoreAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.XMLConsumer == nil {
		unregistered = append(unregistered, "XMLConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.XMLProducer == nil {
		unregistered = append(unregistered, "XMLProducer")
	}

	if o.APIKeyAuth == nil {
		unregistered = append(unregistered, "APIKeyAuth")
	}

	if o.FindPetsByStatusHandler == nil {
		unregistered = append(unregistered, "FindPetsByStatusHandler")
	}

	if o.LoginUserHandler == nil {
		unregistered = append(unregistered, "LoginUserHandler")
	}

	if o.LogoutUserHandler == nil {
		unregistered = append(unregistered, "LogoutUserHandler")
	}

	if o.GetOrderByIDHandler == nil {
		unregistered = append(unregistered, "GetOrderByIDHandler")
	}

	if o.DeletePetHandler == nil {
		unregistered = append(unregistered, "DeletePetHandler")
	}

	if o.CreateUsersWithListInputHandler == nil {
		unregistered = append(unregistered, "CreateUsersWithListInputHandler")
	}

	if o.UpdatePetWithFormHandler == nil {
		unregistered = append(unregistered, "UpdatePetWithFormHandler")
	}

	if o.PlaceOrderHandler == nil {
		unregistered = append(unregistered, "PlaceOrderHandler")
	}

	if o.DeleteOrderHandler == nil {
		unregistered = append(unregistered, "DeleteOrderHandler")
	}

	if o.UpdateUserHandler == nil {
		unregistered = append(unregistered, "UpdateUserHandler")
	}

	if o.UpdatePetHandler == nil {
		unregistered = append(unregistered, "UpdatePetHandler")
	}

	if o.AddPetHandler == nil {
		unregistered = append(unregistered, "AddPetHandler")
	}

	if o.GetPetByIDHandler == nil {
		unregistered = append(unregistered, "GetPetByIDHandler")
	}

	if o.CreateUserHandler == nil {
		unregistered = append(unregistered, "CreateUserHandler")
	}

	if o.FindPetsByTagsHandler == nil {
		unregistered = append(unregistered, "FindPetsByTagsHandler")
	}

	if o.GetUserByNameHandler == nil {
		unregistered = append(unregistered, "GetUserByNameHandler")
	}

	if o.DeleteUserHandler == nil {
		unregistered = append(unregistered, "DeleteUserHandler")
	}

	if o.CreateUsersWithArrayInputHandler == nil {
		unregistered = append(unregistered, "CreateUsersWithArrayInputHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *PetStoreAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *PetStoreAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]httpkit.Authenticator {

	result := make(map[string]httpkit.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "api_key":

			result[name] = security.APIKeyAuth(scheme.Name, scheme.In, func(tok string) (interface{}, error) { return o.APIKeyAuth(tok) })

		}
	}
	return result

}

// ConsumersFor gets the consumers for the specified media types
func (o *PetStoreAPI) ConsumersFor(mediaTypes []string) map[string]httpkit.Consumer {

	result := make(map[string]httpkit.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/xml":
			result["application/xml"] = o.XMLConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *PetStoreAPI) ProducersFor(mediaTypes []string) map[string]httpkit.Producer {

	result := make(map[string]httpkit.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/xml":
			result["application/xml"] = o.XMLProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation id
func (o *PetStoreAPI) HandlerFor(operationID string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	h, ok := o.handlers[operationID]
	return h, ok
}

func (o *PetStoreAPI) initHandlerCache() {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	o.handlers = make(map[string]http.Handler)

	o.handlers["findPetsByStatus"] = pet.NewFindPetsByStatus(o.context, o.FindPetsByStatusHandler)

	o.handlers["loginUser"] = user.NewLoginUser(o.context, o.LoginUserHandler)

	o.handlers["logoutUser"] = user.NewLogoutUser(o.context, o.LogoutUserHandler)

	o.handlers["getOrderById"] = store.NewGetOrderByID(o.context, o.GetOrderByIDHandler)

	o.handlers["deletePet"] = pet.NewDeletePet(o.context, o.DeletePetHandler)

	o.handlers["createUsersWithListInput"] = user.NewCreateUsersWithListInput(o.context, o.CreateUsersWithListInputHandler)

	o.handlers["updatePetWithForm"] = pet.NewUpdatePetWithForm(o.context, o.UpdatePetWithFormHandler)

	o.handlers["placeOrder"] = store.NewPlaceOrder(o.context, o.PlaceOrderHandler)

	o.handlers["deleteOrder"] = store.NewDeleteOrder(o.context, o.DeleteOrderHandler)

	o.handlers["updateUser"] = user.NewUpdateUser(o.context, o.UpdateUserHandler)

	o.handlers["updatePet"] = pet.NewUpdatePet(o.context, o.UpdatePetHandler)

	o.handlers["addPet"] = pet.NewAddPet(o.context, o.AddPetHandler)

	o.handlers["getPetById"] = pet.NewGetPetByID(o.context, o.GetPetByIDHandler)

	o.handlers["createUser"] = user.NewCreateUser(o.context, o.CreateUserHandler)

	o.handlers["findPetsByTags"] = pet.NewFindPetsByTags(o.context, o.FindPetsByTagsHandler)

	o.handlers["getUserByName"] = user.NewGetUserByName(o.context, o.GetUserByNameHandler)

	o.handlers["deleteUser"] = user.NewDeleteUser(o.context, o.DeleteUserHandler)

	o.handlers["createUsersWithArrayInput"] = user.NewCreateUsersWithArrayInput(o.context, o.CreateUsersWithArrayInputHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve())
func (o *PetStoreAPI) Serve() http.Handler {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}

	return o.context.APIHandler()
}
