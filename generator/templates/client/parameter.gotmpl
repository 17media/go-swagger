package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "net/http"
  "github.com/go-swagger/go-swagger/httpkit"
  "github.com/go-swagger/go-swagger/swag"
  "github.com/go-swagger/go-swagger/errors"
  "github.com/go-swagger/go-swagger/httpkit/validate"
  "github.com/go-swagger/go-swagger/client"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

/*
{{ pascalize .Name }}Params contains all the parameters to send to the API endpoint
for the {{ humanize .Name }} operation typically these are written to a http.Request
*/
type {{ pascalize .Name }}Params struct {
  {{ range .Params }}{{if .Description }}/*
  {{ .Description }}
  */{{ end }}
  {{ pascalize .Name }} {{ if and (not .IsArray) (or .IsBodyParam (not .Required)) }}*{{ end }}{{ .GoType }}
  {{ end }}
}

// WriteToRequest writes these params to a swagger request
func ({{ .ReceiverName }} *{{ pascalize .Name }}Params) WriteToRequest(r client.Request, reg strfmt.Registry) error {

  var res []error
  {{range .Params}}

  {{if not (or .IsArray .IsBodyParam) }}
  {{ if not .Required }}if {{ .ValueExpression }} != nil { {{ end}}
  {{ if .IsQueryParam }}
  // query param {{ .Name }}
  if err := r.SetQueryParam({{ printf "%q" .Name }}, {{ if .Formatter }}{{ .Formatter }}({{ if not .Required }}*{{end}}{{ .ValueExpression }}){{ else }}{{ if not .Required }}*{{end}}{{ .ValueExpression }}{{end}}); err != nil {
    return err
  }
  {{ else if .IsPathParam }}
  // path param {{ .Name }}
  if err := r.SetPathParam({{ printf "%q" .Name }}, {{ if .Formatter }}{{ .Formatter }}({{ if not .Required }}*{{end}}{{ .ValueExpression }}){{ else }}{{ if not .Required }}*{{end}}{{ .ValueExpression }}{{end}}); err != nil {
    return err
  }
  {{ else if .IsHeaderParam }}
  // header param {{ .Name }}
  if err := r.SetHeaderParam({{ printf "%q" .Name }}, {{ if .Formatter }}{{ .Formatter }}({{ if not .Required }}*{{end}}{{ .ValueExpression }}){{ else }}{{ if not .Required }}*{{end}}{{ .ValueExpression }}{{end}}); err != nil {
    return err
  }
  {{ else if .IsFormParam }}
  {{ if .IsFileParam }}
  // form file param {{ .Name }}
  if err := r.SetFileParam({{ printf "%q" .Name }}, {{ if not .Required }}*{{end}}{{ .ValueExpression }}); err != nil {
    return err
  }
  {{ else }}
  // form param {{ .Name }}
  if err := r.SetFormParam({{ printf "%q" .Name }}, {{ if .Formatter }}{{ .Formatter }}({{ if not .Required }}*{{end}}{{ .ValueExpression }}){{ else }}{{ if not .Required }}*{{end}}{{ .ValueExpression }}{{end}}); err != nil {
    return err
  }
  {{ end }}
  {{ end }}
  {{ if not .Required }}}{{end}}
  {{else if .IsArray }}

  {{ if .Child.Formatter }}var values{{ pascalize .Name }} []string
  for _, v := range {{ if and (not .IsArray) (not .Required) }}*{{end}}{{ .ValueExpression }} {
    values{{ .ParamName }} = append(values{{ pascalize .Name }}, {{ .Child.Formatter }}(v))
  }
  {{ else }}values{{ pascalize .Name }} := {{ if and (not .IsArray) (not .Required) }}*{{end}}{{ .ValueExpression }}
  {{ end }}
  {{ if .IsQueryParam }}
  // query array param {{ .Name }}
  if err := r.SetQueryParam({{ printf "%q" .Name }}, swag.JoinByFormat(values{{ pascalize .Name }}, "{{.CollectionFormat}}")...); err != nil {
    return err
  }
  {{ else if and .IsFormParam }}
  // form array param {{ .Name }}
  if err := r.SetFormParam({{ printf "%q" .Name }}, swag.JoinByFormat(values{{ pascalize .Name }}, "{{.CollectionFormat}}")...); err != nil {
    return err
  }
  {{ end }}

  {{ end }}

  {{if .IsBodyParam}}
  if {{ .ValueExpression }} == nil {
    {{ .ValueExpression }} = {{ .ZeroValue }}
  }
  if err := r.SetBodyParam({{ .ValueExpression }}); err != nil {
    return err
  }
  {{end}}
  {{end}}
  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}
