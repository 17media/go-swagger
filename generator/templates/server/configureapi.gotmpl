package main

import (
  "github.com/go-swagger/go-swagger/errors"
  "github.com/go-swagger/go-swagger/httpkit"
  "github.com/go-swagger/go-swagger/httpkit/middleware"

  {{range .DefaultImports}}{{printf "%q" .}}
  {{end}}
  {{range $key, $value := .Imports}}{{$key}} {{ printf "%q" $value}}
  {{end}}
)

// This file is safe to edit. Once it exists it will not be overwritten

func configureAPI(api *{{.Package}}.{{ pascalize .Name }}API) {
  // configure the api here
  api.ServeError = errors.ServeError

  {{ range .Consumes }}{{ if .Implementation }}api.{{ pascalize .Name }}Consumer = {{ .Implementation }}()
  {{else}}api.{{ pascalize .Name }}Consumer = httpkit.ConsumerFunc(func(r io.Reader, target interface{}) error {
    return errors.NotImplemented("{{.Name}} consumer has not yet been implemented")
  }){{end}}
  {{end}}
  {{ range .Produces }}{{ if .Implementation }}api.{{ pascalize .Name }}Producer = {{ .Implementation }}()
  {{else}}api.{{ pascalize .Name }}Producer = httpkit.ProducerFunc(func(w io.Writer, data interface{}) error {
    return errors.NotImplemented("{{.Name}} producer has not yet been implemented")
  }){{end}}
  {{end}}
  {{range .SecurityDefinitions}}
  {{if .IsBasicAuth}}
  api.{{ pascalize .Name }}Auth = func(user string, pass string) ({{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}, error) {
    return nil, errors.NotImplemented("basic auth has not yet been implemented")
  }
  {{end}}{{if .IsAPIKeyAuth}}
  api.{{ pascalize .Name }}Auth = func(token string) ({{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}, error) {
    return nil, errors.NotImplemented("api key auth {{.Name}} from {{.Source}} has not yet been implemented")
  }
  {{end}}
  {{end}}
  {{range .Operations}}api.{{ pascalize .Name }}Handler = {{.Package}}.{{ pascalize .Name }}HandlerFunc(func({{if .Params}}params {{.Package}}.{{ pascalize .Name }}Params{{end}}{{if and .Authorized .Params}}, {{end}}{{if .Authorized}}principal {{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}{{end}}) middleware.Responder {
    return middleware.NotImplemented("operation {{.Name}} has not yet been implemented")
  })
  {{end}}
}
