{{ define "serverresponse" }}/*{{ if .Description }}{{ pascalize .Name }} {{ .Description }}{{else}}{{ pascalize .Name }} {{ humanize .Name }}{{end}}

swagger:response {{ camelize .Name }}
*/
type {{ pascalize .Name }} struct {
  {{ range .Headers }}/*{{if .Description }}{{ .Description }}{{ end }}{{ if .Required }}
  Required: true{{ end }}{{ if .Maximum }}
  Maximum: {{ if .ExclusiveMaximum }}< {{ end }}{{ .Maximum }}{{ end }}{{ if .Minimum }}
  Minimum: {{ if .ExclusiveMinimum }}> {{ end }}{{ .Minimum }}{{ end }}{{ if .MultipleOf }}
  Multiple Of: {{ .MultipleOf }}{{ end }}{{ if .MaxLength }}
  Max Length: {{ .MaxLength }}{{ end }}{{ if .MinLength }}
  Min Length: {{ .MinLength }}{{ end }}{{ if .Pattern }}
  Pattern: {{ .Pattern }}{{ end }}{{ if .MaxItems }}
  Max Items: {{ .MaxItems }}{{ end }}{{ if .MinItems }}
  Min Items: {{ .MinItems }}{{ end }}{{ if .UniqueItems }}
  Unique: true{{ end }}{{ if .Default }}
  Default: {{ printf "%#v" .Default }}{{ end }}
  */
  {{ pascalize .Name }} {{ .GoType }} `json:"{{camelize .Name}},omitempty"`
  {{ end }}
  {{ if .Schema }}
  // In: body
  Payload {{ if .Schema.IsComplexObject }}*{{ end }}{{ .Schema.GoType }} `json:"body,omitempty"`
  {{ end }}
}

// Create {{ pascalize .Name }} with default headers values
func New{{ pascalize .Name }}() {{ pascalize .Name }} {
  return {{ pascalize .Name }}{
    {{ range .Headers }}{{ if .Default }}{{ pascalize .Name }}: {{ printf "%#v" .Default }},{{ end }}
  {{ end }}}
}

// WriteResponse to the client
func ({{ .ReceiverName }} *{{ pascalize .Name }}) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {
  {{ range .Headers }}
  // response header {{.Name}}
  rw.Header().Add({{ printf "%q" .Name }}, fmt.Sprintf("%v", {{ .ReceiverName }}.{{ pascalize .Name }}))
  {{ end }}
  rw.WriteHeader({{ if eq .Code -1 }}500{{ else }}{{ .Code }}{{ end }}){{ if .Schema }}{{ if .Schema.IsComplexObject }}
  if {{ .ReceiverName }}.Payload != nil { {{ end }}
    if err := producer.Produce(rw, {{ .ReceiverName }}.Payload); err != nil {
      panic(err) // let the recovery middleware deal with this
    }
  {{ if .Schema.IsComplexObject }} } {{ end }}{{ end }}
}
{{ end }}package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
  "net/http"
  "github.com/go-swagger/go-swagger/httpkit"
  "github.com/go-swagger/go-swagger/swag"
  "github.com/go-swagger/go-swagger/errors"
  "github.com/go-swagger/go-swagger/httpkit/validate"
  "github.com/go-swagger/go-swagger/client"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

{{ range $key, $value := .Responses }}
{{ template "serverresponse" $value }}
{{ end }}
{{ if .DefaultResponse }}
{{ template "serverresponse" .DefaultResponse }}
{{ end }}

{{ range .ExtraSchemas }}
/*
{{ template "docstring" . }}
swagger:model {{ .Name }}
*/
{{ template "schema" . }}
{{ end }}
