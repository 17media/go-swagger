{{ define "serverresponse" }}/*
{{ if .Description }}{{ .Description }}{{else}}{{ pascalize .Name }} {{ humanize .Name }}{{end}}
*/
type {{ pascalize .Name }} struct {
  {{ range .Headers }}{{if .Description }}// {{ .Description }}{{ end }}
  {{ pascalize .Name }} {{ .GoType }}
  {{ end }}
  {{ if .Schema }}
  Payload {{ if .Schema.IsComplexObject }}*{{ end }}{{ .Schema.GoType }}
  {{ end }}
}

func ({{ .ReceiverName }} *{{ pascalize .Name }}) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {
  {{ range .Headers }}
  // response header {{.Name}}
  rw.Header().Add({{ printf "%q" .Name }}, fmt.Sprintf("%v", {{ .ReceiverName }}.{{ pascalize .Name }}))
  {{ end }}
  rw.WriteHeader({{ if eq .Code -1 }}500{{ else }}{{ .Code }}{{ end }}){{ if .Schema }}{{ if .Schema.IsComplexObject }}
  if {{ .ReceiverName }}.Payload != nil { {{ end }}
    if err := producer.Produce(rw, {{ .ReceiverName }}.Payload); err != nil {
      panic(err) // let the recovery middleware deal with this
    }
  {{ if .Schema.IsComplexObject }} } {{ end }}{{ end }}
}
{{ end }}package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
  "net/http"
  "github.com/go-swagger/go-swagger/httpkit"
  "github.com/go-swagger/go-swagger/swag"
  "github.com/go-swagger/go-swagger/errors"
  "github.com/go-swagger/go-swagger/httpkit/validate"
  "github.com/go-swagger/go-swagger/client"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

{{ range $key, $value := .Responses }}
{{ template "serverresponse" $value }}
{{ end }}
{{ if .DefaultResponse }}
{{ template "serverresponse" .DefaultResponse }}
{{ end }}
