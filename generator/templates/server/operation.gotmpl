package {{.Package}}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "net/http"

  {{range $key, $value := .Imports}}
  {{$key}} {{ printf "%q" $value}}
  {{end}}
)

// {{.ClassName}}Handler interface for that can handle valid {{.HumanClassName}} params
type {{.ClassName}}Handler interface {
  {{if .Authorized}}
  // Handle produces a result or an error. Gets the request params as well as the security principal
  {{if .SuccessModel}}Handle({{if .Params}}{{.ClassName}}Params, {{end}}*{{.Principal}}) ({{if .ReturnsComplexObject}}*{{end}}{{.SuccessModel}}, error)
  {{else}}Handle({{if .Params}}{{.ClassName}}Params, {{end}}*{{.Principal}}) error
  {{end}}
  {{else}}// Handle produces a result or an error. Gets the request params
  {{if .SuccessModel}}Handle({{if .Params}}{{.ClassName}}Params {{end}}) ({{if .ReturnsComplexObject}}*{{end}}{{.SuccessModel}}, error)
  {{else}}Handle({{if .Params}}{{.ClassName}}Params{{end}}) error
  {{end}}
  {{end}}
}

// New{{.ClassName}} creates a new http.Handler for the {{.HumanClassName}} operation
func New{{.ClassName}}(ctx *middleware.Context, handler {{.ClassName}}Handler) *{{.ClassName}} {
  return &{{.ClassName}}{Context: ctx, Handler: handler}
}

{{if .DocString}}{{.DocString}}{{end}}
type {{.ClassName}} struct {
  Context *middleware.Context
  {{if .Params}}Params  {{.ClassName}}Params
  {{end}}Handler {{.ClassName}}Handler
}

func ({{.ReceiverName}} *{{.ClassName}}) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
  route, _ := {{.ReceiverName}}.Context.RouteInfo(r)

  {{if .Authorized}}uprinc, err := {{.ReceiverName}}.Context.Authorize(r, route)
  if err != nil {
    {{.ReceiverName}}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }
  principal := {{if eq .Principal "interface{}"}}uprinc{{else}}uprinc.(*{{.Principal}}) // it's ok this is really a {{.Principal}}{{end}}

  {{end}}
  if err := {{.ReceiverName}}.Context.BindValidRequest(r, route, {{if .Params}}&{{.ReceiverName}}.Params{{else}}nil{{end}}); err != nil { // bind params
    {{.ReceiverName}}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }

  {{if .Authorized}}
  {{if .SuccessModel}}res, {{end}}err {{if .SuccessModel}}:{{end}}= {{.ReceiverName}}.Handler.Handle({{if .Params}}{{.ReceiverName}}.Params, {{end}}principal) // actually handle the request
  if err != nil {
    {{.ReceiverName}}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }

  {{.ReceiverName}}.Context.Respond(rw, r, route.Produces, route, {{if .SuccessModel}}res{{else}}nil{{end}})
  {{else}}
  {{if .SuccessModel}}res, {{end}}err := {{.ReceiverName}}.Handler.Handle({{if .Params}}{{.ReceiverName}}.Params{{end}}) // actually handle the request
  if err != nil {
    {{.ReceiverName}}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }
  {{.ReceiverName}}.Context.Respond(rw, r, route.Produces, route, {{if .SuccessModel}}res{{else}}nil{{end}})
  {{end}}
}
