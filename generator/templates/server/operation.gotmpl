package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
  "net/http"

  {{ range .DefaultImports }}{{ printf "%q" . }}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// {{ pascalize .Name }}HandlerFunc turns a function with the right signature into a {{ humanize .Name }} handler
type {{ pascalize .Name }}HandlerFunc func({{ if .Params }}{{ pascalize .Name }}Params{{ end }}{{ if and .Authorized .Params }}, {{ end }}{{ if .Authorized }}{{ if not ( eq .Principal "interface{}" ) }}*{{ end }}{{ .Principal }}{{ end }}) ({{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}{{ if .SuccessResponse.Schema.IsNullable }}*{{ end }}{{ .SuccessResponse.Schema.GoType }}, {{ end }}{{ end }}error)

// Handle executing the request and returning a response
func (fn {{ pascalize .Name }}HandlerFunc) Handle({{if .Params}}params {{ pascalize .Name }}Params{{ end }}{{ if and .Authorized .Params }}, {{ end }}{{ if .Authorized }}principal {{ if not ( eq .Principal "interface{}" ) }}*{{ end }}{{ .Principal }}{{ end }}) ({{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}{{ if .SuccessResponse.Schema.IsNullable }}*{{ end }}{{ .SuccessResponse.Schema.GoType }}, {{ end }}{{ end }}error) {
  return fn({{ if .Params }}params{{ end }}{{ if and .Authorized .Params }}, {{ end }}{{ if .Authorized }}principal{{ end }})
}

// {{ pascalize .Name }}Handler interface for that can handle valid {{ humanize .Name }} params
type {{ pascalize .Name }}Handler interface {
  Handle({{ if .Params }}{{ pascalize .Name }}Params{{ end }}{{ if and .Authorized .Params }}, {{ end }}{{ if .Authorized }}{{ if not ( eq .Principal "interface{}" ) }}*{{ end }}{{ .Principal }}{{ end }}) ({{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}{{ if .SuccessResponse.Schema.IsNullable }}*{{ end }}{{ .SuccessResponse.Schema.GoType }}, {{ end }}{{ end }}error)
}

// New{{ pascalize .Name }} creates a new http.Handler for the {{ humanize .Name }} operation
func New{{ pascalize .Name }}(ctx *middleware.Context, handler {{ pascalize .Name }}Handler) *{{ pascalize .Name }} {
  return &{{ pascalize .Name }}{Context: ctx, Handler: handler}
}

/*
{{ if .Summary }}{{ .Summary }}{{ if .Description }}

{{ .Description }}{{ end }}{{ else if .Description}}{{ .Description }}{{ else }}{{ pascalize .Name }} {{ humanize .Name }} API{{ end }}
*/
type {{ pascalize .Name }} struct {
  Context *middleware.Context
  {{ if .Params }}Params  {{ pascalize .Name }}Params
  {{ end }}Handler {{ pascalize .Name }}Handler
}

func ({{ .ReceiverName }} *{{ pascalize .Name }}) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
  route, _ := {{ .ReceiverName }}.Context.RouteInfo(r)

  {{ if .Authorized }}uprinc, err := {{ .ReceiverName }}.Context.Authorize(r, route)
  if err != nil {
    {{ .ReceiverName }}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }
  var principal {{ if not (eq .Principal "interface{}") }}*{{ end }}{{ .Principal }}
  if uprinc != nil {
    principal = {{ if eq .Principal "interface{}" }}uprinc{{ else }}uprinc.(*{{ .Principal }}) // this is really a {{ .Principal }}, I promise{{ end }}
  }

  {{ end }}
  if err := {{ .ReceiverName }}.Context.BindValidRequest(r, route, {{ if .Params }}&{{ .ReceiverName }}.Params{{ else }}nil{{ end }}); err != nil { // bind params
    {{ .ReceiverName }}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }

  {{ if .Authorized }}
  {{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}res, {{ end }}{{ end }}err {{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}:{{ end }}{{ end }}= {{ .ReceiverName }}.Handler.Handle({{ if .Params }}{{ .ReceiverName }}.Params, {{ end }}principal) // actually handle the request
  if err != nil {
    {{ .ReceiverName }}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }

  {{ .ReceiverName }}.Context.Respond(rw, r, route.Produces, route, {{ if .SuccessResponse }}{{  if .SuccessResponse.Schema }}res{{else}}nil{{end}}{{ else }}nil{{ end }})
  {{else}}
  {{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}res, {{ end }}{{ end }}err := {{ .ReceiverName }}.Handler.Handle({{ if .Params }}{{ .ReceiverName }}.Params{{ end }}) // actually handle the request
  if err != nil {
    {{ .ReceiverName }}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }
  {{ .ReceiverName }}.Context.Respond(rw, r, route.Produces, route, {{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}res{{ else }}nil{{ end }}{{ else }}nil{{ end }})
  {{ end }}
}
