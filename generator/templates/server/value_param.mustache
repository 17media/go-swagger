{{varName}} := {{reader}}(pth, "{{paramLocation}}", {{defaultValue}}, {{paramData}}, {{required}})
if err != nil {
  res.AddError(err)
} else {
  valid := true
  {{#minLength}}
  if valid {
    if err := validate.MinLength(pth, "{{paramLocation}}", {{varName}}, {{minLength}}); err != nil {
      valid = false
      res.AddErrors(err)
    }
  }
  {{/minLength}}{{#maxLength}}
  if valid {
    if err := validate.MaxLength(pth, "{{paramLocation}}", {{varName}}, {{maxLength}}); err != nil {
      valid = false
      res.AddErrors(err)
    }
  }
  {{/maxLength}}{{#pattern}}
  if valid {
    if err := validate.Pattern(pth, "{{paramLocation}}", {{varName}}, `{{pattern}}`); err != nil {
      valid = false
      res.AddErrors(err)
    }
  }
  {{/pattern}}{{#minimum}}
  if valid {
    if err := validate.Minimum(pth, "{{paramLocation}}", float64({{varName}}), {{minimum}}, {{exclusiveMinimum}}); err != nil {
      valid = false
      res.AddErrors(err)
    }
  }
  {{/minimum}}{{#maximum}}
  if valid {
    if err := validate.Maximum(pth, "{{paramLocation}}", float64({{varName}}), {{maximum}}, {{exclusiveMaximum}}); err != nil {
      valid = false
      res.AddErrors(err)
    }
  }
  {{/maximum}}{{#multipleOf}}
  if valid {
    if err := validate.MultipleOf(pth, "{{paramLocation}}", float64({{varName}}), {{multipleOf}}); err != nil {
      valid = false
      res.AddErrors(err)
    }
  }
  {{/multipleOf}}{{#enum}}
  if valid {
    if err := validate.Enum(pth, "{{paramLocation}}", {{varName}}, {{enum}}); err != nil {
      valid = false
      res.AddErrors(err)
    }
  }
  {{/enum}}
  if valid {
    i.{{propertyName}} = {{varName}}
  }
}