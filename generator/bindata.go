package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_model_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\xcd\x4e\xf4\x30\x0c\xbc\xe7\x29\xac\x4a\x9f\xf4\x71\xa0\x7b\xe7\x0a\x1c\xb8\x20\x24\xf6\x01\xd6\xb4\x6e\x1a\x68\x7e\x48\x5c\x56\x55\x94\x77\x27\x49\x5b\x56\xcb\x85\x5b\x6c\xcf\xd8\x33\x93\x18\x7b\x1a\x94\x21\x68\xb4\xed\x69\x72\xde\x3a\xf2\xbc\x34\x29\x89\x18\xd5\x00\xed\x83\xed\x5e\xd9\x2b\x23\x53\x8a\xf1\xba\x22\xd3\x57\x58\xfb\xb2\xb1\x9e\x51\x53\x4a\x50\x70\xc8\x78\x5c\x5c\xa9\x4e\xef\xc1\x9a\xbb\xa6\xc0\xd0\xa3\x5e\x31\xcd\x49\xec\x7c\xe1\xb0\xfb\x40\x49\x50\x11\xf5\x59\xba\x87\x03\x1c\x47\x15\x60\x50\x13\xc1\x19\x03\x48\x32\xe4\x91\xa9\x87\xb7\x05\x78\x24\x08\x67\x94\x92\x3c\xb0\xb5\x53\x5b\xf0\x8f\xbd\xe2\x2c\x2d\x0f\x77\x9e\x56\x72\x64\xc8\xa6\xbe\x08\x86\x99\xeb\xaa\x91\x0c\x2c\x76\x06\x4f\xb7\x7e\x36\x57\x9b\xf6\x13\xd0\x59\xad\xd1\xf4\x62\xcb\xe0\x49\x3b\xeb\x39\xa4\xa4\xd6\x07\xfc\x17\x90\xe5\x7a\x34\x59\xf6\x65\x5a\x9b\xf9\x9a\x32\x3c\x40\xf3\xef\xb3\x81\x76\x6b\xae\x4e\x6f\x2e\x9e\xff\xc8\x76\x07\x72\x8e\xb0\xe4\x72\x3f\x61\x08\x5b\xba\x81\xfd\xdc\x31\x44\xf1\x23\x60\x8b\x5f\x51\xa8\x4c\x26\xed\xa6\xe2\xe2\xd7\x97\x56\x35\xbb\x82\x24\xbe\x03\x00\x00\xff\xff\xfc\x8d\x3d\xfc\xfa\x01\x00\x00")

func templates_model_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_model_gotmpl,
		"templates/model.gotmpl",
	)
}

func templates_model_gotmpl() (*asset, error) {
	bytes, err := templates_model_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/model.gotmpl", size: 506, mode: os.FileMode(420), modTime: time.Unix(1424115031, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_modelvalidator_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x71\x13\x36\xc0\x4e\x1b\x65\x03\x86\x3d\xac\xeb\x80\x22\xf3\xd0\x00\x5d\x1a\x24\xdd\x9e\xcb\xc8\x67\x99\x1d\x45\x3a\x24\x95\x8f\x19\xfa\xdf\x77\x24\x45\xcb\xfa\xb0\x6b\x25\x18\xb0\x27\x8b\x77\xe4\xdd\xef\x7e\xf7\x41\x7a\xb3\x59\xe0\x92\x4b\x84\x64\xad\x79\xc1\x2d\xbf\xc7\x7b\x26\xf8\x82\x59\xa5\x93\xaa\x9a\x6c\x36\x7c\x09\xe9\x35\xde\x95\x5c\xe3\x82\x04\xb4\x44\xad\xe1\xe7\xb7\x50\xef\xc3\xad\x76\xba\xd9\xa4\x57\xcc\xae\xaa\xea\x35\x24\xf4\xfd\x41\x65\xcc\x72\x25\xab\x2a\x79\x0d\xb4\xfe\x8b\x89\x12\xe7\x8f\x6b\x8d\xc6\x78\xf1\xec\x8d\xb7\xf5\xcd\x5b\x90\x5c\xc0\x66\x02\xa0\xd1\x96\x5a\x3a\xe9\xc4\xf9\x46\xb9\xd8\x62\xf8\x83\xcb\x0f\x28\x73\x67\x7e\x08\xc4\x56\x3d\x1a\x85\x97\xee\x58\x1f\x87\x8a\x3d\x1e\x44\x15\xd5\xcf\x44\xd5\x58\x1f\x85\x8a\x3c\x59\xd4\x72\x18\x53\xad\x7c\x06\xa2\xcf\xe1\x48\x30\xfd\x79\x6c\xf6\x78\x51\x16\x7b\x73\xe7\x94\x07\x11\x2d\x85\x62\xf6\xa7\x1f\xa7\x83\x75\x14\x53\x18\x5c\xf8\xd5\xfc\x31\x13\xa5\xa1\x72\xde\x8a\xc7\xe6\xf5\x00\xde\xa0\x7c\x29\xde\xe8\xa2\x83\x37\x8a\xc7\xe1\x2d\x85\xe5\x6b\x81\x1f\x97\x7b\x20\x6f\xf5\x2f\x45\xbd\xe3\x68\x14\xc2\xb9\xdc\x47\xa7\xd3\x3c\xaf\x3f\x82\xcd\xa3\x61\xc4\xdf\x38\xf2\xb2\xd2\x58\x55\x2c\x95\x2e\x98\x6d\x4d\xbd\x01\x90\xbf\xfb\x5d\x5f\xa1\xcf\x09\xc2\x46\xbf\x34\x56\x73\x99\x0f\x93\x79\x34\xe8\x08\xd6\x08\x9e\x0d\xcd\xe6\x4b\xc4\x85\xb9\xe1\xff\xa0\x97\x10\x36\xcd\x8a\x4b\x56\xd0\xd2\x09\x5d\x0c\x5c\xba\x94\x0a\x94\x7b\x90\xf4\x5b\xf5\xc2\x62\x61\xf6\xf6\xaa\xd7\x7e\x2d\x61\x1d\x1c\xb1\x43\x6b\xcb\x63\x7b\xf1\x10\xa0\x5a\xfb\x2c\x40\x5b\xcb\xa3\x00\xfd\x29\xf9\x5d\x89\x07\x30\xed\x6c\xf8\x6f\x2f\xc5\xff\x41\x53\x39\x18\x37\x54\xe6\x02\x6f\xb2\x15\x16\xec\xc6\xd5\x29\x90\xea\xec\x0c\x8c\x97\x83\xf1\x8a\x41\x8f\x13\xea\x3e\xe0\x0e\xf9\xf7\x6f\xe8\xf7\x17\xd8\x5b\xa6\xa4\x7e\xf5\x8a\x80\x6c\x36\x9a\xc9\x1c\x21\x8d\xfc\x03\x19\xa6\xcf\xb5\xa0\xb0\xdd\x33\x46\xad\x51\xdb\xa7\xa6\x53\x20\xdd\x69\x7e\xff\x25\x0c\x06\x7c\x52\xd9\x3e\xc6\xab\xda\x42\xa8\x95\x17\xfa\x0b\xfc\xbc\x5b\x2c\xb8\x23\x9e\x89\xc6\xc8\x36\x70\x72\xe9\xa5\x74\xd3\x57\x95\x23\x81\x58\xf0\xdd\x3a\x83\xd3\xb6\xd2\x09\x7e\x70\x3b\x3c\x11\x00\x47\x21\x01\xd8\x89\x99\xc0\xec\x25\x18\x7e\x6d\x7b\xeb\x24\x5d\x69\xd3\x8d\xe3\x52\xd9\x77\x42\xa8\x07\x7a\xfa\x25\x43\x26\x93\x5e\xd9\xcd\x06\xe7\x71\x77\xd4\xa9\xdb\x2f\x98\xb5\x27\x32\x25\x2b\x4c\x6b\x08\x4a\x07\xf5\x37\x66\xd9\xa7\xa7\x75\x7f\xf0\x5d\xa3\xa9\x89\xed\x41\x72\x12\xdf\x20\xd3\x99\x23\xa3\x77\x2e\x7d\xcf\xcc\xdc\x07\x4b\xf4\xf7\x09\x38\x57\xc5\x5a\x19\x6e\xb1\x36\x43\x36\xfd\xee\x69\xdf\x50\xb0\x92\xa6\xe9\x6c\x70\x9c\xf7\xb3\xb5\xad\x96\x0b\x73\x15\xdf\xe2\x55\xd5\xce\x70\xef\x89\xee\x52\xdc\xae\xb5\x0b\x73\xee\x89\x0a\xf7\x10\xbd\xd5\xda\x36\x86\xef\xbc\x41\x33\x4a\x5a\x46\x58\x3b\x06\x3a\xf7\xd0\xf0\x49\xda\x8c\x8f\x1f\x7d\xa6\xda\xa7\xbb\xa9\x6d\x1f\x0f\xbf\x6b\x96\xfd\xcd\xa8\xe3\x3c\xa7\xfe\x93\x84\xae\x02\x3e\xad\xb8\x81\x25\xa7\x6e\x7d\x60\x06\x72\x24\x6c\x64\x74\x01\xb7\x4f\x60\x57\xd4\xc2\x0f\x2c\xcf\x51\x83\x55\x4a\xa4\x6e\xff\xdc\x55\xab\xcc\x49\x19\xcf\x15\x3c\x5f\x59\x20\xee\xef\x11\x96\xa5\xf5\xa6\x56\x28\xe1\x49\x95\x94\xe9\x53\x5d\xca\x96\xa5\xe8\x02\x32\x55\x14\x4c\x2e\x26\x13\x4e\xf9\xd7\x16\xa6\x54\x19\x49\xce\xed\xaa\xbc\x4d\x49\x77\x96\x31\x53\x32\xf1\x85\x17\x67\xb9\x3a\xad\x4f\x9f\xc5\x59\x9c\x1c\xb3\x39\x14\x58\x32\xf1\xe3\x25\x4e\x1c\xef\x2c\xce\x1c\x82\x4d\x37\xf9\x12\x92\xef\xee\x62\x67\x47\xc6\x66\x9e\x9e\x58\xda\xdb\x4b\xc0\x84\xc8\x89\xc7\xf7\x25\xc1\x3f\x17\xcc\x98\x7a\xaa\x2d\x4b\x99\x81\xab\xda\x6b\xcc\x90\x2a\x4a\x07\x39\x9c\x90\x68\x67\xdf\x0c\x9a\x7e\x81\x93\x9d\x7f\x7c\x86\x9e\x81\x75\x7f\xf8\x5e\x93\xf8\x30\xed\xa8\x67\xad\x58\xea\xa9\xca\x31\x86\xe3\x4a\x85\x9a\xad\x69\xa4\xa0\x68\xae\xb2\x1e\xb8\x34\x3a\xe8\x0d\xe9\x69\xff\xb6\xf2\xc8\xdc\xc0\xaa\xbb\x99\xd4\x33\x3f\x0b\x1b\xd6\x9a\xaf\xa6\xcf\xe9\x90\x6f\x57\xf8\x36\x8b\x2c\x38\x2c\x0d\x27\xb0\x7b\x25\xb4\x82\xda\x13\xd2\x21\xaa\x1b\x27\x8e\xea\x03\xe1\xc1\x49\x3d\x80\x1a\xdb\x3e\xca\x23\xe6\x7f\x13\x1b\x51\x33\x30\x7e\xff\x0d\x00\x00\xff\xff\x65\xe5\xfe\x33\x02\x10\x00\x00")

func templates_modelvalidator_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_modelvalidator_gotmpl,
		"templates/modelvalidator.gotmpl",
	)
}

func templates_modelvalidator_gotmpl() (*asset, error) {
	bytes, err := templates_modelvalidator_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/modelvalidator.gotmpl", size: 4098, mode: os.FileMode(420), modTime: time.Unix(1424115031, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_builder_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x5b\x6f\xdb\xb6\x17\x7f\xf7\xa7\x20\x0c\x14\xb0\x0b\x57\xf9\x3f\x17\xc8\x43\xfe\x4d\x87\x66\xc3\xba\x22\x29\xb6\x87\x20\x18\x18\xe9\xc8\xe6\x22\x89\x2a\x49\xc5\x4b\x03\x7f\xf7\x9d\xc3\x8b\x44\x59\xb2\xa3\x34\xd9\x8c\x00\x91\xc8\xc3\x73\xfd\x9d\x0b\x55\xf3\xf4\x8e\xaf\x81\x3d\x3e\x26\x5f\xdc\xe3\x6e\x37\x9b\x9d\x9c\xb0\xaf\x1b\xa1\x59\x2e\x0a\x60\x5b\xae\xd9\x1a\x2a\x50\xdc\x40\xc6\x6e\x1f\x98\xd9\x00\xd3\x5b\xbe\x5e\x83\x62\x46\xca\x22\x21\xfa\x8f\x99\x30\xa2\x5a\xe3\x66\x38\x57\x8a\xf5\xc6\xb0\x5a\xc9\x7b\x60\x79\x63\x2c\xab\x0d\x54\xec\x41\x36\x4c\xc1\x3b\xd5\x54\x3d\x4e\x41\x04\x4b\x65\x59\xf2\x2a\x9b\xcd\x44\x59\x4b\x65\xd8\x62\xc6\xd8\x5c\x1b\x85\xdc\xf5\x9c\x9e\x2b\x30\x27\x1b\x63\x6a\xfb\xb2\x16\x66\xd3\xdc\x26\x78\xe8\x24\xe5\xba\xe1\xc5\x5f\xa2\x3c\x59\xcb\x77\x9e\xed\x14\x9a\x13\x5d\x43\x3a\x8d\x10\xd2\x46\x09\xf3\x30\x89\xb8\x14\x59\x56\xc0\x96\x2b\x98\xcf\x90\xfe\xf1\x51\xf1\x0a\x3d\x9d\x5c\x58\xb3\x34\xfa\x99\x16\xd1\x41\xa2\x32\x39\x9b\xbf\xf9\x36\x67\x89\x5f\x84\x2a\xc3\xa7\xa5\x0d\x04\x46\xe6\xac\xae\x3f\xf3\x12\x23\x73\xf6\xe5\x82\xde\x2f\xaa\x5c\x26\xe7\xa0\x53\x25\x6a\x23\x64\x85\xb4\xe6\xa1\x86\x01\x29\x3a\xad\x49\x0d\x7b\x44\x9e\x64\x22\xeb\x7e\x6f\xe9\x3d\x39\x97\x69\x53\x42\x65\x70\x3f\x95\x95\x81\xbf\x4d\xbb\xdf\x29\x9f\x7c\x70\x5b\x48\xb4\xc1\xb0\x14\xa0\xb4\x27\x2a\x79\x7d\xed\xe2\x72\x43\xe1\x48\x3e\xb9\xed\xd8\x56\x3c\xab\x51\x04\x1a\xeb\x2c\xf9\x50\x70\xad\x9d\x82\x7e\x4b\x21\x16\xd6\x42\x1b\x62\xcb\x49\x0d\xb7\x98\x4b\x85\xaf\x73\x3c\xf2\x2b\x64\x82\x7f\x45\xf3\x76\xbb\x39\x62\xaa\x04\x46\xb6\x5a\x21\xa3\xec\xbc\xfb\x83\x68\x15\x39\x34\x52\xec\x8b\x92\x59\x93\x8e\x2a\xe6\xb7\xfa\x8a\xd5\x61\xf1\xd9\x8a\xb5\xec\x82\x62\x61\x61\x5c\xb1\x2b\x0f\xb1\x73\xc8\x45\x25\x28\xba\x01\x29\x22\x47\xec\xe8\xff\x73\x2d\xd2\xb3\xc6\x6c\x46\x34\xa7\xe5\x9e\xd6\x79\x53\xa5\xc4\x02\x13\x8d\x1b\x66\xf8\x1d\x68\xd6\x68\x50\x15\x92\x33\x8c\x16\xab\xf1\xec\x56\xaa\xcc\xbe\x28\x30\x8d\xaa\x9c\xb5\xa2\x4a\x45\xcd\x0b\x14\x8c\x52\x04\xa6\x31\x28\xb4\xbc\xc4\x4d\x94\x81\x90\x11\x29\xb7\x8c\xb7\x98\x04\xec\x96\x74\xb2\x3b\x03\xeb\xad\x4a\xa4\xc6\xc2\x21\x65\xc5\xdc\xff\x25\x5b\x50\xc9\x09\x72\x76\xbb\x15\x03\xa5\xa4\x5a\x76\x5e\x09\x16\x23\x92\x7f\x81\x87\x97\x98\xcc\xb1\x4c\xdd\x61\xe5\xf9\x51\x23\xd1\x3e\xac\x7c\x92\x18\x30\x5e\x0b\x76\x07\x0f\xae\x60\x2a\x5e\x3a\x35\x6c\x99\x13\x19\x52\x09\x57\xd5\x70\xfb\x4a\x36\x2a\x05\x1f\xbc\x63\x3e\x99\xe0\x8b\x71\xac\xfc\x56\x53\xc5\x74\x10\x19\x78\xc6\x67\x23\xd3\x60\xb4\x55\x49\x06\xea\x90\xc7\x16\xcb\x5e\xd9\x4f\x0d\xd6\xdc\xe8\x74\x47\xdd\x62\xaf\xed\x0f\xe3\x72\xe2\x0e\x92\x8c\x92\x38\x23\x0a\x7d\x8c\xc5\xa1\x53\x03\x27\xa0\xbd\x57\xa0\xee\xe1\x23\x79\x8a\x61\xcf\x49\x79\x51\xa0\xff\x6d\x8b\xc1\x38\x41\x58\x57\x90\x82\xb8\x87\x6c\x45\xa6\x2a\xa0\x25\xce\x32\xc8\x79\x53\x98\xe0\x09\xc7\xef\xb6\x31\xb6\x39\xa5\x78\x1c\xbd\x46\xcf\x8a\xc9\xad\x07\x39\x35\x36\xa4\x8b\x84\xd2\xcf\x86\xd1\x56\xbf\x4b\xd0\x35\x46\x02\xfe\xc0\xec\x05\xb5\x62\x6f\xfd\xea\xb7\x06\xb4\x69\x23\xea\x9a\xeb\xef\xbc\x10\x19\xf5\xba\x7b\xff\xe0\x22\xe4\x70\xec\x43\x1a\x21\x29\x2e\xea\x33\x92\x68\x01\x73\xe9\x0c\x53\x3e\x60\x6f\xf7\x08\x97\xad\x94\xc5\xd2\x7b\x83\x1a\xc1\x3d\x57\xac\xa9\x42\xc6\xa0\xc3\xae\x6f\x1c\x0a\xc7\xcb\x36\xae\x62\xec\x07\xd2\x92\x03\xc5\xf7\xf4\x94\x55\xa2\xb0\x82\x58\x5f\xcc\x29\x66\x4e\x8d\xc1\x5b\xc4\xab\x2b\x5b\x48\x47\x18\xcd\x09\xfb\x07\x50\xdf\x95\xee\x69\xca\xb5\x05\xf8\xa5\xca\x05\x46\xc7\x94\x3b\x54\xbe\x27\xe8\x69\xcb\xc2\x4b\x75\x24\x26\xc7\xf4\x8b\x4b\xc6\x34\xb5\x42\x72\xbe\x54\x33\xcf\x67\xa0\x1c\x0d\x27\xdf\xd9\xfb\x53\x56\x40\xd5\xe3\xb0\x74\xfa\xe1\x26\x8a\xfe\x9f\x17\xec\xca\x37\x69\x62\xd9\xcc\xda\x95\xbc\x34\x89\x4d\xcb\x7c\x31\x2f\x85\xd6\x34\x8b\xc6\xf9\xf4\x9e\xbd\xd1\xf3\xd0\x7d\x74\xf2\xb3\x14\xd5\xbe\xbe\xf8\xb7\xa4\x0c\xed\x95\x96\x9f\x24\x8d\xa6\x86\x8a\x86\x4b\xa2\xb8\x78\x72\xb6\x46\xbf\x55\x51\x69\x15\xd9\x33\x12\xb4\x27\x65\xd1\x32\xb9\x38\x6f\x9b\xe4\x33\xcb\x8b\x75\x92\x77\xc8\x30\xae\x9d\x38\x67\xe4\x59\xd7\xe5\xa4\xd2\xad\xa1\x54\x74\x78\x6f\xab\x6d\x14\x34\x35\x8a\x5c\x60\xcc\xc3\x24\xcc\x74\xba\x01\xac\x14\xcf\xb0\x7a\x20\x76\xe1\x79\xc4\x03\xa5\x9d\x4f\x43\x32\x5d\xd9\xfd\x65\x6f\xdf\x0f\x53\x3d\x66\xd6\x7c\xd7\xac\x0e\xe5\xa1\x02\x4d\x75\x1f\xe1\x56\xe2\x68\xb0\x78\x8a\x23\x61\x90\x8c\xa7\x81\x69\xe5\x6d\xa5\xc3\x2e\x9b\x82\xde\x0e\x9a\x1a\xdb\x44\xba\xb1\xa4\x7e\x65\x42\x5d\xa0\x1f\xde\x1e\xc0\x66\x8b\x73\xd2\xfc\xfd\x2c\x8c\xe1\x23\x43\x9f\x33\xe0\x9a\xa4\xdc\x60\xe6\x85\x38\x24\x2d\xc9\x30\x06\x23\x75\x66\xd9\x95\x86\xbe\xa4\x78\xd8\x3a\x24\xaa\xa3\xf1\x91\xb3\x8a\x07\xf7\xe0\xed\x64\x35\xa9\xd6\xed\xe9\x10\xbf\xed\x7c\x8d\xf0\x50\x76\x8a\x44\xe3\xc3\x6c\xaf\x10\x84\xb3\xae\xbb\x86\x26\xd2\x87\x74\xb8\x5a\x8c\xa1\xb9\xa4\x51\xde\x8e\xef\xcf\x01\x72\x2c\x67\x51\x86\xdb\x80\x6e\x3b\xea\x28\x60\xdb\x56\xd9\x61\xb5\xd7\x6d\x9f\x06\x68\xe0\x10\xb0\xf9\xe7\x8a\x95\xa6\x03\x65\xa4\x48\x0f\x97\xa5\x19\xa2\xb2\x27\xb9\x07\xc5\xf8\x72\xd3\xe1\xd1\x23\x62\x9f\x80\xd0\x31\x75\x44\x78\xf5\x68\x87\xae\xdc\x8f\x76\xb8\xaf\xbd\x5e\xb4\x63\x39\x93\xa3\xdd\xce\x1e\x21\xda\xfd\xe9\xe5\xe9\x60\x07\x06\xaf\x10\xec\x9e\xe4\xde\xce\x59\x51\x60\x6f\x10\x38\x2e\x7e\x47\xfb\xfe\x03\x30\x44\x57\xe0\x7d\x30\xbc\x26\x34\xfc\xc8\x11\xb5\xf0\xf8\x3b\x45\x8b\x8c\xf6\xee\xf6\x83\x6d\xbc\x13\x33\xda\xc3\x17\xb1\xd0\x15\xbb\x95\xb2\x70\x8d\x1a\x73\x9f\x66\x9e\xa1\xb3\xc2\x77\x96\x65\x3c\xf9\x0c\xc9\xa8\x91\x78\xb6\x1f\x38\xd6\xde\x45\x18\xad\x46\xa7\xba\xf6\xe3\x4d\x6f\x90\xeb\xbc\xb7\x62\x39\x47\x9f\x7a\x16\x9b\x15\x93\x77\x84\xb3\xc3\x8c\xae\x23\x63\x6f\xba\x40\xd8\x93\x14\x80\xe9\x0e\x1c\x1a\x12\xfc\x33\x94\x1e\x3e\x54\xf5\xac\x38\x42\xc6\xa2\x2f\x59\x9f\x61\x7b\x29\x1b\xc3\x6f\x0b\xf0\x1f\xb5\x46\x9c\x4f\x75\x62\xa4\x81\xad\x48\x5c\x37\xbb\x52\xdd\xde\x9b\xa5\x8f\xb9\x7c\x90\xdf\x31\x26\x96\x47\x06\xf4\xbd\xab\xf7\x51\x31\xd7\xd1\x0c\xe1\xb3\xb0\xbb\x91\xa3\xed\xfd\x1c\x1c\x31\xdd\x3b\xed\xe9\xf6\xdd\x53\xbc\xcd\xc4\xe9\x9a\xfd\x8b\xca\x8c\x7c\x2d\x09\x25\xe1\x9f\x00\x00\x00\xff\xff\x4a\xa8\x22\x1e\xec\x16\x00\x00")

func templates_server_builder_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_builder_gotmpl,
		"templates/server/builder.gotmpl",
	)
}

func templates_server_builder_gotmpl() (*asset, error) {
	bytes, err := templates_server_builder_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/builder.gotmpl", size: 5868, mode: os.FileMode(420), modTime: time.Unix(1424459390, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_operation_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\x0d\xb4\x90\x02\xad\x7c\x4f\xb1\x87\x36\x2d\xea\x3d\x74\x1b\x38\x41\x7b\x2c\x68\x6a\x2c\x71\x2b\x91\x0a\x3f\xec\xb8\x86\xff\x7b\x87\x14\x65\x5b\x89\xe2\xee\x76\xb1\x8b\xa0\x27\x53\x24\xe7\xcd\xcc\x9b\x37\x43\x77\x8c\xff\xc5\x2a\x84\xfd\xbe\xb8\xed\x97\x87\x43\x92\xcc\xe7\x70\x5f\x0b\x03\x6b\xd1\x20\x6c\x99\x81\x0a\x25\x6a\x66\xb1\x84\xd5\x0e\x6c\x8d\x60\xb6\xac\xaa\x50\x83\x55\xaa\x29\xfc\xfd\x9f\x4b\x61\x85\xac\xe8\x70\xb0\x6b\x45\x55\x5b\xe8\xb4\xda\x20\xac\x9d\x0d\x50\x35\x4a\xd8\x29\x07\x1a\xdf\x68\x27\x47\x48\x83\x0b\xe0\xaa\x6d\x99\x2c\x93\x44\xb4\x9d\xd2\x16\xd2\x04\x60\x26\xd1\xce\x6b\x6b\xbb\x59\xe2\xbf\x2a\x61\x6b\xb7\x2a\xe8\xe6\x9c\x33\xe3\x58\xf3\x41\xb4\xf3\x4a\xbd\x89\x58\xb3\x8f\xb8\x33\x47\xad\x95\x36\x1f\x75\xd5\x74\xc8\x83\xe3\xfd\x5e\x33\x49\x6c\x15\xef\x42\x68\x86\xb8\xf2\x9b\x94\xa4\x90\x76\x0d\xb3\x6f\x1f\x66\x50\xc4\x4d\x94\x25\xad\xb2\x40\x26\xb1\x7b\xd3\x30\x63\xde\xb3\x96\xf8\x5d\x50\x76\x0d\x65\x4c\x36\xa8\xd7\x8c\x13\x3d\x8a\x98\xac\x99\x05\xce\x24\xd4\xe1\x18\x36\xac\x11\xa5\xb7\x5c\x38\xa2\xe3\xcc\x1c\x3a\xa6\x59\x6b\x12\xbb\xeb\xf0\x5f\x91\xf7\x21\x16\xb1\x86\xe2\x07\x67\x6b\xa5\xc5\xdf\x58\x86\x00\x29\xaa\xfe\xb6\xaf\x50\xe9\x38\x1a\x60\x54\x16\xe3\x1a\x0b\x14\x0d\xc5\x11\x08\x2a\xe0\x17\xb4\x26\x14\x4a\xe3\x83\x43\x63\xa3\x7b\x20\x55\x6c\xb1\x69\xfc\x6f\x28\x23\x72\xa7\x85\xdd\x05\x2e\xb8\xe8\x58\x73\xf4\x7c\xe7\x38\xc1\x9b\x5f\x55\x89\xcd\x10\x63\x3a\x0e\xfc\x36\x60\xe6\x70\xe5\x75\x38\x00\x1c\x0e\x19\xa4\x3d\xc4\x12\xad\xd3\xd2\xdc\xa8\xb6\x6b\xf0\xf1\xb7\xd5\x07\xe4\xf6\x70\xb8\x8a\x2c\x93\xd1\xd8\x47\xde\x07\x9f\xf5\x85\x68\x0c\x7e\xaa\xdb\x60\x7e\x56\xc6\x13\xce\xe7\xf2\xf6\xe9\xac\x7c\x1d\x12\x5e\xc8\x39\xac\xfa\x89\xf0\x1e\xb7\x63\x43\xe0\x1a\xa9\x61\x3d\x01\x12\xb7\xe0\xdb\xb3\x18\x14\xd8\x2b\x1a\x27\xf5\xab\x3a\xdf\xe8\x42\xc9\x64\xed\x24\x7f\x8e\x9b\x72\xfb\x08\x57\xad\x28\x09\x69\xcb\x34\x16\x37\x8a\xf4\xfc\x68\xf3\xd8\x1a\x7a\x5a\xf5\x59\x28\xe3\xb9\x23\x2f\x7e\x1d\x48\x83\xef\xc6\x47\xfb\x08\x79\x0d\xe4\x2b\x8f\x15\xd5\xd7\x83\x83\x90\x72\x4f\xfa\x4f\x8a\xdf\x59\x92\x46\x15\x18\x1e\x7d\xf5\xe4\x4c\xb4\x21\x18\xab\x1d\xb7\xc1\x7f\x74\x34\x95\x0f\x9d\xf6\xdc\x03\x4c\x55\x84\x8e\x17\x97\xf2\xf5\x31\x06\x02\x7d\x3d\x97\xc8\x51\x6c\x50\xc7\x00\x9e\x30\x91\xc1\x1d\xea\x0d\x2e\xee\xef\x6f\x53\x1d\x2b\xb5\x44\xd3\x29\x69\xf0\x0f\xea\x5a\xd4\x39\x68\xb8\x8a\xfb\x41\xae\x59\xcf\x9e\x72\x16\x73\xf8\x13\xae\xdf\xc2\x33\x2f\x43\x1e\xc5\xd2\xdf\x7a\x27\xd7\x2a\x25\xb5\x4d\x0e\x1c\x17\xa6\x42\x50\xe4\x65\xa8\xa3\x51\xea\x43\xf2\xb8\x5e\xbf\x04\xe7\x2d\xbf\x79\x0b\x52\x34\x21\x30\xb8\x14\x4e\xc8\xac\xa4\x4c\x09\x22\xa2\x50\x7b\xf7\xdd\x9a\x0f\x39\x11\x60\x16\x80\x7a\x85\xd0\xd2\x4b\xfe\x38\xbd\xfa\x30\xbd\xe3\x07\x38\xcd\x06\x98\x1d\x47\xeb\xfe\x30\x1b\xf2\x1a\xda\xab\xff\x2a\xd2\xa7\xe3\x64\x90\xca\xa8\xb9\x62\x4e\x17\xd9\xf8\x51\xc8\xf2\x77\xff\x0e\xc4\xa2\x1c\x49\xc9\x83\xa0\x9f\x58\xc5\x46\xfe\x7e\xc4\x95\x1f\xf4\x2b\x82\x39\x8d\x9f\x2f\x43\xdd\x4b\xef\xcc\xd4\xb0\xd3\x1e\xeb\xc5\xe4\xa3\xbc\x8b\xd3\xb0\x9a\xcc\x33\x3f\xd5\x2a\xf3\x49\x32\x6e\xe9\xe5\x6e\x76\xc3\xfb\x79\x36\x7a\xbf\xa2\x82\x92\xcf\x87\x25\x76\xce\x67\xf6\x25\x9d\xfc\x07\xaa\x9e\xab\xe3\x32\x71\xaf\x96\x26\x8a\x3f\x9b\x7c\xa1\xbf\xa4\xe8\x5e\x91\xd2\x5e\xa3\xd0\xfe\x5f\xea\x3a\xfe\xb1\x1a\xfe\x05\xfd\x13\x00\x00\xff\xff\x25\x8c\x9e\xe9\x2d\x0d\x00\x00")

func templates_server_operation_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_operation_gotmpl,
		"templates/server/operation.gotmpl",
	)
}

func templates_server_operation_gotmpl() (*asset, error) {
	bytes, err := templates_server_operation_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/operation.gotmpl", size: 3373, mode: os.FileMode(420), modTime: time.Unix(1424420904, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_parameter_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x4b\x6f\x1b\xb7\x13\xbf\xeb\x53\xf0\x2f\xfc\x1b\x48\x8e\xb2\xce\xa1\xe8\xa1\xa9\x0b\x34\x89\x8b\x08\x48\xd2\xd4\x4e\x72\x09\x02\x84\xde\xa5\x24\xb6\xbb\xdc\x35\xc9\xf5\x23\x82\xbf\x7b\x67\x86\xfb\xe0\x3e\x23\xc9\xce\x21\x27\x69\x39\xc3\xe1\x6f\xde\x1c\x6e\xb7\x91\x58\x49\x25\xd8\x34\xd3\x32\x91\x56\x5e\x89\x2b\x1e\xcb\x88\xdb\x54\x4f\xef\xee\x26\xdb\xad\x5c\xb1\xe0\x8d\x54\xaf\x85\x5a\xdb\x0d\xac\xc0\xb7\xd0\x9a\xfd\x7a\xc2\x0a\x46\x51\x93\x67\xdb\x6d\xf0\x8e\x23\xdb\x82\x4d\xe1\xff\xeb\x34\xe4\x56\xa6\xea\xee\x6e\xba\x60\xf0\xfd\x91\xc7\xb9\x38\xbd\xc9\xb4\x30\x86\x96\x69\xd5\x93\x3e\x7f\x46\xc2\xff\x77\xc2\x94\x8c\xd9\x76\xc2\x98\x16\x36\xd7\x0a\x57\x27\x88\x46\xa8\xa8\x46\xc5\x6f\x46\x51\x95\xe4\x03\x51\xd5\xd2\xf7\x42\x05\x27\x59\xa1\x55\x3f\xa6\x82\x78\x00\xa2\x2f\x6e\x8b\x13\xfd\x65\x3f\x3b\x49\x25\x93\x3c\x19\xf4\x1d\x12\x47\x11\xad\xe2\x94\xdb\x5f\x7e\x9e\xf5\x21\x9b\x97\x2e\x74\x47\xd0\xd7\xe9\x4d\x18\xe7\x06\x42\xa9\x5a\xde\xd7\xaf\x23\x78\x1d\xf1\xbe\x78\xcb\x23\x5a\x78\xcb\xe5\xfd\xf0\xe6\xb1\x95\x59\x2c\xfe\x5a\x0d\x40\xae\xe8\xf7\x45\xed\x1d\xb4\x17\xc2\x53\x35\x64\x4e\xa4\x1c\x96\x1f\x4e\xe6\xce\x30\xe8\xb7\xae\x36\x61\x6e\x6c\x9a\xac\x52\x9d\x70\xdb\x28\x38\x3d\x18\xff\x24\xae\x6f\x58\x0f\x17\x1c\x23\x7d\x1a\xab\xa5\x5a\xf7\xdb\x72\x37\xcc\x35\x56\x13\xcb\xb0\xaf\x2a\xbe\x15\x22\x32\xe7\xf2\xab\xa0\x15\x80\xa6\x79\xf2\x96\x27\xf0\x89\x8b\xa8\x82\x54\xe8\xd0\x58\xa8\x01\x20\xdd\x44\x5d\x5a\x91\x98\xc1\x4c\x25\xea\xb7\xdc\xd5\xc2\x51\xe6\x67\x21\x79\xdf\x4c\x1c\x03\x54\x50\x0f\x02\x54\x49\xde\x0b\xd0\x07\x25\x2f\x73\x31\x82\xc9\x63\xd8\x3b\xac\x7f\xf0\x94\xca\x74\x9a\x09\x6d\x6f\x7b\x22\x75\x69\xde\x95\xdd\x1d\x77\x80\x75\xb2\x18\xa0\xf6\x36\x7d\x16\x20\x8b\xaf\xea\xd2\xbc\xa0\x6c\x75\xe9\x05\x1d\xa8\x29\xa3\x3f\x95\x7b\xc5\xa4\xca\x72\xc0\xda\x12\xd0\xca\xaf\xe6\xce\x96\x92\x17\x52\x45\x15\xe8\x69\x1f\x07\x49\x43\x36\xe1\x19\x00\x42\x50\x28\x8b\x6c\xc1\x12\x28\x37\x1f\x39\x60\x08\xd1\x6d\xb9\x95\x71\x70\x9e\xc5\xd2\x3e\xbf\x75\x0a\x3a\xdf\x21\xbf\xcf\xfb\xa9\x6f\xf5\xb3\xf3\xee\x8b\x34\x8e\x45\x88\xfe\xad\x2a\x10\xa5\x76\x6c\x44\xdf\x91\x9a\x5f\xd7\xfa\x79\x44\xf3\x15\xa9\x06\x52\x64\x72\xc5\x35\x6b\xd0\xe8\xf3\xfd\x6d\x26\xda\x9b\x3e\x16\x61\x77\x1a\x8b\x04\xc0\xa1\x84\x55\xae\xc2\x59\x83\x09\x0b\x11\x45\xd8\x8b\x8d\x8c\xa3\x6e\xf4\xd5\x24\x77\xc4\x9c\x1d\x41\xb0\xa5\xda\x04\x85\x78\xe0\xa2\x48\x6c\xc6\x4e\x3b\xde\x98\x13\x02\x10\xab\x98\x85\x10\x86\x98\x9d\x40\x74\x34\xf5\x41\x9c\x4f\x9f\xb5\xd6\x7e\x63\x2d\x7b\xb4\x18\x1e\x3f\x2e\x40\xa0\x4b\x1d\xde\x56\x64\xd7\x04\x88\xb5\x2b\x40\x87\xb1\x76\x85\xea\x2e\xca\x3c\xad\x54\xf5\x38\x9a\xd6\x22\x5f\x7b\x4e\x9e\xc3\x99\x45\x9e\x7b\x49\x89\x2a\x9a\xe0\x8f\x28\x3a\x25\x4b\xcd\x0a\x83\x2d\x15\xd9\x03\xed\x38\xab\x8e\x1a\xed\x5a\xbe\xe1\x5d\x75\x18\x81\x32\x2f\x4e\x26\xe3\x02\x00\xf8\x04\xf3\x56\xf8\x9c\x7e\x83\xd1\xd1\xd4\x73\x2c\x22\xba\x45\xa8\x47\xdf\x5e\x30\x8e\x6f\x09\x21\x38\x27\x5f\x35\x82\xf8\x84\xf1\x2c\x83\xd0\x6f\x02\xd1\x0b\x46\x3e\x72\x1b\x5c\xda\x90\xe8\x83\xb5\x1a\xb1\x60\x8f\x62\x83\xaa\xb5\x94\x2b\x6c\x7d\x98\x86\xe3\xa8\xaa\x32\x86\xda\x33\x3f\xbe\xbd\xa2\xd9\x4a\x40\xbf\xd2\xf9\xa9\x77\xef\x68\xf0\x70\xdf\xd7\x5c\xf7\xb0\x56\x17\x4b\x59\x35\xab\xaa\x9f\xf1\xf0\x5f\xbe\x16\xee\x92\x41\x7f\x81\x3a\x39\x3e\x66\xef\x37\xd2\xb0\x95\x8c\x05\xbb\xe6\x86\xad\x05\x98\x0f\xf4\x8e\xd8\xc5\x2d\xb3\x1b\xc1\xcc\x35\x5f\xaf\x85\x66\x36\x4d\xe3\x00\xf9\x4f\x23\x28\x21\x6a\x0d\xc4\x72\x5f\x22\xd7\x1b\xcb\xa0\xc6\x5d\x09\x28\xa8\x96\x44\x6d\x84\x62\xb7\x69\x0e\x0a\x3d\xd1\xb9\x6a\x48\x2a\x8f\x60\x61\x9a\x24\x5c\x45\x93\x89\x4c\xb2\x54\x5b\x36\x03\xa5\xa7\x4a\xd8\xe3\x8d\xb5\xd9\x14\x3f\xd6\xd2\x6e\xf2\x8b\x00\x18\x8f\x43\x6e\x72\x1e\xff\x23\x93\xe3\x75\xfa\xa4\x10\xb5\x0b\xcf\xb1\x2b\x36\x3b\xb1\xe2\xb9\x88\x7f\x37\xee\xf2\x16\x33\x9d\x90\xb3\x34\x57\x60\xde\x60\x49\xba\x98\x22\x02\xc1\x2a\xd0\x4f\x56\x6c\xfa\xd3\x25\x35\x6b\x97\xb5\xe4\x99\x39\x59\x1f\x9d\x17\x73\x63\xdc\x9d\x8f\xae\x7f\x06\x0c\x43\x71\x6c\x18\x8f\x63\x32\xdd\x45\x9a\xab\x88\x65\x8e\x8a\x0d\x02\x17\x61\xeb\xab\x1c\x0c\xe8\xed\x67\xd8\x66\xa8\x64\xa2\x6c\x7b\x9b\xc9\x10\x44\x90\x23\x21\x55\xa0\x25\xb3\xf4\x82\x32\x24\x62\x2b\x9d\x26\x8c\x33\x54\x39\x38\x13\x70\x11\x34\x76\x02\x1b\x44\x3f\x22\x98\x11\xf2\xd0\x16\x2d\xa5\xd0\xd4\x91\xca\x56\xf2\x52\x98\x50\xcb\xcc\x95\x6b\xa7\x58\x63\xa9\x54\x9b\xe2\xfa\x5d\xd1\x0f\x0b\xd4\x75\xbf\xae\xcd\xe3\x82\xf3\x39\xa4\x6c\x81\x0e\x8c\x60\x37\x0c\x73\x18\xec\x02\xd6\x28\xcd\x0f\x5f\x10\x65\xc4\xb2\x60\xd2\x32\x80\x9e\x27\xb0\x6a\x37\xdc\x62\x88\xc1\x10\x78\x83\xc1\xaa\xd6\x86\x49\xfc\xa2\xde\xcf\x59\x91\xe1\xfc\x22\x16\x33\x68\xe2\xd5\x9d\xf4\x4c\x18\x98\x1d\xf1\x1a\x20\xf4\x8a\x87\x02\x61\xa0\xc9\x0d\x6d\x76\xd5\xd7\xe0\x41\xd7\x12\xbc\x93\x83\x5d\xc1\x38\x9c\x52\x20\x11\x76\x93\x46\x0c\x6d\x6e\x26\x78\xb5\x60\x98\xac\x67\x22\x14\xd0\x73\x75\xa1\xec\x51\x9f\x81\xe7\xbe\xa6\x33\xcd\x8e\x7c\xbf\x2c\x98\x4e\x73\xc8\x97\xa3\x44\x46\x51\x2c\xae\xc1\x8f\x30\x14\xd8\x70\x23\xa2\x33\x24\x2c\x30\x60\x50\x69\x5d\xe6\x18\x36\x6c\x5a\xe8\x51\xcc\xdd\x92\x0d\x56\x3c\x25\xae\x67\x2d\xf2\xbc\xba\x34\xbc\xe2\xe6\xef\x5c\xe8\xdb\xd2\xcd\x97\xb4\x45\x07\x1f\xce\x5e\x07\x44\x28\x8a\x94\x73\x57\x5f\x60\x54\xa2\x7a\x6e\x1e\x4b\x4f\x38\xd4\x2b\x28\x7b\x6f\x84\x5e\x8b\xae\xbd\x02\xf4\x78\x27\x64\x66\x55\xaa\x02\x3b\x8f\xce\xc1\xbb\xb1\xa0\xce\x3c\xbb\x34\xc5\x24\x45\xcf\x51\xf3\xba\x51\xb2\x02\x0a\x10\xbe\xc3\xb1\xe4\xa2\x42\xf5\x71\x00\xaf\x60\xa7\xd0\xdf\x03\x42\xe0\x44\xf7\x1d\x5f\xe5\x9e\x07\xa4\x31\x63\x3c\xbc\x53\xea\xab\x7e\x8f\x63\x86\xa7\x81\xef\xea\xb1\x36\xa6\x01\xaf\xed\x83\xee\x41\xdd\xd9\xc1\xd7\x75\xe9\xb7\xb1\x15\xb7\xa3\x3a\x2f\x1d\xd0\xe7\x69\x54\xba\xb6\x71\x0b\x2e\x8b\x47\x59\x34\xe0\x50\x64\x5d\xb0\x47\x5d\x1d\x3a\xf8\x77\xba\xfc\xe2\x65\xff\xad\xb8\x86\xc3\x8d\xa0\xd5\xd9\xb4\xf9\xd6\x31\xed\xbb\xef\x4f\x69\x0e\x21\xa5\xee\x18\x19\xbc\x16\x3f\x64\xe3\x0e\xbe\x72\x2a\x83\x1a\x3f\x2f\xee\xdc\x8d\x6c\x28\x8d\xe4\xdd\xc6\xe0\x1b\x1a\xf7\xff\xc3\xb2\x46\xa3\x8d\xea\x8a\xcd\x68\xaa\x6c\x57\x3a\xb2\x31\x34\x09\xbf\xd4\xf5\xbe\x06\x8c\xb5\x85\xfa\xc8\xba\x2d\xf4\x07\x0d\x8c\xc5\xc5\xb3\xdd\x01\x05\xbe\x0c\x09\x6c\xa2\x33\x95\xda\x46\x8a\xcd\x19\x75\x1d\xa9\x05\x18\xa6\xe7\xc5\xa6\x24\x9e\x57\x8f\x86\x83\x03\x1b\x80\x7c\xb8\xd1\xa8\x76\x19\x5d\xf8\xc7\x26\x56\x6f\x56\x45\x08\xf7\x98\x48\x47\x67\xd1\x6a\x0a\xc5\x43\x76\x1b\xef\xba\x8f\x09\x27\xee\x3e\xd1\x1c\xe6\x06\x38\xe1\x9c\x1e\x53\x40\x9b\xae\x1f\x1e\x8c\xef\xb3\x6e\x76\x94\x5e\xec\x06\xd4\xce\x8e\x2a\x27\x68\xd2\xcc\x9d\x0c\xb7\xa7\x6d\x67\x78\x69\x26\x5a\x23\xbb\x86\x7a\xd0\xc3\xa5\xc6\xa7\xcf\x07\x27\x07\xa3\x47\x25\x24\xe3\x53\x34\xc5\x4f\x65\xea\x46\x62\x10\xdb\xc9\x09\x7b\x3a\x16\x4f\xe5\x8e\x91\x60\xda\x2d\x74\x5a\xc5\xfc\xa5\x58\x71\x80\x4b\x51\xd2\x42\xf3\xe8\x11\x2b\x1e\xd1\x9b\x4c\x73\xf6\x7b\x85\x75\x20\xc0\x3a\x7b\xbc\xb0\x1c\xd0\xb8\x44\xe8\x2b\x50\xbb\x7d\x7c\x0a\x1f\x8b\xf5\xe6\x8c\xeb\x07\xfb\x39\xca\xf8\xf1\x22\xbe\x7e\xdc\xf5\xcb\x6e\xd5\x92\xe7\x6c\x86\xdd\xa3\x99\xcc\xbd\xfa\xce\xf7\x4f\x94\x11\x23\x1c\xfa\x78\xd9\x68\x9a\xee\xe1\xb2\xf5\x0e\x3d\xf9\x2f\x00\x00\xff\xff\x57\xc2\x71\xf9\x2f\x1f\x00\x00")

func templates_server_parameter_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_parameter_gotmpl,
		"templates/server/parameter.gotmpl",
	)
}

func templates_server_parameter_gotmpl() (*asset, error) {
	bytes, err := templates_server_parameter_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/parameter.gotmpl", size: 7983, mode: os.FileMode(420), modTime: time.Unix(1424426212, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/model.gotmpl": templates_model_gotmpl,
	"templates/modelvalidator.gotmpl": templates_modelvalidator_gotmpl,
	"templates/server/builder.gotmpl": templates_server_builder_gotmpl,
	"templates/server/operation.gotmpl": templates_server_operation_gotmpl,
	"templates/server/parameter.gotmpl": templates_server_parameter_gotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"model.gotmpl": &_bintree_t{templates_model_gotmpl, map[string]*_bintree_t{
		}},
		"modelvalidator.gotmpl": &_bintree_t{templates_modelvalidator_gotmpl, map[string]*_bintree_t{
		}},
		"server": &_bintree_t{nil, map[string]*_bintree_t{
			"builder.gotmpl": &_bintree_t{templates_server_builder_gotmpl, map[string]*_bintree_t{
			}},
			"operation.gotmpl": &_bintree_t{templates_server_operation_gotmpl, map[string]*_bintree_t{
			}},
			"parameter.gotmpl": &_bintree_t{templates_server_parameter_gotmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

