package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_model_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\xcd\x4e\xf4\x30\x0c\xbc\xe7\x29\xac\x4a\x9f\xf4\x71\xa0\x7b\xe7\x0a\x1c\xb8\x20\x24\xf6\x01\xd6\xb4\x6e\x1a\x68\x7e\x48\x5c\x56\x55\x94\x77\x27\x49\x5b\x56\xcb\x85\x5b\x6c\xcf\xd8\x33\x93\x18\x7b\x1a\x94\x21\x68\xb4\xed\x69\x72\xde\x3a\xf2\xbc\x34\x29\x89\x18\xd5\x00\xed\x83\xed\x5e\xd9\x2b\x23\x53\x8a\xf1\xba\x22\xd3\x57\x58\xfb\xb2\xb1\x9e\x51\x53\x4a\x50\x70\xc8\x78\x5c\x5c\xa9\x4e\xef\xc1\x9a\xbb\xa6\xc0\xd0\xa3\x5e\x31\xcd\x49\xec\x7c\xe1\xb0\xfb\x40\x49\x50\x11\xf5\x59\xba\x87\x03\x1c\x47\x15\x60\x50\x13\xc1\x19\x03\x48\x32\xe4\x91\xa9\x87\xb7\x05\x78\x24\x08\x67\x94\x92\x3c\xb0\xb5\x53\x5b\xf0\x8f\xbd\xe2\x2c\x2d\x0f\x77\x9e\x56\x72\x64\xc8\xa6\xbe\x08\x86\x99\xeb\xaa\x91\x0c\x2c\x76\x06\x4f\xb7\x7e\x36\x57\x9b\xf6\x13\xd0\x59\xad\xd1\xf4\x62\xcb\xe0\x49\x3b\xeb\x39\xa4\xa4\xd6\x07\xfc\x17\x90\xe5\x7a\x34\x59\xf6\x65\x5a\x9b\xf9\x9a\x32\x3c\x40\xf3\xef\xb3\x81\x76\x6b\xae\x4e\x6f\x2e\x9e\xff\xc8\x76\x07\x72\x8e\xb0\xe4\x72\x3f\x61\x08\x5b\xba\x81\xfd\xdc\x31\x44\xf1\x23\x60\x8b\x5f\x51\xa8\x4c\x26\xed\xa6\xe2\xe2\xd7\x97\x56\x35\xbb\x82\x24\xbe\x03\x00\x00\xff\xff\xfc\x8d\x3d\xfc\xfa\x01\x00\x00")

func templates_model_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_model_gotmpl,
		"templates/model.gotmpl",
	)
}

func templates_model_gotmpl() (*asset, error) {
	bytes, err := templates_model_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/model.gotmpl", size: 506, mode: os.FileMode(420), modTime: time.Unix(1424115031, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_modelvalidator_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x71\x13\x36\xc0\x4e\x1b\x65\x03\x86\x3d\xac\xeb\x80\x22\xf3\xd0\x00\x5d\x1a\x24\xdd\x9e\xcb\xc8\x67\x99\x1d\x45\x3a\x24\x95\x8f\x19\xfa\xdf\x77\x24\x45\xcb\xfa\xb0\x6b\x25\x18\xb0\x27\x8b\x77\xe4\xdd\xef\x7e\xf7\x41\x7a\xb3\x59\xe0\x92\x4b\x84\x64\xad\x79\xc1\x2d\xbf\xc7\x7b\x26\xf8\x82\x59\xa5\x93\xaa\x9a\x6c\x36\x7c\x09\xe9\x35\xde\x95\x5c\xe3\x82\x04\xb4\x44\xad\xe1\xe7\xb7\x50\xef\xc3\xad\x76\xba\xd9\xa4\x57\xcc\xae\xaa\xea\x35\x24\xf4\xfd\x41\x65\xcc\x72\x25\xab\x2a\x79\x0d\xb4\xfe\x8b\x89\x12\xe7\x8f\x6b\x8d\xc6\x78\xf1\xec\x8d\xb7\xf5\xcd\x5b\x90\x5c\xc0\x66\x02\xa0\xd1\x96\x5a\x3a\xe9\xc4\xf9\x46\xb9\xd8\x62\xf8\x83\xcb\x0f\x28\x73\x67\x7e\x08\xc4\x56\x3d\x1a\x85\x97\xee\x58\x1f\x87\x8a\x3d\x1e\x44\x15\xd5\xcf\x44\xd5\x58\x1f\x85\x8a\x3c\x59\xd4\x72\x18\x53\xad\x7c\x06\xa2\xcf\xe1\x48\x30\xfd\x79\x6c\xf6\x78\x51\x16\x7b\x73\xe7\x94\x07\x11\x2d\x85\x62\xf6\xa7\x1f\xa7\x83\x75\x14\x53\x18\x5c\xf8\xd5\xfc\x31\x13\xa5\xa1\x72\xde\x8a\xc7\xe6\xf5\x00\xde\xa0\x7c\x29\xde\xe8\xa2\x83\x37\x8a\xc7\xe1\x2d\x85\xe5\x6b\x81\x1f\x97\x7b\x20\x6f\xf5\x2f\x45\xbd\xe3\x68\x14\xc2\xb9\xdc\x47\xa7\xd3\x3c\xaf\x3f\x82\xcd\xa3\x61\xc4\xdf\x38\xf2\xb2\xd2\x58\x55\x2c\x95\x2e\x98\x6d\x4d\xbd\x01\x90\xbf\xfb\x5d\x5f\xa1\xcf\x09\xc2\x46\xbf\x34\x56\x73\x99\x0f\x93\x79\x34\xe8\x08\xd6\x08\x9e\x0d\xcd\xe6\x4b\xc4\x85\xb9\xe1\xff\xa0\x97\x10\x36\xcd\x8a\x4b\x56\xd0\xd2\x09\x5d\x0c\x5c\xba\x94\x0a\x94\x7b\x90\xf4\x5b\xf5\xc2\x62\x61\xf6\xf6\xaa\xd7\x7e\x2d\x61\x1d\x1c\xb1\x43\x6b\xcb\x63\x7b\xf1\x10\xa0\x5a\xfb\x2c\x40\x5b\xcb\xa3\x00\xfd\x29\xf9\x5d\x89\x07\x30\xed\x6c\xf8\x6f\x2f\xc5\xff\x41\x53\x39\x18\x37\x54\xe6\x02\x6f\xb2\x15\x16\xec\xc6\xd5\x29\x90\xea\xec\x0c\x8c\x97\x83\xf1\x8a\x41\x8f\x13\xea\x3e\xe0\x0e\xf9\xf7\x6f\xe8\xf7\x17\xd8\x5b\xa6\xa4\x7e\xf5\x8a\x80\x6c\x36\x9a\xc9\x1c\x21\x8d\xfc\x03\x19\xa6\xcf\xb5\xa0\xb0\xdd\x33\x46\xad\x51\xdb\xa7\xa6\x53\x20\xdd\x69\x7e\xff\x25\x0c\x06\x7c\x52\xd9\x3e\xc6\xab\xda\x42\xa8\x95\x17\xfa\x0b\xfc\xbc\x5b\x2c\xb8\x23\x9e\x89\xc6\xc8\x36\x70\x72\xe9\xa5\x74\xd3\x57\x95\x23\x81\x58\xf0\xdd\x3a\x83\xd3\xb6\xd2\x09\x7e\x70\x3b\x3c\x11\x00\x47\x21\x01\xd8\x89\x99\xc0\xec\x25\x18\x7e\x6d\x7b\xeb\x24\x5d\x69\xd3\x8d\xe3\x52\xd9\x77\x42\xa8\x07\x7a\xfa\x25\x43\x26\x93\x5e\xd9\xcd\x06\xe7\x71\x77\xd4\xa9\xdb\x2f\x98\xb5\x27\x32\x25\x2b\x4c\x6b\x08\x4a\x07\xf5\x37\x66\xd9\xa7\xa7\x75\x7f\xf0\x5d\xa3\xa9\x89\xed\x41\x72\x12\xdf\x20\xd3\x99\x23\xa3\x77\x2e\x7d\xcf\xcc\xdc\x07\x4b\xf4\xf7\x09\x38\x57\xc5\x5a\x19\x6e\xb1\x36\x43\x36\xfd\xee\x69\xdf\x50\xb0\x92\xa6\xe9\x6c\x70\x9c\xf7\xb3\xb5\xad\x96\x0b\x73\x15\xdf\xe2\x55\xd5\xce\x70\xef\x89\xee\x52\xdc\xae\xb5\x0b\x73\xee\x89\x0a\xf7\x10\xbd\xd5\xda\x36\x86\xef\xbc\x41\x33\x4a\x5a\x46\x58\x3b\x06\x3a\xf7\xd0\xf0\x49\xda\x8c\x8f\x1f\x7d\xa6\xda\xa7\xbb\xa9\x6d\x1f\x0f\xbf\x6b\x96\xfd\xcd\xa8\xe3\x3c\xa7\xfe\x93\x84\xae\x02\x3e\xad\xb8\x81\x25\xa7\x6e\x7d\x60\x06\x72\x24\x6c\x64\x74\x01\xb7\x4f\x60\x57\xd4\xc2\x0f\x2c\xcf\x51\x83\x55\x4a\xa4\x6e\xff\xdc\x55\xab\xcc\x49\x19\xcf\x15\x3c\x5f\x59\x20\xee\xef\x11\x96\xa5\xf5\xa6\x56\x28\xe1\x49\x95\x94\xe9\x53\x5d\xca\x96\xa5\xe8\x02\x32\x55\x14\x4c\x2e\x26\x13\x4e\xf9\xd7\x16\xa6\x54\x19\x49\xce\xed\xaa\xbc\x4d\x49\x77\x96\x31\x53\x32\xf1\x85\x17\x67\xb9\x3a\xad\x4f\x9f\xc5\x59\x9c\x1c\xb3\x39\x14\x58\x32\xf1\xe3\x25\x4e\x1c\xef\x2c\xce\x1c\x82\x4d\x37\xf9\x12\x92\xef\xee\x62\x67\x47\xc6\x66\x9e\x9e\x58\xda\xdb\x4b\xc0\x84\xc8\x89\xc7\xf7\x25\xc1\x3f\x17\xcc\x98\x7a\xaa\x2d\x4b\x99\x81\xab\xda\x6b\xcc\x90\x2a\x4a\x07\x39\x9c\x90\x68\x67\xdf\x0c\x9a\x7e\x81\x93\x9d\x7f\x7c\x86\x9e\x81\x75\x7f\xf8\x5e\x93\xf8\x30\xed\xa8\x67\xad\x58\xea\xa9\xca\x31\x86\xe3\x4a\x85\x9a\xad\x69\xa4\xa0\x68\xae\xb2\x1e\xb8\x34\x3a\xe8\x0d\xe9\x69\xff\xb6\xf2\xc8\xdc\xc0\xaa\xbb\x99\xd4\x33\x3f\x0b\x1b\xd6\x9a\xaf\xa6\xcf\xe9\x90\x6f\x57\xf8\x36\x8b\x2c\x38\x2c\x0d\x27\xb0\x7b\x25\xb4\x82\xda\x13\xd2\x21\xaa\x1b\x27\x8e\xea\x03\xe1\xc1\x49\x3d\x80\x1a\xdb\x3e\xca\x23\xe6\x7f\x13\x1b\x51\x33\x30\x7e\xff\x0d\x00\x00\xff\xff\x65\xe5\xfe\x33\x02\x10\x00\x00")

func templates_modelvalidator_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_modelvalidator_gotmpl,
		"templates/modelvalidator.gotmpl",
	)
}

func templates_modelvalidator_gotmpl() (*asset, error) {
	bytes, err := templates_modelvalidator_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/modelvalidator.gotmpl", size: 4098, mode: os.FileMode(420), modTime: time.Unix(1424115031, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_operation_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x4d\x6f\xe3\x46\x0c\xbd\xeb\x57\xb0\x06\x5a\x48\x81\x56\xbe\xa7\xd8\x43\x9b\x16\xcd\x1e\xba\x0d\x92\xa0\x3d\x16\x93\x11\x2d\xcd\x56\x9a\x51\xe6\x23\x8e\x6b\xf8\xbf\x97\xf3\x21\xc7\x4a\x14\xd7\xc5\x62\x17\x41\x4f\x96\x34\xe4\x23\xf9\xf8\xc8\xf1\xc0\xf8\x5f\xac\x41\xd8\x6e\xab\xab\xf8\xb8\xdb\x65\xd9\x72\x09\xb7\xad\x30\xb0\x12\x1d\xc2\x9a\x19\x68\x50\xa2\x66\x16\x6b\xb8\xdb\x80\x6d\x11\xcc\x9a\x35\x0d\x6a\xb0\x4a\x75\x95\xb7\xff\xb9\x16\x56\xc8\x86\x0e\x47\xbf\x5e\x34\xad\x85\x41\xab\x07\x84\x95\xb3\x01\xaa\x45\x09\x1b\xe5\x40\xe3\x3b\xed\xe4\x04\x69\x0c\x01\x5c\xf5\x3d\x93\x75\x96\x89\x7e\x50\xda\x42\x9e\x01\x2c\x24\xda\x65\x6b\xed\xb0\xc8\xfc\x5b\x23\x6c\xeb\xee\x2a\xb2\x5c\x72\x66\x1c\xeb\x3e\x89\x7e\xd9\xa8\x77\x09\x6b\x71\x82\xcd\x12\xb5\x56\xda\x9c\x64\x6a\x06\xe4\x27\x19\x6a\xe5\xac\x0f\x4f\xb6\xdb\xad\x66\x92\x88\xad\x3e\x84\x2a\x0c\xd1\xea\x3f\x12\x1f\x42\xda\x15\x2c\xbe\xbd\x5f\x40\x95\x3e\xa2\xac\xe9\xa9\x08\xbc\x53\x23\x2e\x3a\x66\xcc\x47\xd6\x53\x2b\x2e\x89\x88\x8e\xc8\x21\x1f\xd4\x2b\xc6\x89\x49\x45\xa4\xb7\xcc\x02\x67\x12\xda\x70\x0c\x0f\xac\x13\xb5\xf7\xbc\x74\xc4\xdc\x81\x3b\x0c\x4c\xb3\xde\x64\x76\x33\xe0\xbf\x22\x6f\x43\x2e\x62\x05\xd5\x0f\xce\xb6\x4a\x8b\xbf\xb1\x0e\x09\x52\x56\xd1\xda\x37\xb3\x76\x1c\x0d\x30\xea\xa0\x71\x9d\x05\xca\x86\xf2\x08\x5c\x56\xf0\x0b\x5a\x13\x7a\xaa\xf1\xde\xa1\xb1\x29\x3c\x90\x80\xd6\xd8\x75\xfe\x37\x74\x1c\xb9\xd3\xc2\x6e\x02\x17\x5c\x0c\xac\x8b\x61\x6f\x1c\x27\x6c\xf3\xab\xaa\xb1\x0b\x81\x63\xd4\x7c\x9a\xf8\x55\xc0\x2c\xe1\xcc\x4b\x76\x04\xd8\xed\x0a\xc8\x23\xca\x35\x5a\xa7\xa5\xb9\x50\xfd\xd0\xe1\xe3\x6f\x77\x9f\x90\xdb\xdd\xee\x2c\xb1\x4c\x4e\xd3\x30\x65\x4c\xbe\x88\x8d\xe8\xcc\x9e\x9a\x53\xc3\x06\xf7\x83\x36\x3e\xe1\x7c\x2e\x6f\xff\x9d\x95\xaf\x43\xc2\x2b\x35\x87\xa7\xb8\x3c\x3e\xe2\x7a\xea\x08\x5c\x23\xcd\xb6\x27\x40\xe2\x1a\xfc\x24\x57\xa3\x02\xa3\xa2\x71\x56\xbf\x6a\xf0\x3b\x41\x28\x99\xad\x9c\xe4\x2f\x71\x73\x6e\x1f\xe1\xac\x17\x35\x21\xad\x99\xc6\xea\x42\x91\x9e\x1f\x6d\x99\x46\x43\xcf\xab\xbe\x08\x6d\x3c\x0c\xe4\xc5\xaf\x03\x69\xf0\xdd\xf4\x68\x9b\x20\xcf\x81\x62\x95\x89\x7d\x7d\x3e\x06\x08\x25\x47\xd2\x7f\x52\xfc\xc6\x92\x34\x9a\xc0\xf0\xe4\x2d\x92\x33\x33\x86\x60\xac\x76\xdc\x86\xf8\x29\xd0\x5c\x3d\x74\x1a\xb9\x07\x98\xeb\xc8\x5e\x15\xaf\xd4\xeb\x73\x0c\x04\xfa\x7e\x5e\x23\x47\xf1\x80\x3a\x25\xf0\x8c\x89\x02\x6e\x50\x3f\xe0\xe5\xed\xed\x55\xae\x53\xa7\xae\xd1\x0c\x4a\x1a\xfc\x83\xa6\x16\x75\x09\x1a\xce\xd2\xf7\x20\xd7\x22\xb2\xe7\x77\x5f\x09\x7f\xc2\xf9\x7b\x78\x11\x65\xac\xa3\xba\xf6\x56\x1f\xe4\x4a\xe5\xa4\xb6\xd9\x85\xe3\xc2\x56\x08\x8a\x3c\x0e\xb5\x77\xca\x7d\x4a\x1e\xd7\xeb\x97\xe0\xbc\xe7\x37\xef\x41\x8a\x2e\x24\x06\xc7\xd2\x09\x95\xd5\x54\x29\x41\x24\x14\x1a\xef\x38\xad\xe5\x58\x13\x01\x16\x01\x28\x2a\x84\x1e\xbd\xe4\xf7\xdb\x2b\xa6\xe9\x03\xdf\xc3\xd3\x6e\x80\xc5\x7e\xb5\x6e\x77\x8b\xb1\xae\x71\xbc\xe2\x5b\x95\x3f\x5f\x27\xa3\x54\x26\xc3\x95\x6a\x3a\xca\xc6\x8f\x42\xd6\xbf\xfb\x7b\x20\x35\x65\x4f\x4a\x19\x04\xfd\xcc\x2b\x0d\xf2\xf7\x13\xae\xfc\xa2\xbf\x23\x98\xf1\xd6\xf8\x52\xd4\xbd\x76\xcf\xcc\xed\x3b\xed\xb1\x5e\x2d\x3e\xc9\xbb\x7a\x5a\x56\xb3\x75\x96\x4f\xbd\x2a\x7c\x91\x8c\x5b\xba\xbb\xbb\xcd\x78\x7f\x1e\xac\xde\xaf\xa8\xa0\xec\xf3\x61\x89\x9d\xc3\x9d\x7d\x4c\x27\x89\xaa\x93\x38\x7a\x29\x8b\xe3\x8c\xbd\x59\x7e\x28\xff\x62\xf6\x6a\xfe\x92\x6a\x7b\x43\x12\x7b\x53\x0a\xfb\x7f\xc9\x6a\xff\x57\x6a\xfc\xdf\xf3\x4f\x00\x00\x00\xff\xff\x3d\xa5\x5c\x34\x4a\x0d\x00\x00")

func templates_server_operation_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_operation_gotmpl,
		"templates/server/operation.gotmpl",
	)
}

func templates_server_operation_gotmpl() (*asset, error) {
	bytes, err := templates_server_operation_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/operation.gotmpl", size: 3402, mode: os.FileMode(420), modTime: time.Unix(1424125862, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_parameter_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x4f\x93\xd3\xb8\x12\xbf\xe7\x53\xe8\xa5\xde\xa3\x92\x61\xf0\x70\x78\xf5\x0e\x8f\x9d\xad\x5a\x60\xb6\x48\x15\xb0\xec\x0c\x70\xa1\xa8\x42\x63\x2b\x89\x76\xfd\x6f\x24\x79\xfe\x90\x9a\xef\xbe\xdd\x2d\xc9\x96\x1d\xdb\x24\x61\x38\x70\x4a\x2c\xb5\xd4\xbf\xee\xfe\x75\xb7\xa4\xcd\x26\x11\x4b\x99\x0b\x36\x2d\x95\xcc\xa4\x91\xd7\xe2\x9a\xa7\x32\xe1\xa6\x50\xd3\xfb\xfb\xc9\x66\x23\x97\x2c\x7a\x23\xf3\xd7\x22\x5f\x99\x35\x8c\xc0\xb7\x50\x8a\xfd\xff\x94\x39\x41\xd1\x4c\xcf\x36\x9b\xe8\x1d\x47\xb1\x63\x36\x85\xff\xaf\x8b\x98\x1b\x59\xe4\xf7\xf7\xd3\x63\x06\xdf\x1f\x79\x5a\x89\xb3\xdb\x52\x09\xad\x69\x98\x46\x83\xdd\xe7\xcf\x68\xf3\x7f\x9d\xb2\x5c\xa6\x6c\x33\x61\x4c\x09\x53\xa9\x1c\x47\x27\x88\x46\xe4\x49\x83\x8a\xdf\x8e\xa2\xf2\xd3\x07\xa2\x6a\x76\xdf\x0b\x15\x68\x32\x42\xe5\xfd\x98\xdc\xe4\x01\x88\xbe\xd8\x25\x76\xeb\x2f\xfb\xf9\x49\xe6\x32\xab\xb2\xc1\xd8\xe1\xe4\x28\xa2\x65\x5a\x70\xf3\xbf\xff\xce\xfa\x90\xcd\x7d\x08\xad\x0a\xfa\x3a\xbb\x8d\xd3\x4a\x03\x95\xea\xe1\x7d\xe3\x3a\x82\xd7\x4e\x7e\x2f\x5e\xaf\xa2\x83\xd7\x0f\xef\x87\xb7\x4a\x8d\x2c\x53\xf1\xc7\x72\x00\x72\x3d\xff\xbd\xa8\x03\x45\x7b\x21\x3c\xcb\x87\xdc\x89\x33\x87\xe5\x87\xdd\x73\x67\x18\xf4\xdb\x54\x9b\xb8\xd2\xa6\xc8\x96\x85\xca\xb8\x69\x15\x9c\x1e\x8c\xbf\x93\xd4\x37\xbc\x87\x03\x56\x90\x3e\xb5\x51\x32\x5f\xf5\xfb\x72\x37\xcc\x0d\x56\x9d\xca\xb8\xaf\x2a\xbe\x15\x22\xd1\x17\xf2\xab\xa0\x11\x80\xa6\x78\xf6\x96\x67\xf0\x89\x83\x68\x82\xcc\x31\xa0\xa9\xc8\x07\x80\x6c\x27\xea\xc2\x88\x4c\x0f\x66\x2a\xcd\x7e\x2b\x5c\x1d\x1c\x3e\x3f\xdd\xce\xfb\x66\xe2\x18\x20\x37\x7b\x10\xa0\x7a\xe7\xbd\x00\x7d\xc8\xe5\x55\x25\x46\x30\x05\x02\x7b\xd3\xfa\x27\x4f\xa9\x52\x15\xa5\x50\xe6\xae\x87\xa9\x0b\xfd\xce\x77\x77\x5c\x01\xde\x29\x53\x80\xda\xdb\xf4\x59\x84\x22\xa1\xa9\x0b\xfd\x82\xb2\xd5\xa6\x17\x74\xa0\xf6\x1e\xfd\xa9\xdc\xbb\x4d\x91\x1b\x0e\x58\x3b\x1b\x74\xf2\xab\xbd\xb2\x63\xe4\xa5\xcc\x93\x1a\xf4\xb4\x4f\x82\x76\x43\x31\x11\x38\x00\x28\x28\x72\x83\x62\xd1\x02\x66\x6e\x3f\x72\xc0\x10\x63\xd8\x2a\x23\xd3\xe8\xa2\x4c\xa5\x79\x7e\x67\x0d\xb4\xb1\x43\xf9\x50\xf6\x53\xdf\xe8\x67\x1b\xdd\x17\x45\x9a\x8a\x18\xe3\x5b\x57\x20\x4a\xed\x54\x8b\x3e\x95\x8a\xdf\x34\xf6\x05\x93\xfa\x2b\xce\x6a\x48\x91\xc9\x35\x57\xac\x35\x47\x9f\xef\xef\x4a\xe1\x4d\xe2\x79\xd2\x72\x29\x8b\x5e\xac\x65\x9a\x74\x43\x8d\xc6\xdb\x09\x90\xbc\x06\x7a\xa0\xf3\x3d\x55\xcf\x52\x91\x81\x41\xa8\x75\x59\xe5\xf1\xac\xa5\x11\x8b\x17\xb1\xd2\x2e\xdf\x62\x6c\x33\x65\x61\xcd\xd9\x11\x10\xb4\x50\x1a\x45\x71\x7b\x90\x22\xf6\xb6\xf9\xd6\xe5\xa8\x83\x07\x66\xd5\x3c\x07\xda\x87\x65\x98\x7e\x80\x5e\x6d\x87\x20\xe8\xa7\xcf\x3a\x63\xbf\xb0\x8e\x43\x3b\x02\x8f\x1f\x3b\x44\x8d\x5b\x76\xf4\x57\x05\x65\xcb\x25\x7a\x6d\x77\x20\xd1\x76\x1d\x91\x25\x60\xc9\x1c\x74\xba\x42\x11\x64\x35\xda\xab\xa3\xdf\x92\xe4\x8c\xdc\x36\x73\xde\x5b\xe4\xe4\x1c\x74\xea\xac\x56\x35\xda\xf6\xc2\x28\xd8\xf2\x32\x02\x65\xee\x34\x93\xa7\x01\x00\x7c\xde\x4f\x1a\x7c\x41\x21\x73\xec\x68\x9b\x36\xc6\x88\xed\xc2\xd5\x63\x62\xaf\x7e\x2b\xb7\x00\x0a\xce\x29\x3c\x2d\xe2\x9f\x32\x5e\x96\x40\x82\x36\x10\x75\xcc\x28\x2c\x76\x81\x4d\xb5\x43\x36\x19\xf7\x56\x43\x42\x50\xc0\x42\xd6\x04\xb5\xac\xc3\xf1\xb0\x00\xd5\xec\x3e\x10\x9a\xd3\xd6\x8c\x7a\x44\x4d\x82\x94\x3c\xfe\x9b\xaf\x84\x6d\xb4\xf4\x17\x66\x27\x27\x27\xec\xfd\x5a\x6a\xb6\x94\xa9\x60\x37\x5c\xb3\x95\x00\xac\x80\x2f\x61\x97\x77\xcc\xac\x05\xd3\x37\x7c\xb5\x82\xba\x61\x8a\x22\x8d\x50\xfe\x2c\x81\x2c\xc8\x57\x30\xe9\xd7\x65\x72\xb5\x36\x0c\x72\xf6\x5a\x40\x81\x30\xb4\xd5\x5a\xe4\xec\xae\xa8\x20\x60\x4f\x54\x95\xb7\x76\xf2\x2a\x58\x5c\x64\x19\xd4\xa7\xc9\x44\x66\x65\xa1\x0c\x9b\x81\xd1\xd3\x5c\x98\x93\xb5\x31\xe5\x14\x3f\x56\xd2\xac\xab\xcb\x08\x04\x4f\x62\xae\x2b\x9e\xfe\x25\xb3\x93\x55\xf1\xc4\x6d\xb5\x8b\xcc\x89\xcd\x97\x9d\x44\x51\x2f\xe2\xdf\x4d\x5a\x15\x95\xd9\x11\x83\xcf\x95\xe9\x84\xe2\xaa\x78\x0e\x91\x88\x16\x64\xb6\x76\xcc\x00\x07\x42\x29\x5d\xb2\xe9\x7f\xae\xa8\xb7\x59\xc2\x52\x10\xe7\x14\x28\x8c\x73\xca\xb5\xb6\x47\x24\x3a\x2d\x69\xf0\x21\xf1\x4b\x33\x9e\xa6\xe4\xe5\xcb\xa2\x82\x92\x5f\xda\x59\x2c\x87\x38\x08\x4b\x5f\x55\xe0\xeb\x60\x3d\xc3\x0a\x4b\x05\x02\xf7\x36\x77\xa5\x8c\x61\x0b\x8a\x39\x50\x18\x3a\x18\x2b\x2e\x89\xb9\x09\x5b\xaa\x22\x63\x9c\xa1\x77\xa2\x73\x01\xe7\x26\x6d\x26\xb0\x40\xf4\x23\x82\x23\x75\x15\x1b\x57\x40\x9d\xa5\x76\xca\x17\xce\x97\x42\xc7\x4a\x96\xb6\x38\x59\xc3\x5a\x43\xde\x6c\x4a\x81\x77\xae\x15\x38\xd4\x4d\x7b\x6b\xdc\x63\x79\xfc\x1c\x52\xc9\xa1\x03\x27\x98\x35\xc3\xdc\xd2\xd4\x00\xbd\xfb\xe1\x0b\x08\x49\x22\xc7\x4c\x1a\x06\xd0\xab\x0c\x46\xcd\x9a\x1b\x64\x23\xdc\x99\x6e\x91\xd7\xf9\x4a\x33\x89\x5f\xd4\xf6\x38\x73\x9d\x8a\x5f\xa6\x62\x06\xfd\xab\x3e\xc2\x9d\x0b\x0d\x57\x2d\xec\x80\x42\x2d\x79\x2c\x10\x06\xba\x5c\xd3\x62\x5b\x78\x34\x2a\xba\x91\x10\x9d\x0a\xfc\x0a\xce\xe1\x94\x2d\x99\x30\xeb\x22\x61\xe8\x73\x3d\xc1\xae\xca\x30\xaf\xcf\x45\x2c\xa0\xc3\x28\x67\xec\x51\x9f\x83\xe7\xa1\xa5\x33\xc5\x8e\xc2\xb8\x1c\x33\x62\x25\x3b\xb2\xe4\x84\xf3\xb3\x89\xd7\x22\x39\xc7\xaf\x63\x24\x0b\x1a\xac\x7c\x2a\x62\x6b\xa2\x81\x1e\xa3\xec\x81\x52\x63\xa5\xcf\xc5\xcd\xac\x33\x3d\xaf\xdb\xe3\x2b\xae\xff\xac\x84\xba\xf3\x21\xbe\xa2\x25\x2a\xfa\x70\xfe\x3a\xa2\x09\x57\xcb\x6c\xa8\xfa\x48\x51\x6f\xd5\xd3\x63\x17\xc1\xe6\xb6\x3a\xbe\x11\x6a\x25\xb6\x7d\x15\x61\xb4\xb7\xe8\x32\xab\x33\x1a\xc4\x79\x72\x01\x91\x4d\x05\x35\xa4\xd9\x95\x76\x97\x0e\x7a\xb9\x99\x37\xfd\x81\x39\x28\x30\xf1\x03\xd4\x52\x5c\x9c\xe9\xe3\x00\x5e\xc1\x4a\xa1\x7e\x04\x84\xc8\x6e\xdd\xa7\xbe\xce\xbb\x00\x48\xeb\x38\xfe\xf0\x41\x69\x4e\xc5\x3d\x81\x19\x3e\x38\xff\xd0\x88\x75\x31\x0d\x44\x6d\x1f\x74\x0f\x1a\xce\x2d\x7c\xdb\x21\xfd\x36\xb6\xe0\xd8\x3c\x09\x72\xf0\x79\x91\xf8\xd0\xb6\xce\x7b\xbe\x78\xf8\xa2\x01\x4a\x51\xf4\x98\x3d\xda\xb6\x61\x0b\xff\x4e\x67\x3e\x3c\xd6\xbe\x15\x37\xa0\x5c\x0b\x1a\x9d\x4d\xdb\xcf\x02\xd3\xbe\x93\xed\x94\x4e\xdc\x64\xd4\x3d\x23\x87\x37\xdb\x0f\xf9\x78\x0b\x9f\xbf\x8c\x40\x7d\x9f\xbb\xa3\x66\x2b\x1b\xbc\x93\x82\x03\x29\x7c\x43\xd3\xfe\x77\xec\xeb\x33\xfa\xa8\xa9\xd6\x8c\x2e\x60\xdd\x4a\x47\x3e\x86\x06\x11\x96\xba\xde\x8b\xf3\x58\x4b\x68\x54\x36\x2d\xa1\x9f\x34\x70\x83\x74\x2f\x5c\x07\x14\xf8\x9a\x12\xd8\x5a\xa4\x12\xe0\x81\x9e\x57\x0c\x3f\x79\x51\x3f\xa4\x0d\xde\x41\x00\xcd\xc3\x1d\xfd\x9b\xd8\xd0\x69\x7b\xec\x12\x16\x5c\xbf\x10\xc2\x77\x5c\xb2\x46\xaf\x57\xf5\xc5\x0a\x95\xec\x76\x7d\xd9\xbe\x2c\x9f\xda\x43\x43\x70\x59\x19\x96\x04\x3d\x3d\xae\x80\x7e\xdc\x5c\xac\x75\x18\xb3\xed\x34\xf0\x51\xdc\x66\xce\xce\x81\xf2\x97\x42\xb2\xcc\x6a\x86\x23\x52\xb3\xc0\x5b\xdb\xce\xa8\x56\x1a\x0d\x35\x9b\x87\xcb\x81\x4f\x9f\x0f\xce\x02\x46\x0f\x2d\x38\x8d\xcf\xb3\xc4\x9f\xfe\xc4\x20\xb1\xd3\x53\xf6\x74\x8c\x4f\x7e\xc5\x08\x99\x76\xa3\x4e\xa7\x6a\xbf\x14\x4b\x0e\x70\x89\x25\x1d\x34\x8f\x1e\x31\xf7\xb0\xdc\x16\x9a\xb3\x5f\x6b\xac\x03\x04\xdb\x5a\x13\xd0\x72\xc0\x62\x8f\x30\x34\xa0\x09\xfb\xf8\x15\x98\xde\xc0\x06\x70\x04\x57\xdb\x9f\x9b\xe9\xc1\x43\x67\x17\xff\xbe\x7c\x1f\xb1\xe9\xd0\x37\xb6\x56\x93\x6b\xbd\xaf\xd5\xbf\xff\x04\x00\x00\xff\xff\x8b\x71\xf0\xe7\x0a\x1e\x00\x00")

func templates_server_parameter_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_parameter_gotmpl,
		"templates/server/parameter.gotmpl",
	)
}

func templates_server_parameter_gotmpl() (*asset, error) {
	bytes, err := templates_server_parameter_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/parameter.gotmpl", size: 7690, mode: os.FileMode(420), modTime: time.Unix(1424141881, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/model.gotmpl": templates_model_gotmpl,
	"templates/modelvalidator.gotmpl": templates_modelvalidator_gotmpl,
	"templates/server/operation.gotmpl": templates_server_operation_gotmpl,
	"templates/server/parameter.gotmpl": templates_server_parameter_gotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"model.gotmpl": &_bintree_t{templates_model_gotmpl, map[string]*_bintree_t{
		}},
		"modelvalidator.gotmpl": &_bintree_t{templates_modelvalidator_gotmpl, map[string]*_bintree_t{
		}},
		"server": &_bintree_t{nil, map[string]*_bintree_t{
			"operation.gotmpl": &_bintree_t{templates_server_operation_gotmpl, map[string]*_bintree_t{
			}},
			"parameter.gotmpl": &_bintree_t{templates_server_parameter_gotmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

