package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_model_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\xcd\x4e\xf4\x30\x0c\xbc\xe7\x29\xac\x4a\x9f\xf4\x71\xa0\x7b\xe7\x0a\x1c\xb8\x20\x24\xf6\x01\xd6\xb4\x6e\x1a\x68\x7e\x48\x5c\x56\x55\x94\x77\x27\x49\x5b\x56\xcb\x85\x5b\x6c\xcf\xd8\x33\x93\x18\x7b\x1a\x94\x21\x68\xb4\xed\x69\x72\xde\x3a\xf2\xbc\x34\x29\x89\x18\xd5\x00\xed\x83\xed\x5e\xd9\x2b\x23\x53\x8a\xf1\xba\x22\xd3\x57\x58\xfb\xb2\xb1\x9e\x51\x53\x4a\x50\x70\xc8\x78\x5c\x5c\xa9\x4e\xef\xc1\x9a\xbb\xa6\xc0\xd0\xa3\x5e\x31\xcd\x49\xec\x7c\xe1\xb0\xfb\x40\x49\x50\x11\xf5\x59\xba\x87\x03\x1c\x47\x15\x60\x50\x13\xc1\x19\x03\x48\x32\xe4\x91\xa9\x87\xb7\x05\x78\x24\x08\x67\x94\x92\x3c\xb0\xb5\x53\x5b\xf0\x8f\xbd\xe2\x2c\x2d\x0f\x77\x9e\x56\x72\x64\xc8\xa6\xbe\x08\x86\x99\xeb\xaa\x91\x0c\x2c\x76\x06\x4f\xb7\x7e\x36\x57\x9b\xf6\x13\xd0\x59\xad\xd1\xf4\x62\xcb\xe0\x49\x3b\xeb\x39\xa4\xa4\xd6\x07\xfc\x17\x90\xe5\x7a\x34\x59\xf6\x65\x5a\x9b\xf9\x9a\x32\x3c\x40\xf3\xef\xb3\x81\x76\x6b\xae\x4e\x6f\x2e\x9e\xff\xc8\x76\x07\x72\x8e\xb0\xe4\x72\x3f\x61\x08\x5b\xba\x81\xfd\xdc\x31\x44\xf1\x23\x60\x8b\x5f\x51\xa8\x4c\x26\xed\xa6\xe2\xe2\xd7\x97\x56\x35\xbb\x82\x24\xbe\x03\x00\x00\xff\xff\xfc\x8d\x3d\xfc\xfa\x01\x00\x00")

func templates_model_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_model_gotmpl,
		"templates/model.gotmpl",
	)
}

func templates_model_gotmpl() (*asset, error) {
	bytes, err := templates_model_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/model.gotmpl", size: 506, mode: os.FileMode(420), modTime: time.Unix(1424115031, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_modelvalidator_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x71\x13\x36\xc0\x4e\x1b\x65\x03\x86\x3d\xac\xeb\x80\x22\xf3\xd0\x00\x5d\x1a\x24\xdd\x9e\xcb\xc8\x67\x99\x1d\x45\x3a\x24\x95\x8f\x19\xfa\xdf\x77\x24\x45\xcb\xfa\xb0\x6b\x25\x18\xb0\x27\x8b\x77\xe4\xdd\xef\x7e\xf7\x41\x7a\xb3\x59\xe0\x92\x4b\x84\x64\xad\x79\xc1\x2d\xbf\xc7\x7b\x26\xf8\x82\x59\xa5\x93\xaa\x9a\x6c\x36\x7c\x09\xe9\x35\xde\x95\x5c\xe3\x82\x04\xb4\x44\xad\xe1\xe7\xb7\x50\xef\xc3\xad\x76\xba\xd9\xa4\x57\xcc\xae\xaa\xea\x35\x24\xf4\xfd\x41\x65\xcc\x72\x25\xab\x2a\x79\x0d\xb4\xfe\x8b\x89\x12\xe7\x8f\x6b\x8d\xc6\x78\xf1\xec\x8d\xb7\xf5\xcd\x5b\x90\x5c\xc0\x66\x02\xa0\xd1\x96\x5a\x3a\xe9\xc4\xf9\x46\xb9\xd8\x62\xf8\x83\xcb\x0f\x28\x73\x67\x7e\x08\xc4\x56\x3d\x1a\x85\x97\xee\x58\x1f\x87\x8a\x3d\x1e\x44\x15\xd5\xcf\x44\xd5\x58\x1f\x85\x8a\x3c\x59\xd4\x72\x18\x53\xad\x7c\x06\xa2\xcf\xe1\x48\x30\xfd\x79\x6c\xf6\x78\x51\x16\x7b\x73\xe7\x94\x07\x11\x2d\x85\x62\xf6\xa7\x1f\xa7\x83\x75\x14\x53\x18\x5c\xf8\xd5\xfc\x31\x13\xa5\xa1\x72\xde\x8a\xc7\xe6\xf5\x00\xde\xa0\x7c\x29\xde\xe8\xa2\x83\x37\x8a\xc7\xe1\x2d\x85\xe5\x6b\x81\x1f\x97\x7b\x20\x6f\xf5\x2f\x45\xbd\xe3\x68\x14\xc2\xb9\xdc\x47\xa7\xd3\x3c\xaf\x3f\x82\xcd\xa3\x61\xc4\xdf\x38\xf2\xb2\xd2\x58\x55\x2c\x95\x2e\x98\x6d\x4d\xbd\x01\x90\xbf\xfb\x5d\x5f\xa1\xcf\x09\xc2\x46\xbf\x34\x56\x73\x99\x0f\x93\x79\x34\xe8\x08\xd6\x08\x9e\x0d\xcd\xe6\x4b\xc4\x85\xb9\xe1\xff\xa0\x97\x10\x36\xcd\x8a\x4b\x56\xd0\xd2\x09\x5d\x0c\x5c\xba\x94\x0a\x94\x7b\x90\xf4\x5b\xf5\xc2\x62\x61\xf6\xf6\xaa\xd7\x7e\x2d\x61\x1d\x1c\xb1\x43\x6b\xcb\x63\x7b\xf1\x10\xa0\x5a\xfb\x2c\x40\x5b\xcb\xa3\x00\xfd\x29\xf9\x5d\x89\x07\x30\xed\x6c\xf8\x6f\x2f\xc5\xff\x41\x53\x39\x18\x37\x54\xe6\x02\x6f\xb2\x15\x16\xec\xc6\xd5\x29\x90\xea\xec\x0c\x8c\x97\x83\xf1\x8a\x41\x8f\x13\xea\x3e\xe0\x0e\xf9\xf7\x6f\xe8\xf7\x17\xd8\x5b\xa6\xa4\x7e\xf5\x8a\x80\x6c\x36\x9a\xc9\x1c\x21\x8d\xfc\x03\x19\xa6\xcf\xb5\xa0\xb0\xdd\x33\x46\xad\x51\xdb\xa7\xa6\x53\x20\xdd\x69\x7e\xff\x25\x0c\x06\x7c\x52\xd9\x3e\xc6\xab\xda\x42\xa8\x95\x17\xfa\x0b\xfc\xbc\x5b\x2c\xb8\x23\x9e\x89\xc6\xc8\x36\x70\x72\xe9\xa5\x74\xd3\x57\x95\x23\x81\x58\xf0\xdd\x3a\x83\xd3\xb6\xd2\x09\x7e\x70\x3b\x3c\x11\x00\x47\x21\x01\xd8\x89\x99\xc0\xec\x25\x18\x7e\x6d\x7b\xeb\x24\x5d\x69\xd3\x8d\xe3\x52\xd9\x77\x42\xa8\x07\x7a\xfa\x25\x43\x26\x93\x5e\xd9\xcd\x06\xe7\x71\x77\xd4\xa9\xdb\x2f\x98\xb5\x27\x32\x25\x2b\x4c\x6b\x08\x4a\x07\xf5\x37\x66\xd9\xa7\xa7\x75\x7f\xf0\x5d\xa3\xa9\x89\xed\x41\x72\x12\xdf\x20\xd3\x99\x23\xa3\x77\x2e\x7d\xcf\xcc\xdc\x07\x4b\xf4\xf7\x09\x38\x57\xc5\x5a\x19\x6e\xb1\x36\x43\x36\xfd\xee\x69\xdf\x50\xb0\x92\xa6\xe9\x6c\x70\x9c\xf7\xb3\xb5\xad\x96\x0b\x73\x15\xdf\xe2\x55\xd5\xce\x70\xef\x89\xee\x52\xdc\xae\xb5\x0b\x73\xee\x89\x0a\xf7\x10\xbd\xd5\xda\x36\x86\xef\xbc\x41\x33\x4a\x5a\x46\x58\x3b\x06\x3a\xf7\xd0\xf0\x49\xda\x8c\x8f\x1f\x7d\xa6\xda\xa7\xbb\xa9\x6d\x1f\x0f\xbf\x6b\x96\xfd\xcd\xa8\xe3\x3c\xa7\xfe\x93\x84\xae\x02\x3e\xad\xb8\x81\x25\xa7\x6e\x7d\x60\x06\x72\x24\x6c\x64\x74\x01\xb7\x4f\x60\x57\xd4\xc2\x0f\x2c\xcf\x51\x83\x55\x4a\xa4\x6e\xff\xdc\x55\xab\xcc\x49\x19\xcf\x15\x3c\x5f\x59\x20\xee\xef\x11\x96\xa5\xf5\xa6\x56\x28\xe1\x49\x95\x94\xe9\x53\x5d\xca\x96\xa5\xe8\x02\x32\x55\x14\x4c\x2e\x26\x13\x4e\xf9\xd7\x16\xa6\x54\x19\x49\xce\xed\xaa\xbc\x4d\x49\x77\x96\x31\x53\x32\xf1\x85\x17\x67\xb9\x3a\xad\x4f\x9f\xc5\x59\x9c\x1c\xb3\x39\x14\x58\x32\xf1\xe3\x25\x4e\x1c\xef\x2c\xce\x1c\x82\x4d\x37\xf9\x12\x92\xef\xee\x62\x67\x47\xc6\x66\x9e\x9e\x58\xda\xdb\x4b\xc0\x84\xc8\x89\xc7\xf7\x25\xc1\x3f\x17\xcc\x98\x7a\xaa\x2d\x4b\x99\x81\xab\xda\x6b\xcc\x90\x2a\x4a\x07\x39\x9c\x90\x68\x67\xdf\x0c\x9a\x7e\x81\x93\x9d\x7f\x7c\x86\x9e\x81\x75\x7f\xf8\x5e\x93\xf8\x30\xed\xa8\x67\xad\x58\xea\xa9\xca\x31\x86\xe3\x4a\x85\x9a\xad\x69\xa4\xa0\x68\xae\xb2\x1e\xb8\x34\x3a\xe8\x0d\xe9\x69\xff\xb6\xf2\xc8\xdc\xc0\xaa\xbb\x99\xd4\x33\x3f\x0b\x1b\xd6\x9a\xaf\xa6\xcf\xe9\x90\x6f\x57\xf8\x36\x8b\x2c\x38\x2c\x0d\x27\xb0\x7b\x25\xb4\x82\xda\x13\xd2\x21\xaa\x1b\x27\x8e\xea\x03\xe1\xc1\x49\x3d\x80\x1a\xdb\x3e\xca\x23\xe6\x7f\x13\x1b\x51\x33\x30\x7e\xff\x0d\x00\x00\xff\xff\x65\xe5\xfe\x33\x02\x10\x00\x00")

func templates_modelvalidator_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_modelvalidator_gotmpl,
		"templates/modelvalidator.gotmpl",
	)
}

func templates_modelvalidator_gotmpl() (*asset, error) {
	bytes, err := templates_modelvalidator_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/modelvalidator.gotmpl", size: 4098, mode: os.FileMode(420), modTime: time.Unix(1424115031, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_operation_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x4d\x6f\xe3\x46\x0c\xbd\xeb\x57\xb0\x06\x5a\x48\x81\x56\xbe\xa7\xd8\x43\x9b\x16\xcd\x1e\xba\x0d\x92\xa0\x3d\x16\x93\x11\x2d\xcd\x56\x9a\x51\xe6\x23\x8e\x6b\xf8\xbf\x97\xf3\x21\xc7\x4a\x14\xd7\xc5\x62\x17\x41\x4f\x96\x34\xe4\x23\xf9\xf8\xc8\xf1\xc0\xf8\x5f\xac\x41\xd8\x6e\xab\xab\xf8\xb8\xdb\x65\xd9\x72\x09\xb7\xad\x30\xb0\x12\x1d\xc2\x9a\x19\x68\x50\xa2\x66\x16\x6b\xb8\xdb\x80\x6d\x11\xcc\x9a\x35\x0d\x6a\xb0\x4a\x75\x95\xb7\xff\xb9\x16\x56\xc8\x86\x0e\x47\xbf\x5e\x34\xad\x85\x41\xab\x07\x84\x95\xb3\x01\xaa\x45\x09\x1b\xe5\x40\xe3\x3b\xed\xe4\x04\x69\x0c\x01\x5c\xf5\x3d\x93\x75\x96\x89\x7e\x50\xda\x42\x9e\x01\x2c\x24\xda\x65\x6b\xed\xb0\xc8\xfc\x5b\x23\x6c\xeb\xee\x2a\xb2\x5c\x72\x66\x1c\xeb\x3e\x89\x7e\xd9\xa8\x77\x09\x6b\x71\x82\xcd\x12\xb5\x56\xda\x9c\x64\x6a\x06\xe4\x27\x19\x6a\xe5\xac\x0f\x4f\xb6\xdb\xad\x66\x92\x88\xad\x3e\x84\x2a\x0c\xd1\xea\x3f\x12\x1f\x42\xda\x15\x2c\xbe\xbd\x5f\x40\x95\x3e\xa2\xac\xe9\xa9\x08\xbc\x53\x23\x2e\x3a\x66\xcc\x47\xd6\x53\x2b\x2e\x89\x88\x8e\xc8\x21\x1f\xd4\x2b\xc6\x89\x49\x45\xa4\xb7\xcc\x02\x67\x12\xda\x70\x0c\x0f\xac\x13\xb5\xf7\xbc\x74\xc4\xdc\x81\x3b\x0c\x4c\xb3\xde\x64\x76\x33\xe0\xbf\x22\x6f\x43\x2e\x62\x05\xd5\x0f\xce\xb6\x4a\x8b\xbf\xb1\x0e\x09\x52\x56\xd1\xda\x37\xb3\x76\x1c\x0d\x30\xea\xa0\x71\x9d\x05\xca\x86\xf2\x08\x5c\x56\xf0\x0b\x5a\x13\x7a\xaa\xf1\xde\xa1\xb1\x29\x3c\x90\x80\xd6\xd8\x75\xfe\x37\x74\x1c\xb9\xd3\xc2\x6e\x02\x17\x5c\x0c\xac\x8b\x61\x6f\x1c\x27\x6c\xf3\xab\xaa\xb1\x0b\x81\x63\xd4\x7c\x9a\xf8\x55\xc0\x2c\xe1\xcc\x4b\x76\x04\xd8\xed\x0a\xc8\x23\xca\x35\x5a\xa7\xa5\xb9\x50\xfd\xd0\xe1\xe3\x6f\x77\x9f\x90\xdb\xdd\xee\x2c\xb1\x4c\x4e\xd3\x30\x65\x4c\xbe\x88\x8d\xe8\xcc\x9e\x9a\x53\xc3\x06\xf7\x83\x36\x3e\xe1\x7c\x2e\x6f\xff\x9d\x95\xaf\x43\xc2\x2b\x35\x87\xa7\xb8\x3c\x3e\xe2\x7a\xea\x08\x5c\x23\xcd\xb6\x27\x40\xe2\x1a\xfc\x24\x57\xa3\x02\xa3\xa2\x71\x56\xbf\x6a\xf0\x3b\x41\x28\x99\xad\x9c\xe4\x2f\x71\x73\x6e\x1f\xe1\xac\x17\x35\x21\xad\x99\xc6\xea\x42\x91\x9e\x1f\x6d\x99\x46\x43\xcf\xab\xbe\x08\x6d\x3c\x0c\xe4\xc5\xaf\x03\x69\xf0\xdd\xf4\x68\x9b\x20\xcf\x81\x62\x95\x89\x7d\x7d\x3e\x06\x08\x25\x47\xd2\x7f\x52\xfc\xc6\x92\x34\x9a\xc0\xf0\xe4\x2d\x92\x33\x33\x86\x60\xac\x76\xdc\x86\xf8\x29\xd0\x5c\x3d\x74\x1a\xb9\x07\x98\xeb\xc8\x5e\x15\xaf\xd4\xeb\x73\x0c\x04\xfa\x7e\x5e\x23\x47\xf1\x80\x3a\x25\xf0\x8c\x89\x02\x6e\x50\x3f\xe0\xe5\xed\xed\x55\xae\x53\xa7\xae\xd1\x0c\x4a\x1a\xfc\x83\xa6\x16\x75\x09\x1a\xce\xd2\xf7\x20\xd7\x22\xb2\xe7\x77\x5f\x09\x7f\xc2\xf9\x7b\x78\x11\x65\xac\xa3\xba\xf6\x56\x1f\xe4\x4a\xe5\xa4\xb6\xd9\x85\xe3\xc2\x56\x08\x8a\x3c\x0e\xb5\x77\xca\x7d\x4a\x1e\xd7\xeb\x97\xe0\xbc\xe7\x37\xef\x41\x8a\x2e\x24\x06\xc7\xd2\x09\x95\xd5\x54\x29\x41\x24\x14\x1a\xef\x38\xad\xe5\x58\x13\x01\x16\x01\x28\x2a\x84\x1e\xbd\xe4\xf7\xdb\x2b\xa6\xe9\x03\xdf\xc3\xd3\x6e\x80\xc5\x7e\xb5\x6e\x77\x8b\xb1\xae\x71\xbc\xe2\x5b\x95\x3f\x5f\x27\xa3\x54\x26\xc3\x95\x6a\x3a\xca\xc6\x8f\x42\xd6\xbf\xfb\x7b\x20\x35\x65\x4f\x4a\x19\x04\xfd\xcc\x2b\x0d\xf2\xf7\x13\xae\xfc\xa2\xbf\x23\x98\xf1\xd6\xf8\x52\xd4\xbd\x76\xcf\xcc\xed\x3b\xed\xb1\x5e\x2d\x3e\xc9\xbb\x7a\x5a\x56\xb3\x75\x96\x4f\xbd\x2a\x7c\x91\x8c\x5b\xba\xbb\xbb\xcd\x78\x7f\x1e\xac\xde\xaf\xa8\xa0\xec\xf3\x61\x89\x9d\xc3\x9d\x7d\x4c\x27\x89\xaa\x93\x38\x7a\x29\x8b\xe3\x8c\xbd\x59\x7e\x28\xff\x62\xf6\x6a\xfe\x92\x6a\x7b\x43\x12\x7b\x53\x0a\xfb\x7f\xc9\x6a\xff\x57\x6a\xfc\xdf\xf3\x4f\x00\x00\x00\xff\xff\x3d\xa5\x5c\x34\x4a\x0d\x00\x00")

func templates_server_operation_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_operation_gotmpl,
		"templates/server/operation.gotmpl",
	)
}

func templates_server_operation_gotmpl() (*asset, error) {
	bytes, err := templates_server_operation_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/operation.gotmpl", size: 3402, mode: os.FileMode(420), modTime: time.Unix(1424125862, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_parameter_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x4b\x73\x1b\xb7\x0f\xbf\xeb\x53\xe0\xaf\xf9\x37\x23\x39\xca\x3a\x87\x4e\x0f\x4d\xdd\x99\x26\x71\x27\x9a\x49\xd2\xd4\x4e\x72\xc9\x64\x26\xf4\x2e\x25\xb1\xdd\x97\x49\xae\x1f\xd1\xf8\xbb\x17\x00\xf7\xfd\x8a\x24\x3b\x87\x9c\xa4\x25\x41\xf2\x07\xe0\x07\x80\xe0\x76\x1b\xc8\x95\x8a\x25\x4c\x53\xad\x22\x65\xd5\x95\xbc\x12\xa1\x0a\x84\x4d\xf4\xf4\xee\x6e\xb2\xdd\xaa\x15\x78\x6f\x54\xfc\x5a\xc6\x6b\xbb\xc1\x11\xfc\x96\x5a\xc3\xaf\x27\x90\x0b\xca\x6a\x7a\xb6\xdd\x7a\xef\x04\x89\x2d\x60\x8a\xff\x5f\x27\xbe\xb0\x2a\x89\xef\xee\xa6\x0b\xc0\xef\x8f\x22\xcc\xe4\xe9\x4d\xaa\xa5\x31\x3c\xcc\xa3\xb5\xdd\xe7\xcf\x78\xf3\xff\x9d\x40\xac\x42\xd8\x4e\x00\xb4\xb4\x99\x8e\x69\x74\x42\x68\x64\x1c\x54\xa8\xc4\xcd\x28\xaa\x62\xfa\x40\x54\xd5\xee\x7b\xa1\xc2\x93\xac\xd4\x71\x3f\xa6\x7c\xf2\x00\x44\x5f\xdc\x12\xb7\xf5\x97\xfd\xec\xa4\x62\x15\x65\xd1\xa0\xef\x68\x72\x14\xd1\x2a\x4c\x84\xfd\xe5\xe7\x59\x1f\xb2\x79\xe1\x42\x77\x04\x7f\x9d\xde\xf8\x61\x66\x90\x4a\xe5\xf0\xbe\x7e\x1d\xc1\xeb\x26\xef\x8b\xb7\x38\xa2\x85\xb7\x18\xde\x0f\x6f\x16\x5a\x95\x86\xf2\xaf\xd5\x00\xe4\x72\xfe\xbe\xa8\x6b\x07\xed\x85\xf0\x34\x1e\x32\x27\xcd\x1c\x16\x1f\x6e\xcf\x9d\x61\xf0\x6f\x95\x6d\xfc\xcc\xd8\x24\x5a\x25\x3a\x12\xb6\x91\x70\x7a\x30\xfe\xc9\x52\xdf\xb0\x1e\x0d\x38\x41\xfe\x34\x56\xab\x78\xdd\x6f\xcb\xdd\x30\x57\x58\x4d\xa8\xfc\xbe\xac\xf8\x56\xca\xc0\x9c\xab\xaf\x92\x47\x10\x9a\x16\xd1\x5b\x11\xe1\x27\x0d\x92\x0a\x2a\x26\x87\x86\x32\x1e\x00\xd2\x0d\xd4\xa5\x95\x91\x19\x8c\x54\x9e\xfd\x96\xbb\x5a\x38\x8a\xf8\xcc\x77\xde\x37\x12\xc7\x00\xe5\xb3\x07\x01\x2a\x77\xde\x0b\xd0\x87\x58\x5d\x66\x72\x04\x53\x4d\x60\x6f\x5a\xff\xe0\x21\x95\xea\x24\x95\xda\xde\xf6\x30\x75\x69\xde\x15\xd5\x9d\x56\xa0\x75\xd2\x10\xa1\xf6\x16\x7d\xf0\x48\xa4\xae\xea\xd2\xbc\xe0\x68\x75\xe1\x85\x15\xa8\xb9\x47\x7f\x28\xf7\x6e\x93\xc4\x56\x20\xd6\xd6\x06\xad\xf8\x6a\xae\x6c\x29\x79\xa1\xe2\xa0\x04\x3d\xed\x93\xe0\xdd\x48\x4c\xd6\x0c\x80\x14\x94\xb1\x25\x31\x6f\x89\x33\x37\x1f\x05\x62\xf0\xc9\x6d\x99\x55\xa1\x77\x9e\x86\xca\x3e\xbf\x75\x0a\x3a\xdf\x91\x7c\x5d\xf6\x53\xdf\xe8\x67\xe7\xdd\x17\x49\x18\x4a\x9f\xfc\x5b\x66\x20\x0e\xed\xd0\xc8\xbe\x23\xb5\xb8\xae\xf4\xab\x4d\x9a\xaf\x34\x6b\x30\x44\x26\x57\x42\x43\x63\x8e\x3f\xdf\xdf\xa6\xb2\xbd\xe8\x63\x4e\xbb\xd3\x50\x46\x08\x8e\x76\x58\x65\xb1\x3f\x6b\x08\x51\x22\x62\x86\xbd\xd8\xa8\x30\xe8\xb2\xaf\x9a\x72\x47\xcc\xe1\x08\xc9\x96\x68\xe3\xe5\xdb\xa3\x14\x33\xb1\xc9\x9d\x36\xdf\xc0\x6d\x82\x10\x4b\xce\x22\x85\x91\xb3\x13\x64\x47\x53\x1f\xc2\xf9\xf4\x59\x6b\xec\x37\x68\xd9\xa3\x25\xf0\xf8\x71\x0e\x82\x5c\xea\xf0\xb6\x98\x5d\x4d\x20\xd7\xae\x10\x1d\x71\xed\x8a\xd4\x5d\x14\x71\x5a\xaa\x5a\x93\x68\x5a\x8b\x7d\x5d\x73\xf2\x1c\xcf\xcc\xe3\xbc\x16\x94\xa4\xa2\xf1\xfe\x08\x82\x53\xb6\xd4\x2c\x37\xd8\x32\x66\x7b\x90\x1d\x67\xe5\x51\xa3\x55\xab\x6e\x78\x97\x1d\x46\xa0\xcc\xf3\x93\xd9\xb8\x08\x00\x3f\xd1\xbc\x25\x3e\xa7\xdf\x20\x3b\x9a\x7a\x8e\x31\xa2\x9b\x84\x7a\xf4\xed\x05\xe3\xe4\x96\x48\xc1\x39\xfb\xaa\x41\xe2\x13\x10\x69\x8a\xd4\x6f\x02\xd1\x0b\x60\x1f\xb9\x05\x2e\x6c\x78\xeb\x83\xb5\x1a\xb1\x60\x8f\x62\x83\xaa\xb5\x94\xcb\x6d\x7d\x98\x86\xe3\xa8\xca\x34\x46\xda\x43\x9d\xdf\xb5\xa4\xd9\x0a\xc0\x7a\xa6\xab\x87\xde\xbd\xd9\x50\xc3\x7d\x5f\x73\xdd\xc3\x5a\x5d\x2c\x45\xd6\x2c\xb3\x7e\x2a\xfc\x7f\xc5\x5a\xba\x4b\x06\xff\xc5\xd9\xc9\xf1\x31\xbc\xdf\x28\x03\x2b\x15\x4a\xb8\x16\x06\xd6\x12\xcd\x87\x7a\x07\x70\x71\x0b\x76\x23\xc1\x5c\x8b\xf5\x5a\x6a\xb0\x49\x12\x7a\x24\x7f\x1a\x60\x0a\x89\xd7\x38\x59\xac\x8b\xd4\x7a\x63\x01\x73\xdc\x95\xc4\x84\x6a\x79\xab\x8d\x8c\xe1\x36\xc9\x50\xa1\x27\x3a\x8b\x1b\x3b\x15\x47\x80\x9f\x44\x91\x88\x83\xc9\x44\x45\x69\xa2\x2d\xcc\x50\xe9\x69\x2c\xed\xf1\xc6\xda\x74\x4a\x1f\x6b\x65\x37\xd9\x85\x87\x82\xc7\xbe\x30\x99\x08\xff\x51\xd1\xf1\x3a\x79\x92\x6f\xb5\x8b\xcc\xb1\x4b\x36\x3b\x89\xd2\xb9\x84\x7f\x37\x69\x9d\x64\x76\x47\x0c\xc5\x85\x67\x3a\x61\xbf\x6a\x11\xa3\x27\xbc\x25\xab\x6d\x72\xb2\xa2\x01\xb1\xf4\xac\x60\xfa\xd3\x25\xd7\x75\x17\xe0\xec\xc4\x39\x3b\x8a\xfc\x1c\x0a\x63\xdc\xf5\x90\x6f\x8a\x06\x6d\xc8\x94\x37\x20\xc2\x90\xad\x7c\x91\x64\x71\x00\xa9\x9b\xa5\x5a\x42\x83\xb8\xf4\x55\x86\xb6\xae\xad\x07\xaa\x48\x9c\x5d\x69\x6f\x7b\x9b\x2a\x1f\xb7\x60\x9f\x63\x54\x61\xf5\x86\xe4\x82\x83\x29\x80\x95\x4e\x22\x10\x40\xd6\xf1\xce\x24\xde\x19\x8d\x9d\xe0\x02\xd9\x8f\x08\xdb\x89\xcc\xb7\x79\xf5\xc9\x35\x75\x53\x45\xd5\x79\x29\x8d\xaf\x55\xea\x32\xbb\x53\xac\x31\x54\xa8\xcd\x21\xf0\x2e\x2f\x9d\x39\xea\xaa\xb4\x57\xe6\x71\x3c\x7e\x8e\xd1\x9d\xa3\x43\x23\xd8\x0d\x50\xb8\xa3\x5d\xd0\x1a\x85\xf9\xf1\x0b\x09\xc9\x22\x0b\x50\x16\x10\x7a\x16\xe1\xa8\xdd\x08\x4b\x6c\xc4\x7e\xf1\x86\x78\x1d\xaf\x0d\x28\xfa\xe2\x6b\x82\x80\x3c\x19\x88\x8b\x50\xce\xb0\xde\x97\xd7\xd7\x33\x69\xb0\xcd\xa4\x1b\x83\xd4\x2b\xe1\x4b\x82\x41\x26\x37\xbc\xd8\x25\x6a\x43\x07\x5d\x2b\xf4\x4e\x86\x76\x45\xe3\x08\x8e\x96\x48\xda\x4d\x12\x00\xd9\xdc\x4c\xe8\x16\x02\x14\xd7\x67\xd2\x97\x58\x9e\x75\xae\xec\x51\x9f\x81\xe7\x75\x4d\x67\x1a\x8e\xea\x7e\x59\x00\xb3\x12\x8e\x1c\x39\xb1\x77\xb0\xfe\x46\x06\x67\xf4\xb5\x20\xb2\x90\xc2\xba\x08\x45\xaa\xeb\x3c\xd0\xa3\x94\xbb\x4c\x1b\x4a\x8c\xb1\xbc\x9e\xb5\xa6\xe7\xe5\xdd\xe2\x95\x30\x7f\x67\x52\xdf\x16\x2e\xbe\xe4\x25\xda\xfb\x70\xf6\xda\xe3\x89\x3c\x97\x39\x57\xf5\x91\xa2\xdc\xaa\xe7\x82\xb2\xac\x6d\x8e\x69\x0d\xb3\xe3\x1b\xa9\xd7\xb2\x6b\x2b\x8f\xbc\xdd\xa1\xcb\xac\x8c\x68\x14\x17\xc1\x39\x7a\x36\x94\x5c\xc0\x67\x97\x26\x6f\xb8\xf8\xd5\x6a\x5e\xd5\x53\xc8\xa1\xe0\xc4\x77\x38\x96\xfd\x92\xab\x3e\x0e\xe0\x15\xae\x94\xfa\x7b\x40\xf0\xdc\xd6\x7d\xc7\x97\x71\x57\x03\xd2\x68\x45\x1e\xde\x29\x55\x47\xd0\xe3\x98\xe1\xa6\xe1\xbb\x7a\xac\x8d\x69\xc0\x6b\xfb\xa0\x7b\x50\x77\x76\xf0\x75\x5d\xfa\x6d\x6c\xf9\x25\xaa\x8a\x4b\x07\xf4\x79\x12\x14\xae\x6d\x5c\x96\x8b\xe4\x51\x24\x0d\x3c\x94\x44\x17\xf0\xa8\xab\x43\x07\xff\x4e\x77\x64\xea\x09\xde\xca\x6b\x3c\xdc\x48\x1e\x9d\x4d\x9b\x4f\x22\xd3\xbe\xb6\x60\xca\xed\x0a\x2b\x75\x07\x6c\xf0\x6a\xfb\x21\x1b\x77\xf0\x15\xcd\x1b\xe6\xf7\x79\x7e\x35\x6f\x44\x43\x61\xa4\xda\xa5\x0d\xbf\xb1\x68\xff\xdf\x2f\xf2\x33\xd9\xa8\xca\xd6\xc0\xcd\x67\x3b\xd3\xb1\x8d\xb1\x40\xd4\x53\x5d\xef\xa3\xc1\x58\x49\xa8\x8e\xac\x4a\x42\x3f\x69\xb0\x7b\xce\x5f\xf7\x0e\x48\xf0\x05\x25\xa8\x80\xce\xe2\xc4\x36\x42\x6c\x0e\x5c\x71\x94\x96\x68\x98\x9e\x87\x9d\x62\xf2\xbc\x7c\x5b\x1c\xec\xeb\x10\xe4\xc3\x75\x50\x95\xcb\xb8\x2f\x18\x6b\x6c\x6b\x2d\x2d\x41\xb8\x47\xe3\x3a\xda\xb2\x96\xcd\x2a\x1d\xb2\x5b\x17\xd8\x7d\x73\x38\x71\x77\x89\x66\xcf\x37\x20\x89\xe7\xf4\x98\x02\xcb\x74\xf5\x3e\x61\xea\x3e\xeb\x46\x47\xe1\xc5\x2e\xa1\x76\x76\x54\xd1\x68\xb3\x66\xee\x64\xbc\x39\x6d\x3b\x3d\x4e\x33\xd0\x1a\xd1\x35\x54\x83\x1e\x2e\x34\x3e\x7d\x3e\x38\x38\x80\xdf\x9e\x68\x9a\x5e\xac\x99\x3f\xa5\xa9\x1b\x81\xc1\x62\x27\x27\xf0\x74\x8c\x4f\xc5\x8a\x11\x32\xed\x46\x9d\x56\x32\x7f\x29\x57\x02\xe1\x32\x4b\x5a\x68\x1e\x3d\x82\xfc\xad\xbd\x29\x34\x87\xdf\x4b\xac\x03\x04\xeb\xac\xa9\xd1\x72\x40\xe3\x02\x61\x5d\x81\xca\xed\xe3\xcd\xfa\x18\xd7\x9b\xad\x70\x9d\xec\xe7\xb4\xc7\x8f\xc7\xf8\xea\x0d\x98\xaa\x44\x33\x68\x07\xf4\xda\x37\x1e\x46\x74\x3d\xf4\x29\xb3\x51\x1b\xdd\x33\x66\xeb\x55\x7a\xf2\x5f\x00\x00\x00\xff\xff\xa5\xb4\xdb\x36\x3d\x1f\x00\x00")

func templates_server_parameter_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_parameter_gotmpl,
		"templates/server/parameter.gotmpl",
	)
}

func templates_server_parameter_gotmpl() (*asset, error) {
	bytes, err := templates_server_parameter_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/parameter.gotmpl", size: 7997, mode: os.FileMode(420), modTime: time.Unix(1424149868, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/model.gotmpl": templates_model_gotmpl,
	"templates/modelvalidator.gotmpl": templates_modelvalidator_gotmpl,
	"templates/server/operation.gotmpl": templates_server_operation_gotmpl,
	"templates/server/parameter.gotmpl": templates_server_parameter_gotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"model.gotmpl": &_bintree_t{templates_model_gotmpl, map[string]*_bintree_t{
		}},
		"modelvalidator.gotmpl": &_bintree_t{templates_modelvalidator_gotmpl, map[string]*_bintree_t{
		}},
		"server": &_bintree_t{nil, map[string]*_bintree_t{
			"operation.gotmpl": &_bintree_t{templates_server_operation_gotmpl, map[string]*_bintree_t{
			}},
			"parameter.gotmpl": &_bintree_t{templates_server_parameter_gotmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

