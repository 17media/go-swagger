package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_model_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xc1\x4e\xc4\x20\x10\x86\xef\x3c\xc5\xa4\x59\x13\x4d\xb4\x7b\xdf\xc4\x93\x7a\xf0\x62\x4c\xdc\x07\xd8\xb1\x9d\xb6\xb8\x05\x2a\x4c\x77\xd3\x10\xde\x5d\xa0\x6d\xd6\xf5\xe2\x0d\xca\xf7\x4f\x7f\x3e\xbc\xaf\xa9\x91\x9a\xa0\x50\xa6\xa6\x7e\xb0\x66\x20\xcb\x53\x11\x82\xf0\x5e\x36\x50\x3e\x9b\xea\x83\xad\xd4\x6d\x08\xde\x5f\xef\x48\xd7\x19\x2b\xdf\x97\xd4\x1b\x2a\x0a\x01\x12\x87\x8c\xfb\x69\x48\xbb\xc3\x97\x33\x7a\x57\x24\x0c\x2d\xaa\x99\x29\x0e\x62\xcd\x8b\x01\xab\x23\xb6\x04\x99\xc8\xcb\xf4\x75\xbb\x85\x7d\x27\x1d\x34\xb2\x27\x38\xa3\x83\x96\x34\x59\x64\xaa\xe1\x73\x02\xee\x08\xdc\x19\xdb\x96\x2c\xb0\x31\x7d\x99\xf8\x97\x5a\x72\xac\x16\x0f\xd7\x9c\x92\x6d\xc7\x10\x2f\x75\x22\x68\x46\xce\xa3\x3a\xd2\x30\x99\x11\x2c\x3d\xd8\x51\x5f\x4d\x5a\x7f\x01\x95\x51\x0a\x75\x2d\x16\x07\xaf\x6a\x30\x96\x5d\x08\x72\x5e\xc0\xad\x80\x58\xd7\xa2\x8e\xb5\x37\x47\x9a\xee\x61\x73\xc2\x7e\x24\xd8\x3d\xfe\xa2\x33\x94\x8e\xb3\x93\x58\x43\x6a\x6e\xa0\xb8\xf9\x2e\x16\x7c\x41\x66\x0f\x77\x17\x23\xff\x98\x5f\x41\x8e\x82\x93\xb5\xa7\x1e\x9d\x5b\xdc\x3b\xb6\x63\xc5\xe0\xc5\x5a\x6f\x7d\x1c\x49\x2e\x27\x99\xd4\xd0\xa7\x3b\xfe\x79\x70\x28\x2f\x83\x45\x10\x3f\x01\x00\x00\xff\xff\x80\x30\xad\xe3\x18\x02\x00\x00")

func templates_model_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_model_gotmpl,
		"templates/model.gotmpl",
	)
}

func templates_model_gotmpl() (*asset, error) {
	bytes, err := templates_model_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/model.gotmpl", size: 536, mode: os.FileMode(420), modTime: time.Unix(1424659214, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_modelvalidator_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\x09\x1d\x60\xb5\x89\xb2\x01\xc3\x1e\xd6\x75\x40\x91\x79\x68\x80\x2e\x0d\x92\x6e\xcf\x65\xe4\x93\xcc\x56\x22\x1d\x91\x4a\xe2\x09\xfa\xee\x3b\x92\xa2\x64\xfd\xb1\x63\x27\x18\xb0\x27\x53\x77\xe4\xdd\xef\x7e\xf7\x87\x74\x55\x2d\x31\xe1\x02\x21\x58\x17\x3c\xe7\x9a\xdf\xe3\x3d\xcb\xf8\x92\x69\x59\x04\x75\x3d\xab\x2a\x9e\x40\x74\x8d\x77\x25\x2f\x70\x49\x02\xfa\xc4\xa2\x80\x5f\xde\x41\xb3\x0f\x5b\xed\xbc\xaa\xa2\x2b\xa6\x57\x75\x7d\x02\x01\xad\x3f\xca\x98\x69\x2e\x45\x5d\x07\x27\x40\xdf\x7f\xb3\xac\xc4\xc5\xe3\xba\x40\xa5\xac\x38\x7c\x6b\x6d\x7d\xf7\x0e\x04\xcf\xa0\x9a\x01\x14\xa8\xcb\x42\x18\xe9\xcc\xf8\x46\xb1\x6c\x31\xfc\xc9\xc5\x47\x14\xa9\x31\x3f\x05\xa2\x55\x1f\x8d\xc2\x4a\xb7\xac\x1f\x87\x8a\x3d\xee\x45\xe5\xd5\xcf\x44\xd5\x59\x3f\x0a\x15\x79\xd2\x58\x88\x69\x4c\x8d\xf2\x19\x88\xbe\xb8\x23\xce\xf4\x97\x63\xb3\xc7\xf3\x32\xdf\x99\x3b\xa3\xdc\x8b\x28\xc9\x24\xd3\x3f\xff\x34\x9f\xac\x23\x9f\x42\xe7\xc2\x7e\x2d\x1e\xe3\xac\x54\x54\xce\xad\xf8\xd8\xbc\xee\xc1\xeb\x94\x2f\xc5\xeb\x5d\x0c\xf0\x7a\xf1\x71\x78\xcb\x4c\xf3\x75\x86\x9f\x92\x1d\x90\x5b\xfd\x4b\x51\x6f\x39\x3a\x0a\xe1\x42\xec\xa2\xd3\x68\x9e\xd7\x1f\xce\xe6\xc1\x30\xfc\xaf\x1f\x79\x71\xa9\xb4\xcc\x13\x59\xe4\x4c\xf7\xa6\xde\x04\xc8\x3f\xec\xae\x27\xe8\x33\x02\xb7\xd1\x7e\x2a\x5d\x70\x91\xee\x22\xd3\xf9\x55\x07\xa3\xf7\xa8\x55\xc6\xe3\xa9\x21\x7d\x89\xb8\x54\x37\xfc\x1f\xb4\x12\x02\x59\xb0\xfc\x92\xe5\xf4\x69\x84\x26\x18\x2e\x4c\x6e\x33\x14\xd3\x90\xc2\x71\xcf\x5e\x68\xcc\xd5\xce\xa6\xb5\xda\xa7\x32\x37\xc0\xe1\x5b\xb5\xb1\x7c\x6c\x53\xee\x03\xd4\x68\x9f\x05\xa8\xb5\x7c\x14\xa0\xbf\x04\xbf\x2b\x71\x0f\xa6\xad\x0d\xff\xed\xed\xf8\x3f\xe8\x2e\x03\xe3\x86\xea\x3d\xc3\x9b\x78\x85\x39\xbb\x31\x75\x0a\xa4\x3a\x3b\x03\x65\xe5\xa0\xac\x62\xd2\xe3\x8c\xda\x01\xb8\x41\xfe\xc3\x5b\xfa\xfd\x15\x76\x96\x29\xa9\xdf\xbc\x21\x20\x55\x55\x30\x91\x22\x44\x9e\x7f\x20\xc3\xb4\x5c\x67\x14\xb6\x79\xcf\xc8\x35\x16\x7a\xd3\x75\x0a\x44\x5b\x53\xc0\xae\x32\x85\x0e\x9f\x90\x7a\x8c\xf1\xaa\xb1\xe0\x6a\xe5\x85\xfe\x1c\x3f\xef\x97\x4b\x6e\x88\x67\x59\x67\xa4\x0d\x9c\x5c\x5a\x29\x5d\xf9\x75\x6d\x48\x20\x16\x6c\xb7\x86\x70\xda\x57\x1a\xc1\x8f\x66\x87\x25\x02\xe0\x20\x24\x00\x5b\x31\x13\x98\x9d\x04\xc3\x6f\x7d\x6f\x83\xa4\xcb\x42\x0d\xe3\xb8\x94\xfa\x7d\x96\xc9\x07\x7a\x03\x06\x53\x26\x83\x51\xd9\x85\x93\x83\x79\x38\xea\xe4\xed\x57\x8c\xfb\xa3\x99\x92\xe5\xc6\x36\x38\xa5\x81\xfa\x3b\xd3\xec\xf3\x66\x3d\x1e\x7c\xd7\xa8\x1a\x62\x47\x90\x8c\xc4\x36\xc8\xdc\xcf\x61\xc3\xc9\xe8\x78\xf4\x81\xa9\x85\x8d\x99\xb2\x30\xe6\xe1\x5c\xe6\x6b\xa9\xb8\xc6\xc6\x1a\x99\xb6\xbb\xe7\x63\x43\xce\x4a\x14\x45\xe1\xe4\x54\x1f\x27\xad\x2d\x9a\x0b\x75\xe5\xdf\xe6\x75\xdd\x4f\xf4\xe8\xc9\x6e\x32\xdd\x2f\xb9\x0b\x75\x6e\xf9\x72\xf7\x12\xbd\xdd\xfa\x36\xa6\xef\xc0\x49\x33\x52\x68\x46\x58\x07\x06\x06\xd7\xd1\xf4\x49\xda\x8c\x8f\x9f\x6c\xc2\xfa\xa7\x87\x19\xee\x1f\x77\xbf\x6b\x16\x7f\x63\xd4\x78\x96\x53\xbb\x24\xa1\x29\x84\xcf\x2b\xae\x20\xe1\xd4\xb4\x0f\x4c\x41\x8a\x84\x8d\x8c\x2e\xe1\x76\x03\x7a\x45\x9d\xfc\xc0\xd2\x14\x0b\xd0\x52\x66\x91\xd9\xbf\x30\x45\x2b\x52\x52\xfa\x73\x39\x4f\x57\x1a\x88\xfb\x7b\x84\xa4\xd4\xd6\xd4\x0a\x05\x6c\x64\x49\x99\x3e\x2d\x4a\xd1\xb3\xe4\x5d\x40\x2c\xf3\x9c\x89\xe5\x6c\xc6\x29\xff\x85\x86\x39\x55\x46\x90\x72\xbd\x2a\x6f\x23\xd2\x9d\xc5\x4c\x95\x2c\xfb\xca\xf3\xb3\x54\x9e\x36\xa7\xcf\x5c\xcd\x04\x87\x6c\xa5\x97\x43\x92\xeb\x83\xb6\xfa\x41\x1f\xcc\xec\x40\x72\x33\xea\xd5\x37\xdc\x9c\xc0\xab\x7b\x53\xf5\xa6\x03\xa2\x0b\x8b\xd3\x4f\x2d\xa3\x36\x7d\x5d\x51\xe8\xf4\x28\x48\x20\xf8\xfe\x2e\x68\xb6\x37\x5b\x1c\xf5\xa1\xe5\xd9\xb7\x4a\x7b\xa9\x28\x47\x21\x25\xe4\x43\x49\x3c\x9c\x67\x4c\xa9\x66\x4a\x26\xa5\x88\xc1\x94\xff\x35\xc6\x48\xa5\x59\x38\x39\xbc\x26\xd1\xd6\xbe\x10\x86\xfd\x07\x2e\x66\x3a\x97\x72\x5a\x6e\x42\x78\xbd\xf5\x0f\x53\xd1\xb3\xb3\xe9\x3f\xdb\xd2\x02\x1f\xe6\x03\x75\xb8\x4d\x80\x1f\xde\x1c\x7d\xcc\xa6\x14\xa9\x99\xbb\x46\x75\x8a\xee\xc6\x1c\x61\x8e\xbc\x83\xd1\x5d\x30\xdf\xf9\x76\xb3\x00\xcd\x78\x6c\x86\x06\xa9\x43\x3b\x79\x3b\x4e\xbb\x55\x37\x4e\xe8\x90\x9d\x0a\xf0\x2a\xf6\x1c\xd9\xb4\xb5\x8c\xc1\xf6\x05\xd4\x8b\x6d\x47\x64\xfb\x12\xd1\x39\x31\x89\x78\x32\xca\x89\xcc\x34\xe3\xaf\x73\x69\x83\x3f\xe0\x12\xea\x42\x26\xc6\x26\xee\x80\x7f\x03\x00\x00\xff\xff\x5a\x9d\x54\x7b\x90\x10\x00\x00")

func templates_modelvalidator_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_modelvalidator_gotmpl,
		"templates/modelvalidator.gotmpl",
	)
}

func templates_modelvalidator_gotmpl() (*asset, error) {
	bytes, err := templates_modelvalidator_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/modelvalidator.gotmpl", size: 4240, mode: os.FileMode(420), modTime: time.Unix(1424659206, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_builder_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\x6d\x6f\xdb\xb6\x13\x7f\xfd\xf7\xa7\x20\x8c\x16\x90\x0a\x55\xf9\xbf\x0e\x90\x17\x59\xd3\xa1\xd9\xb0\xae\x48\x8a\xed\x45\x10\x0c\x8c\x74\xb6\xb9\xe8\xa9\x24\x95\xcc\x0d\xfc\xdd\x77\xc7\x07\x89\xb2\x64\xd7\x6e\x52\xcc\x08\x10\x89\x3c\xde\xf3\xfd\xee\xa8\x86\x67\xf7\x7c\x09\xec\xe9\x29\xfd\x64\x1f\x37\x9b\xd9\xec\xe4\x84\x7d\x5e\x09\xc5\x16\xa2\x00\xf6\xc8\x15\x5b\x42\x05\x92\x6b\xc8\xd9\xdd\x9a\xe9\x15\x30\xf5\xc8\x97\x4b\x90\x4c\xd7\x75\x91\x12\xfd\xfb\x5c\x68\x51\x2d\x71\xd3\x9f\x2b\xc5\x72\xa5\x59\x23\xeb\x07\x60\x8b\x56\x1b\x56\x2b\xa8\xd8\xba\x6e\x99\x84\xb7\xb2\xad\x06\x9c\xbc\x08\x96\xd5\x65\xc9\xab\x7c\x36\x13\x65\x53\x4b\xcd\xa2\x19\x63\x73\xa5\x25\x72\x57\x73\x7a\xae\x40\x9f\xac\xb4\x6e\xcc\xcb\x52\xe8\x55\x7b\x97\xe2\xa1\x93\x8c\xab\x96\x17\x7f\x8b\xf2\x64\x59\xbf\x75\x6c\x0f\xa1\x39\x51\x0d\x64\x87\x11\x6a\xb9\x28\xf5\x41\xa4\xa5\xc8\xf3\x02\x1e\xb9\x84\x23\xc9\x4f\x14\x64\xad\x14\x7a\x3d\x9f\xe1\xc1\xa7\x27\xc9\x2b\x8c\xcf\xab\x7b\x58\x27\xec\xd5\x03\x2f\x5a\x60\xa7\x67\x2c\xbd\x34\xce\x51\x18\x2d\x22\xa2\xed\xcd\x06\x1f\xd0\xdf\xa2\xd2\x0b\x36\x7f\xfd\x65\xee\xc8\x1d\x09\x54\x39\x3e\xc5\x26\xb8\x18\xed\xf3\xa6\xf9\xc8\x4b\xdc\x3c\xff\x74\x49\xef\x97\xd5\xa2\x4e\x2f\x40\x65\x52\x34\x5a\xd4\x15\xd2\xea\x75\x03\x23\x52\x74\x41\x9b\x69\xf6\x84\x3c\xc9\x6d\xac\xff\xbd\xa1\xf7\xf4\xa2\xce\xda\x12\x2a\x8d\xfb\x59\x5d\x69\xf8\x47\x77\xfb\xbd\x8d\xe9\x3b\xbb\x85\x44\x2b\x0c\x75\x01\x52\x39\xa2\x92\x37\x37\x36\xd6\xb7\x14\xe2\xf4\x83\xdd\x46\xc2\x45\x2d\x4b\xae\x3d\x1d\xb3\xa1\x48\xaf\x60\x29\xf0\x71\x1d\xb8\x8a\x98\x2b\xd4\x01\x7d\x63\x4d\x7d\x57\x70\xa5\xac\x05\x6e\x4b\x62\x02\xd2\x39\x92\xcb\x49\x4f\xbb\x88\x22\xf0\x75\x8e\x47\x7e\x83\x5c\xf0\xcf\x68\xff\x66\x33\xc7\x44\x2e\x81\x91\x33\x8c\x90\x49\x76\x2e\x8c\x5e\xb4\x0c\x3c\x1e\x28\xf6\x49\xd6\x79\x9b\x4d\x2a\xe6\xb6\x86\x8a\x35\x7e\xf1\x68\xc5\x3a\x76\x5e\x31\xbf\x30\xad\xd8\xb5\x4b\xb9\x0b\x58\x88\x4a\x50\xf8\x7d\x62\x89\x05\xa6\x9a\xfa\x89\x2b\x91\x9d\xb7\x7a\x35\xa1\x39\x2d\x0f\xb4\x5e\xb4\x55\x46\x2c\xb0\xba\xb9\x66\x9a\xdf\x83\x62\xad\x02\x59\x21\x39\xc3\x70\xb2\x06\xcf\x3e\xd6\x32\x37\x2f\x12\x74\x2b\x2b\x6b\xad\xa8\x32\xd1\xf0\x02\x05\xa3\x14\x81\xd8\x01\x92\xa2\x8e\x9b\x28\x03\x73\x4a\x64\xdc\x30\x7e\xc4\x62\x62\x77\xa4\x93\xd9\x19\x59\x6f\x54\x22\x35\x22\x9b\x4a\x09\xb3\xff\x63\x16\x11\xce\x79\x39\x9b\x4d\xc2\x40\xca\x5a\xc6\xbd\x57\xbc\xc5\x98\xea\xbf\xc2\xfa\x39\x26\x73\xc4\xc6\x7b\x84\xbb\xef\x35\x12\xed\x43\xb8\xad\x89\x01\xe3\x8d\x60\x58\xe1\xa4\x86\xd5\xc0\xc0\xaa\xc8\x91\x40\x58\x14\xc5\x9d\xeb\xba\x95\x99\xaf\xf6\x7d\xee\x38\xc0\x0d\xd3\x69\xf2\x7b\x43\x08\x6d\xb3\x63\xe4\x14\x57\xa9\x4c\x01\x16\x29\xa9\x54\x7b\x6a\x5f\xe3\x26\x8d\x9d\xb2\x1f\x5a\xc4\xf8\xe0\x74\x4f\xdd\xa5\x5d\xd7\x8f\xa6\xe5\x84\x1d\x2b\x9d\x24\xb1\x46\x14\x6a\x1f\x8b\x5d\xa7\x46\x4e\x40\x7b\xaf\x41\x3e\xc0\x7b\xf2\x14\xc3\x1e\x97\xf1\xa2\x40\xff\x9b\x96\x86\x21\x02\xbf\x2e\x21\x03\xf1\x00\x79\x42\xa6\x4a\xa0\x25\xce\x72\x58\xf0\xb6\xd0\xde\x13\x96\xdf\x5d\xab\x4d\x33\xcc\xf0\x38\x7a\x8d\x9e\x25\xab\x1f\x5d\x7e\x53\x23\x45\xba\x40\x28\xfd\x4c\x18\x0d\x32\x5e\x81\x6a\x30\x12\xf0\x27\x16\x2e\xc8\x84\xbd\x71\xab\x5f\x5a\x50\xba\x8b\xa8\x6d\xe6\x3f\x3b\xec\xf4\x79\x48\x41\xf0\xf9\x8b\x36\xd8\xb4\xf0\x08\x3b\x23\x19\x26\x45\xae\xac\x29\xd2\x85\xe8\xcd\x56\x2f\x88\x3d\xdf\x28\xde\x86\x63\xec\x0f\xff\xb3\xc2\xd8\x88\x4f\xea\xe5\x58\xdd\xae\x9c\x1e\x96\xd7\x10\x98\x5b\xa5\xeb\xd2\xe9\xc5\xb0\x99\x89\x9c\xeb\x5a\x1e\xa1\xe0\x90\x79\x64\x20\xc8\x63\x82\x63\xeb\x34\xb7\x14\x49\x2f\xc5\x6f\xfc\xe1\x17\x62\xd3\xf4\x76\x9a\x93\x9e\xe7\xb9\x11\xe0\x39\x07\xbc\x7c\x1c\x1c\x2f\xf0\x3b\x10\x86\xc2\x95\x56\x50\xd1\xa1\x2d\x47\x18\xed\xa5\x60\x58\x6c\x56\x92\xde\x0f\x5c\xb2\xb6\x0a\x82\x7e\x73\x6b\x1d\x31\xdd\x39\x71\x15\x6b\x70\x6c\xec\x8e\xfe\x77\x76\xc6\x2a\x51\x18\x41\x6c\x28\xe6\x0c\xc1\xab\xc1\x22\x8a\xc2\xd5\xc4\xf4\xb2\x09\x46\x73\xc2\xa0\x1d\xe8\xd3\x77\xcf\xc3\x94\xeb\x7a\xe0\x73\x95\xf3\x8c\xf6\x29\xb7\xab\x83\x1e\xa0\xa7\x81\xe7\xe7\xea\x48\x4c\xf6\xe9\x17\x42\xf7\x61\x6a\x79\x90\x7c\xae\x66\x8e\xcf\x48\x39\x1a\x20\xbf\xd2\x28\x5b\x40\x35\xe0\x10\x5b\xfd\x70\x13\x45\xff\xdf\x09\x76\x60\x82\x9a\x18\x36\xb3\x6e\x85\x4a\xd4\xc0\xe3\x22\x9a\x97\x42\x29\x02\xb2\xb0\x9e\x4e\xd9\x6b\x35\xf7\x03\x80\x4a\x7f\xa9\x45\xb5\xad\x2f\xfe\xc5\x54\xa1\x03\x88\x47\x3c\xc0\x2b\x89\x26\x18\xb2\x45\x14\x36\x31\xce\x96\xe8\xb7\x2a\x68\x71\x22\x3f\xa2\x40\x07\x52\xa2\x8e\xc9\xe5\x45\x37\xa7\x1c\x09\xf3\xc6\x49\x3b\xf1\xb6\x17\x67\x8d\x3c\xef\x07\x8d\x5a\xaa\xce\x50\x02\x1d\x3e\xd8\xea\x1a\x36\x4d\xf6\x62\x21\xa8\x55\xb8\x3c\x67\x2a\x5b\x01\x22\xc5\x11\x56\x8f\xc4\x46\x8e\x47\x38\xf4\x9b\x3b\x84\x2f\xa6\x6b\xb3\x1f\x0f\xf6\xdd\x3c\x3b\x60\xe6\x80\x99\x86\x86\x5d\x75\x28\x41\x51\xff\xc5\x74\x2b\x71\x3a\x8b\xbe\xc5\x31\xb6\x17\x0e\x66\xf1\xdc\xea\x49\x87\x6d\x35\x79\xbd\x6d\x6a\x2a\x6c\xd7\xd9\xca\x90\xba\x95\x03\x70\x81\x7e\x78\x11\x04\x53\x2d\xd6\x49\xf3\xd3\x99\xbf\xdc\x4c\xcc\xdd\xd6\x80\x1b\x92\x72\x8b\x95\xe7\xe3\x90\x76\x24\x91\x8d\x44\x9b\xb0\xa6\x1f\x77\xf1\x2e\x88\xe3\x25\xcf\xe0\x69\xd3\xe7\xca\xee\x4c\x19\x63\x8a\xe1\x17\x6f\xe2\x1e\x52\x86\x1a\x86\x73\xf2\x2e\x15\x7b\x1a\x17\x71\x63\xb0\x77\x2b\xde\x3c\x13\x9b\xef\x38\x2f\xbf\xa4\xe6\xc8\x2e\x66\xdb\x9a\x87\x6f\x1b\x87\x48\x8e\xa9\x55\x3f\x18\x1a\x67\x5b\xb0\xe3\xcf\xda\x5e\xee\x5b\xd6\xb0\x80\xfc\x5d\x72\xaa\x76\x4a\xba\xbb\x99\xfb\xda\x31\x65\x13\xca\x89\x4a\x7f\xfd\x53\x5d\xff\x9e\x2c\x8f\xae\x31\xf7\x95\x31\xe8\xed\xdf\x2e\x07\xcf\xc1\x57\xc2\x5f\x09\x2b\x75\x5f\x02\x81\x22\x83\x2a\x28\xf5\xb8\x06\x06\x92\x07\x3b\xe7\x45\x81\xe0\x24\x70\x5e\xf9\x8a\x06\x8e\x0b\x23\xbc\xed\xf6\xd5\xe1\xf2\x6c\x9b\x80\x72\xee\xd0\x81\x65\x22\x1b\x5e\x32\x37\xfc\xc4\x30\xcc\x0d\x7f\x9d\x7f\xb9\xdc\x08\xe5\x1c\x9c\x1b\xdd\x5c\xe4\x73\x63\x38\x59\x7d\x3b\x35\x3c\x83\x17\x48\x8d\x81\xe4\xff\x36\x35\x82\x2f\x24\x3f\x32\x35\xdc\x38\x14\x8c\x17\xe1\x77\xae\x2e\x33\xba\xfb\xfd\x77\x8e\x18\xbd\x98\xc9\xf9\x22\x0a\x85\x26\xec\xae\xae\x0b\x3b\x44\x20\x52\xd0\x3c\x36\x76\x96\xff\x4e\x17\x87\x53\xd9\x98\x8c\x9a\x9c\x63\xfb\x8e\x23\xbe\x47\x7e\xec\x9b\x9c\x38\xbb\x8f\x7f\x83\x21\xb3\xf7\x1e\x36\x06\x8e\x3e\x75\x2c\x56\x09\xc3\x0e\x71\x3a\x15\x4a\xcf\xe8\x26\x30\xf6\xb6\x0f\x84\x39\x49\x01\x38\xdc\x81\x63\x43\xbc\x7f\xc6\xd2\xfd\x87\xce\x81\x15\x7b\xc8\x58\xf0\x25\xf4\x23\x3c\x5e\xd5\xad\xe6\x77\x05\xb8\x8f\xa2\x13\xce\x27\x9c\x48\xc6\x1c\x13\x12\xd7\xcf\xd5\x84\xf2\x5b\x73\xfe\x3e\x97\x8f\xea\x3b\xcc\x89\x78\xcf\xe5\x61\xeb\xf3\xcc\x5e\x31\x37\xc1\x7c\xe3\xaa\xb0\xff\x6a\x83\xb6\x0f\x6b\x70\xc2\x74\xe7\xb4\x09\xeb\xa7\xef\x2b\xf1\xb0\x12\x0f\xd7\xec\x07\x2a\x33\xf1\x45\xcd\x43\xc2\xbf\x01\x00\x00\xff\xff\xc0\x4b\xe2\x5a\x80\x19\x00\x00")

func templates_server_builder_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_builder_gotmpl,
		"templates/server/builder.gotmpl",
	)
}

func templates_server_builder_gotmpl() (*asset, error) {
	bytes, err := templates_server_builder_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/builder.gotmpl", size: 6528, mode: os.FileMode(420), modTime: time.Unix(1424660755, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_operation_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xdd\x6f\xe3\x44\x10\x7f\xf7\x5f\x31\x44\xc7\x91\x54\xc6\x7d\x2f\xba\x07\x28\x88\xde\x03\x47\xd5\x56\xf0\x88\xb6\xeb\x49\xbc\xd4\xde\x75\xf7\x23\x69\x88\xfc\xbf\x33\xfb\x61\x27\x6e\xdc\x80\x28\x94\x93\x4e\xba\x75\x76\xe6\x37\xbf\xf9\xcd\xc7\xb6\x65\xfc\x81\xad\x10\x76\xbb\xe2\x3a\x1e\xbb\x2e\xcb\xce\xcf\xe1\xae\x12\x06\x96\xa2\x46\xd8\x30\x03\x2b\x94\xa8\x99\xc5\x12\xee\xb7\x60\x2b\x04\xb3\x61\xab\x15\x6a\xb0\x4a\xd5\x85\xb7\xff\xa1\x14\x56\xc8\x15\x5d\xf6\x7e\x8d\x58\x55\x16\x5a\xad\xd6\x08\x4b\x67\x03\x54\x85\x12\xb6\xca\x81\xc6\xaf\xb5\x93\x23\xa4\x3e\x04\x70\xd5\x34\x4c\x96\x59\x26\x9a\x56\x69\x0b\xf3\x0c\x60\x26\xd1\x9e\x57\xd6\xb6\xb3\x8c\xbe\x76\x3b\xcd\x24\x91\x7e\xf7\x80\xdb\x1c\xde\xad\x59\xed\x10\x2e\x3e\x40\xf1\x31\x78\x18\x4a\xc1\x1b\xf9\xeb\xae\xa3\x03\x91\x10\xd2\x2e\x61\xf6\xe5\xe3\x2c\x99\x27\x13\x94\x25\x9d\x16\x21\x63\x92\xe0\xb2\x66\xc6\x7c\x62\x0d\x5d\x5f\x11\x85\x9a\x68\x91\x23\xea\x25\xe3\x94\x83\xa2\x74\x2b\x66\x81\x33\x09\x55\xb8\x06\xc2\x12\xa5\xf7\xbc\x72\xc4\xf9\xc0\x1d\x5a\xa6\x59\x63\x32\xbb\x6d\xf1\x2f\x91\x77\x81\x8b\x58\x42\xf1\xad\xb3\x95\xd2\xe2\x0f\x2c\x03\x41\x62\x15\xad\xbd\x8c\xa5\xe3\x68\x80\x91\x76\xc6\xd5\x16\x88\x0d\xf1\x40\xad\x95\x2e\xe0\x47\xb4\x26\xa8\xa9\xf1\xd1\xa1\xb1\x29\x3c\x50\xe9\x36\x58\xd7\xfe\xff\xa0\x35\x72\xa7\x85\xdd\x06\x41\xb8\x68\x59\x3d\x44\xbe\x75\x9c\xe0\xcd\x4f\xaa\xc4\xba\xe7\x38\x8f\x57\xd7\x01\xab\xeb\xc6\x69\xc4\x5f\xf3\x5e\xc4\x33\xdf\x41\x3d\x6a\xd7\x2d\x20\x39\xdf\xa0\x75\x5a\x9a\x4b\xd5\xb4\x35\x3e\xfd\x7c\xff\x3b\x72\x1b\xac\x83\x17\x39\x8d\x03\xe7\x31\xa3\x45\xac\x4e\x6d\xf0\x5f\xe1\x12\x30\x0f\x0a\xbe\x07\x7f\xad\xc2\xaf\xd5\xaf\xa7\xf4\x7f\xe8\x35\x84\x9e\x94\x27\x9c\xe2\x2e\xf8\x84\x9b\xb1\x3f\x70\x8d\x34\xaa\x5e\x2b\x89\x1b\xf0\x83\x59\xf4\x6d\x1d\xc7\x04\x27\x87\x42\xb5\x7e\xc4\x85\x92\xd9\xd2\x49\x7e\x8c\x3b\xe7\xf6\x09\xce\x1a\x51\x12\xd2\x86\x69\x2c\x2e\x15\x0d\xc9\x93\xcd\xd3\xbc\xe9\xe9\x51\x5a\xc0\xd9\x33\x7e\x7e\xa2\x74\x50\x12\xde\x8f\xaf\x76\x09\xf2\x02\x28\x56\x9e\x8a\xaf\x2f\xfa\x00\x21\xe5\x28\xdd\xf7\x8a\xdf\x5a\xea\xa2\x55\x50\x6f\xf4\x15\xc5\x99\x98\x6d\x30\x56\x3b\x6e\x43\xfc\x14\x68\x2a\x9f\xa1\x6b\xfa\xf2\xa4\x66\x80\xa9\x32\xed\xcb\x71\x75\x4a\x04\x4f\x3c\xa8\x4a\x95\xa7\x2e\xe2\x28\xd6\xa8\x13\xab\x67\xf2\x2c\xe0\x16\xf5\x1a\xaf\xee\xee\xae\xe7\x3a\x95\xef\x06\x4d\xab\xa4\xc1\x5f\x69\x3f\xa0\xce\x41\xc3\x59\xfa\x3d\xb4\xfb\x22\x4a\xaa\x9c\xc5\x1c\x7e\xf3\xcb\xf6\x28\x4a\x9f\x5c\x71\xe3\xad\x3e\xca\xa5\x9a\x53\x5f\x4e\xae\x36\x17\xf6\x4f\xe8\xdd\xd3\x50\x83\xd3\xdc\x53\xf2\xb8\xbe\xd3\x09\xce\x7b\x7e\xf1\x01\xa4\xa8\x03\x31\x38\x45\x27\x64\x56\x52\xa6\x04\x91\x50\x68\x3d\xc4\x69\xcf\xfb\x9c\x08\x70\x11\x80\x62\xdb\xd0\xd1\xcf\xc1\xb0\x27\x23\x4d\x1f\xf8\x11\xf6\xbb\x05\x66\xc3\x12\xdf\x75\xb3\x3e\xaf\x7e\x10\xe3\x57\x31\x3f\x5a\x47\x34\x52\xc2\x7e\x65\x40\x3d\xc4\xe7\x92\xfe\xd1\x3c\xd5\xf5\x96\xe6\x69\x6c\xdb\xb7\xda\x68\x38\x53\xfa\x27\x85\xfb\x4e\xc8\xf2\x17\xff\x38\xa5\xfa\x0d\xfa\xe5\xcf\x3a\xef\xfd\x31\xc6\xb0\x1d\x42\x16\x24\x71\xbf\x28\xbe\x19\xc9\xee\xd3\xb8\xa7\x30\xfb\x4d\xf8\xdf\x54\xe1\xa5\xc7\x71\x6a\xef\x6a\xdc\xbf\x02\x9e\xeb\x94\xcd\x45\xba\x9f\x92\x2f\xcd\x52\xf1\xd2\x0e\x9d\x54\x6a\x88\x38\x74\x4b\x28\x31\xe3\xd6\x85\xa2\xa6\xbf\x15\x0e\x1e\x8f\x37\xec\xe1\xec\xf5\xb0\x2f\x08\x3d\xd1\x20\x07\xaf\xd0\xdf\x2c\xd0\x64\x13\xff\xa3\x2a\x0c\xaf\xd9\x67\x23\xfd\xdb\x2b\x9f\xde\xec\x3f\x03\x00\x00\xff\xff\x6a\x9d\x7c\x9d\xd5\x0b\x00\x00")

func templates_server_operation_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_operation_gotmpl,
		"templates/server/operation.gotmpl",
	)
}

func templates_server_operation_gotmpl() (*asset, error) {
	bytes, err := templates_server_operation_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/operation.gotmpl", size: 3029, mode: os.FileMode(420), modTime: time.Unix(1424655055, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_server_parameter_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x59\x4b\x6f\x1b\xb7\x13\xbf\xeb\x53\xf0\x2f\xe4\x1f\x48\x8e\xb2\xce\xa1\xe8\xa1\xa9\x0b\x34\x89\x8b\x08\x48\xd2\xd4\x4e\x7c\x09\x82\x86\xde\xa5\x24\x36\xfb\x32\xc9\xb5\xac\x08\xfe\xee\x9d\xe1\x63\x9f\xdc\xb5\x24\x3b\x05\x72\xb2\x96\x1c\x0e\x7f\xf3\x9e\xa1\xb7\xdb\x88\x2d\x78\xca\xc8\x38\x17\x3c\xe1\x8a\x5f\xb3\x6b\x1a\xf3\x88\xaa\x4c\x8c\x6f\x6f\x47\xdb\x2d\x5f\x90\xe0\x2d\x4f\xdf\xb0\x74\xa9\x56\xb0\x02\xdf\x4c\x08\xf2\xcb\x09\xb1\x84\xac\xda\x9e\x6c\xb7\xc1\x7b\x8a\x64\x33\x32\x86\xdf\x6f\xb2\x90\x2a\x9e\xa5\xb7\xb7\xe3\x19\x81\xef\x0b\x1a\x17\xec\xf4\x26\x17\x4c\x4a\xbd\xac\x57\x6b\xdc\xa7\xcf\x35\xf3\xff\x9d\x90\x94\xc7\x64\x3b\x22\x44\x30\x55\x88\x14\x57\x47\x88\x86\xa5\x51\x85\x8a\xde\x0c\xa2\x72\xdb\x07\xa2\xaa\xb8\xef\x85\x0a\x6e\x52\x4c\xa4\x7e\x4c\x76\xf3\x00\x44\x5f\xcc\x11\xc3\xfa\xcb\x7e\x7a\xe2\x29\x4f\x8a\xa4\xd7\x76\xb8\x39\x88\x68\x11\x67\x54\xfd\xfc\xd3\xc4\x87\x6c\xea\x4c\x68\xae\xd0\x5f\xa7\x37\x61\x5c\x48\x70\xa5\x72\x79\x5f\xbb\x0e\xe0\x35\x9b\xf7\xc5\xeb\xae\x68\xe1\x75\xcb\xfb\xe1\x2d\x62\xc5\xf3\x98\xfd\xb9\xe8\x81\x5c\xee\xdf\x17\x75\xed\xa2\xbd\x10\x9e\xa6\x7d\xea\xc4\x9d\xc3\xe2\xc3\xf0\xdc\x19\x86\xfe\x5b\x65\x9b\xb0\x90\x2a\x4b\x16\x99\x48\xa8\x6a\x24\x1c\x0f\xc6\x3f\x34\xd5\x1d\xda\xc3\x05\x43\xa8\x3f\xa5\x12\x3c\x5d\xf6\xe9\xd2\xdc\x2b\x77\x03\x5f\x81\x96\x31\x0f\x7d\xe9\xf1\x1d\x63\x91\x3c\xe7\xdf\x98\x5e\x01\x8c\x82\x26\xef\x68\x02\x9f\xb8\x88\xb2\xf0\x14\x2d\x1b\xb3\xd4\x8f\x68\xda\x8d\xd8\xb9\x62\x89\xec\x0d\x59\xbd\x7b\x97\xdd\x5a\x38\x5c\xa0\x5a\xce\xfb\x86\xe4\x10\x20\xbb\x7b\x10\xa0\x92\xf3\x5e\x80\x3e\xa6\xfc\xaa\x60\x03\x98\x6a\x04\x7b\xfb\xf7\x0f\x1e\x5b\xb9\xc8\x72\x26\xd4\xc6\xe3\xa9\x73\xf9\xde\x95\x79\x3c\x01\xda\xc9\x63\x80\xea\xad\xfe\x24\x40\x92\xba\xa8\x73\xf9\x52\x87\xad\x89\x33\x28\x45\x4d\x1e\xfe\x98\xf6\xb2\xc9\x52\x45\x01\x6b\x8b\x41\x2b\xbe\x9a\x27\x5b\x42\x5e\xf2\x34\x2a\x41\x8f\x7d\x14\x9a\x1b\x92\xb1\x9a\x02\xc0\x05\x59\xaa\x90\x2c\x98\xc3\xce\xcd\x05\x05\x0c\x21\x9a\xad\x50\x3c\x0e\xce\xf3\x98\xab\x17\x1b\x23\xa0\xb1\x1d\xd2\xd7\x69\x3f\xf9\x56\x3f\x1b\xeb\xbe\xcc\xe2\x98\x85\x68\xdf\x32\x15\xe9\xd0\x8e\x25\xf3\x5d\x29\xe8\xba\x92\xaf\xb6\x29\xbf\xe1\xae\x84\x10\x19\x5d\x53\x41\x1a\x7b\xfa\xf3\xc3\x26\x67\xed\x43\x17\xd6\xed\x4e\x63\x96\x00\x38\xe4\xb0\x28\xd2\x70\xd2\x20\xc2\x44\xa4\x3d\xec\xe5\x8a\xc7\x51\xd7\xfb\xaa\x2d\x73\xc5\x94\x1c\x81\xb3\x65\x42\x06\x96\x3d\x50\x69\x4f\x6c\xfa\x4e\xdb\xdf\x88\x61\x02\x10\x4b\x9f\x05\x17\x06\x9f\x1d\x81\x77\x34\xe5\x41\x9c\xcf\x9e\xb7\xd6\x7e\x25\x2d\x7d\xb4\x08\x9e\x3c\xb1\x20\xc0\xa4\xc0\xd0\x42\xee\xb8\x67\xb5\xd1\xf0\x7a\xf4\x03\xb3\x01\x7e\x78\x0d\xc8\xd1\x0f\xaf\x51\x15\x33\x17\xc3\xa5\x1a\x6a\x14\x4d\x4d\x6a\x3f\xa8\x39\xc0\x14\xf0\xd8\x1c\x50\x0b\x58\x14\x5f\x06\xbf\x47\xd1\xa9\xd6\xe2\xc4\x2a\x73\x9e\x6a\x5d\xa1\x8e\x27\xe5\x55\x83\xa5\xad\x6e\x14\x93\x39\x06\xa0\x4c\xed\xcd\x5a\xf1\x00\x00\x3e\x41\xf5\x25\x3e\x23\x5f\xaf\xe7\x34\xe5\x1c\xf2\x96\x6e\x82\xf2\xc8\xeb\x05\x63\xe8\xe6\xe0\x9e\x53\x6d\xc7\x86\x83\x9f\x10\x9a\xe7\x10\x16\x4d\x20\x62\x46\xb4\x8d\xcc\x01\x13\x52\x9a\xf5\xc1\x52\x0d\x68\xd0\x23\x58\xaf\x68\x2d\xe1\xac\xae\x0f\x93\x70\x18\x55\x99\xe2\x50\x7a\x52\xb9\x71\x23\xa1\xb6\x82\xb3\x9e\x05\xeb\x61\x79\x6f\x6f\xa8\xe1\xbe\xaf\xba\xee\xa1\xad\x2e\x16\x97\x51\xcb\x8a\x90\xd3\xf0\x2b\x5d\x32\xd3\x80\xe8\x9f\xb0\x3b\x3a\x3e\x26\x1f\x56\x5c\x92\x05\x8f\x19\x59\x53\x49\x96\x0c\xd4\x07\x72\x47\xe4\x72\x43\xd4\x8a\x11\xb9\xa6\xcb\x25\x24\x11\x95\x65\x71\x80\xf4\xa7\x11\xa4\x90\x74\x09\x9b\xee\x5c\xc2\x97\x2b\x45\x20\xff\x5d\x33\x48\xb6\x4a\xb3\x5a\xb1\x94\x6c\xb2\x02\x04\x7a\x2a\x8a\xb4\xc1\xc9\x5d\x41\xc2\x2c\x49\x68\x1a\x8d\x46\x3c\xc9\x33\xa1\xc8\x04\x84\x1e\xa7\x4c\x1d\xaf\x94\xca\xc7\xf8\xb1\xe4\x6a\x55\x5c\x06\x40\x78\x1c\x52\x59\xd0\xf8\x1f\x9e\x1c\x2f\xb3\xa7\x96\xd5\x2e\x34\xc7\x26\xd9\xec\x44\x9a\xf0\x28\x8a\xd9\x1a\xca\x9a\x86\x80\xa2\xec\x76\xd0\x35\x3b\xe3\x91\xb6\x9b\xa0\x29\x68\xfa\xd1\x57\xb6\x99\x91\x47\x3a\x5c\xd1\xbf\x82\xb9\x16\x53\x5a\xe7\xc4\x6d\x5d\x6a\x40\x73\x50\x8f\x16\x64\xfc\xff\xab\xb1\x25\xb7\x24\xc6\x84\x53\x6d\x26\xb4\x72\x4c\xa5\x34\x8d\xa3\xee\x21\x25\x68\x50\x3b\xbc\x24\x34\x8e\xb5\x8e\x2f\xb3\x22\x8d\x48\x6e\x76\xb1\xca\xe0\x22\x1c\x7d\x5d\x80\xa6\x6b\xe7\x09\xd6\x2a\x9d\x5b\x91\xb7\xda\xe4\x3c\x04\x16\xda\xe2\x10\x53\xa0\x00\x92\x5d\xea\x50\x8a\xc8\x42\x64\x09\xa1\x04\x15\x12\x9c\x31\xe8\x26\xa5\x1a\xc1\x01\xe6\x47\x04\x13\x47\x11\x2a\x5b\x97\x8c\x1e\x4c\xc3\x2b\x5d\xcd\x79\xc5\x64\x28\x78\x6e\xf2\xba\x11\xac\xb1\xe4\xc4\xd6\x01\xf0\xde\x16\x55\x8b\xba\x2a\xfa\x95\x7a\x8c\x17\xbf\x80\xd8\xb6\xe8\x40\x09\x6a\x45\x30\xd8\x41\x2f\xa0\x0d\x67\x1c\xf8\x02\x77\xd4\x24\x33\xc2\x15\x01\xe8\x45\x02\xab\x6a\x45\x15\xfa\x22\x8c\x94\x37\xe8\xd5\xe9\x52\x12\x8e\x5f\xba\x81\xa0\xc4\xa6\x02\x7a\x19\xb3\x09\x74\x02\x65\x63\x7b\xc6\x24\x4c\xa2\xd8\x4b\x30\xb1\xa0\x21\x43\x18\xa8\x72\xa9\x0f\x9b\x34\x2d\xf1\xa2\x35\x07\xeb\x14\xa0\x57\x50\x0e\xd5\xb1\x92\x30\xb5\xca\x22\x82\x3a\x97\x23\xec\x4f\x08\x46\xf5\x19\x0b\x19\x14\x67\x61\x85\x3d\xf2\x29\x78\x5a\x97\x74\x22\xc8\x51\xdd\x2e\x33\x22\xb2\x02\x02\xeb\xa8\x72\x64\x98\x2c\x54\xb8\x62\xd1\x19\x6e\x78\xd0\x9b\x7e\x5a\xa2\x7f\xa6\x6c\x3d\x69\x6d\x4f\x5d\x7b\x11\xbc\xa6\xf2\xaf\x82\x89\x8d\xb3\xe5\x95\x3e\x22\x82\x8f\x67\x6f\x02\xbd\x61\x53\x96\xb1\x89\xcf\xfa\xf5\x4e\xc5\xd3\xa3\x78\xba\x93\x79\xed\x4a\xc8\x69\x90\x1a\xdf\x32\xb1\x64\x5d\x55\x05\x68\xec\x8e\xb7\x4c\xca\x18\x06\x72\x1a\x9d\x83\x61\x63\xa6\xab\xf7\xe4\x4a\xda\x49\x4c\xbf\x6b\x59\xb5\xd9\xc1\x59\x4e\xab\xda\x4a\xec\xb4\x00\x74\xdf\x01\x85\xb9\xd5\xe8\x67\x2f\x3c\xaf\x81\x11\x13\xdf\x03\x51\x60\x58\xef\x80\xa6\x8c\xd1\x1a\xae\xc6\x40\xf3\xf0\x16\xac\xe6\x0a\x8f\x15\xfb\x47\x8f\xff\xd2\xbc\x6d\x88\x3d\x26\xbe\x07\xd8\x07\xb5\x7d\x07\x6e\xd7\xfe\x7b\x43\xb5\xbd\x59\x95\x07\x0c\xee\x17\x59\xe4\xfc\xa0\xd1\x83\x1b\x1e\xe0\x39\x98\x8c\x85\xfb\x01\x48\xf0\xc0\x8c\x3c\xee\x0a\xd6\x11\x6a\xa7\x06\x1c\x07\x8e\x77\x6c\x0d\x10\x24\xd3\xab\x93\x71\xf3\x2d\x66\xec\x9b\x39\xc6\x7a\x16\xd2\xa2\xdd\x12\x6d\x05\xc3\xde\x33\xc2\x63\xea\xff\xbb\xd5\xbb\x76\x93\xba\x9e\x77\x53\xd3\x87\xdd\x25\x57\xd9\x43\xf6\xf4\xa8\x5d\x16\xae\x6b\x9d\x34\x2d\xe3\x6d\x4c\x8d\x8e\x8c\xf7\xd4\xda\x52\x42\x2e\x05\xa3\x5f\xed\xd7\x6d\xad\x37\x75\xe3\xc6\x90\xd3\x75\x64\xe8\x83\x34\x75\x2c\x6d\x1e\xb1\xbe\x52\x4b\x2b\x69\x63\x70\xc6\x36\x19\x68\xa0\x5b\x7a\x14\xba\x9a\xa8\x9b\xaa\xb2\x42\x12\xfd\x14\xd0\x2e\x3a\xda\x50\x69\xa6\xda\x2e\x58\x2b\x45\x65\xdd\xf1\x3e\xed\x0c\x95\xe7\x0a\x4a\x55\x9e\xfd\x61\x27\xe8\xda\x3e\xc6\x96\xcf\xae\xf8\xbd\x48\x14\xb0\x5d\x72\xf8\xb9\x39\xa0\x38\xbb\xf0\xc2\x2e\x67\x62\x85\x2c\x93\xd9\x94\xe8\xb6\x80\x0b\x06\x8a\xf4\xbc\xcb\xb9\xcd\xf3\xf2\x8d\xb8\x77\xf4\x06\xf4\x0f\x37\xe4\x56\x26\xd6\xa3\xdb\xd0\xdb\x43\xed\xd5\x01\x21\xdc\xe3\x6d\x61\xf0\x55\xa1\x7c\x4f\xc0\x4b\x76\x1b\xd4\xbb\x4f\x46\x27\xa6\xe1\x6b\x8e\xe5\x3d\x94\x70\x8f\x47\x15\xd0\x62\x55\xcf\x4b\xb2\x6e\xb3\x6e\x9c\x39\x2b\x76\x3d\xad\xf7\x51\xbf\xc7\x5e\xee\x49\x44\x0b\x68\x00\x40\x97\xbb\xed\x4c\xa3\x03\x51\xd9\xd7\x03\x3c\x5c\xe8\x7c\xfa\xfc\xf0\xc1\x43\xf4\xd3\x22\x6e\xe3\x3f\x24\xb4\x7f\x95\xa6\x68\x04\x8e\x26\x3b\x39\x21\xcf\x86\xfc\xcd\x9d\x18\x70\xb6\xdd\x5c\xab\x55\x38\x5f\xb1\x05\x05\xb8\x17\x66\x2a\x8c\xd8\xe2\xc2\x8d\x93\xfe\x97\xda\x26\xfd\xc0\x7b\xac\x36\x7a\x25\xda\xe3\xc7\x5a\x0d\xee\x82\x29\xf9\xad\x94\xb7\xc7\x89\x1d\x69\xcd\xe3\x7b\x94\xe5\x84\xab\xcb\x5e\xcf\xfc\x43\x4f\x35\x43\x61\xd4\x7c\x08\xa9\xc7\xd1\x39\xf2\xf8\x61\x83\xa9\xfa\x27\x01\x16\xa8\x66\x5a\xe8\x11\x6f\xdf\x50\xbb\x53\x64\x4f\x80\x1d\xf6\x04\xde\x7d\xfd\x6e\xfd\x33\xa3\xfc\xfb\x6f\x00\x00\x00\xff\xff\x83\xaa\x17\xe7\x85\x21\x00\x00")

func templates_server_parameter_gotmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_server_parameter_gotmpl,
		"templates/server/parameter.gotmpl",
	)
}

func templates_server_parameter_gotmpl() (*asset, error) {
	bytes, err := templates_server_parameter_gotmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/server/parameter.gotmpl", size: 8581, mode: os.FileMode(420), modTime: time.Unix(1424659782, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/model.gotmpl": templates_model_gotmpl,
	"templates/modelvalidator.gotmpl": templates_modelvalidator_gotmpl,
	"templates/server/builder.gotmpl": templates_server_builder_gotmpl,
	"templates/server/operation.gotmpl": templates_server_operation_gotmpl,
	"templates/server/parameter.gotmpl": templates_server_parameter_gotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"model.gotmpl": &_bintree_t{templates_model_gotmpl, map[string]*_bintree_t{
		}},
		"modelvalidator.gotmpl": &_bintree_t{templates_modelvalidator_gotmpl, map[string]*_bintree_t{
		}},
		"server": &_bintree_t{nil, map[string]*_bintree_t{
			"builder.gotmpl": &_bintree_t{templates_server_builder_gotmpl, map[string]*_bintree_t{
			}},
			"operation.gotmpl": &_bintree_t{templates_server_operation_gotmpl, map[string]*_bintree_t{
			}},
			"parameter.gotmpl": &_bintree_t{templates_server_parameter_gotmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

